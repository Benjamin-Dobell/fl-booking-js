{"version":3,"file":"controller.js","sources":["node_modules/fl-assert/dist/assert.js","node_modules/moment/src/lib/utils/hooks.js","node_modules/moment/src/lib/utils/is-array.js","node_modules/moment/src/lib/utils/is-object.js","node_modules/moment/src/lib/utils/is-object-empty.js","node_modules/moment/src/lib/utils/is-number.js","node_modules/moment/src/lib/utils/is-date.js","node_modules/moment/src/lib/utils/map.js","node_modules/moment/src/lib/utils/has-own-prop.js","node_modules/moment/src/lib/utils/extend.js","node_modules/moment/src/lib/create/utc.js","node_modules/moment/src/lib/create/parsing-flags.js","node_modules/moment/src/lib/utils/some.js","node_modules/moment/src/lib/create/valid.js","node_modules/moment/src/lib/utils/is-undefined.js","node_modules/moment/src/lib/moment/constructor.js","node_modules/moment/src/lib/utils/abs-floor.js","node_modules/moment/src/lib/utils/to-int.js","node_modules/moment/src/lib/utils/compare-arrays.js","node_modules/moment/src/lib/utils/deprecate.js","node_modules/moment/src/lib/utils/is-function.js","node_modules/moment/src/lib/locale/set.js","node_modules/moment/src/lib/locale/constructor.js","node_modules/moment/src/lib/utils/keys.js","node_modules/moment/src/lib/locale/calendar.js","node_modules/moment/src/lib/locale/formats.js","node_modules/moment/src/lib/locale/invalid.js","node_modules/moment/src/lib/locale/ordinal.js","node_modules/moment/src/lib/locale/relative.js","node_modules/moment/src/lib/units/aliases.js","node_modules/moment/src/lib/units/priorities.js","node_modules/moment/src/lib/moment/get-set.js","node_modules/moment/src/lib/utils/zero-fill.js","node_modules/moment/src/lib/format/format.js","node_modules/moment/src/lib/parse/regex.js","node_modules/moment/src/lib/parse/token.js","node_modules/moment/src/lib/units/constants.js","node_modules/moment/src/lib/utils/index-of.js","node_modules/moment/src/lib/units/month.js","node_modules/moment/src/lib/units/year.js","node_modules/moment/src/lib/create/date-from-array.js","node_modules/moment/src/lib/units/week-calendar-utils.js","node_modules/moment/src/lib/units/week.js","node_modules/moment/src/lib/units/day-of-week.js","node_modules/moment/src/lib/units/hour.js","node_modules/moment/src/lib/locale/base-config.js","node_modules/moment/src/lib/locale/locales.js","node_modules/moment/src/lib/create/check-overflow.js","node_modules/moment/src/lib/create/from-string.js","node_modules/moment/src/lib/utils/defaults.js","node_modules/moment/src/lib/create/from-array.js","node_modules/moment/src/lib/create/from-string-and-format.js","node_modules/moment/src/lib/create/from-string-and-array.js","node_modules/moment/src/lib/create/from-object.js","node_modules/moment/src/lib/create/from-anything.js","node_modules/moment/src/lib/create/local.js","node_modules/moment/src/lib/moment/min-max.js","node_modules/moment/src/lib/moment/now.js","node_modules/moment/src/lib/duration/constructor.js","node_modules/moment/src/lib/utils/abs-round.js","node_modules/moment/src/lib/units/offset.js","node_modules/moment/src/lib/duration/create.js","node_modules/moment/src/lib/moment/add-subtract.js","node_modules/moment/src/lib/moment/calendar.js","node_modules/moment/src/lib/moment/clone.js","node_modules/moment/src/lib/moment/compare.js","node_modules/moment/src/lib/moment/diff.js","node_modules/moment/src/lib/moment/format.js","node_modules/moment/src/lib/moment/from.js","node_modules/moment/src/lib/moment/to.js","node_modules/moment/src/lib/moment/locale.js","node_modules/moment/src/lib/moment/start-end-of.js","node_modules/moment/src/lib/moment/to-type.js","node_modules/moment/src/lib/moment/valid.js","node_modules/moment/src/lib/moment/creation-data.js","node_modules/moment/src/lib/units/week-year.js","node_modules/moment/src/lib/units/quarter.js","node_modules/moment/src/lib/units/day-of-month.js","node_modules/moment/src/lib/units/day-of-year.js","node_modules/moment/src/lib/units/minute.js","node_modules/moment/src/lib/units/second.js","node_modules/moment/src/lib/units/millisecond.js","node_modules/moment/src/lib/units/timezone.js","node_modules/moment/src/lib/moment/prototype.js","node_modules/moment/src/lib/moment/moment.js","node_modules/moment/src/lib/locale/pre-post-format.js","node_modules/moment/src/lib/locale/prototype.js","node_modules/moment/src/lib/locale/lists.js","node_modules/moment/src/lib/locale/en.js","node_modules/moment/src/lib/locale/locale.js","node_modules/moment/src/lib/duration/abs.js","node_modules/moment/src/lib/duration/add-subtract.js","node_modules/moment/src/lib/utils/abs-ceil.js","node_modules/moment/src/lib/duration/bubble.js","node_modules/moment/src/lib/duration/as.js","node_modules/moment/src/lib/duration/get.js","node_modules/moment/src/lib/duration/humanize.js","node_modules/moment/src/lib/duration/iso-string.js","node_modules/moment/src/lib/duration/prototype.js","node_modules/moment/src/lib/duration/duration.js","node_modules/moment/src/lib/units/timestamp.js","node_modules/moment/src/lib/units/units.js","node_modules/moment/src/moment.js","node_modules/moment-timezone/moment-timezone.js","node_modules/moment-timezone/index.js","src/defaultConfig.js","src/utils.js","src/controller.js"],"sourcesContent":["// Bug checking function that will throw an error whenever\n// the condition sent to it is evaluated to false\n/**\n * Processes the message and outputs the correct message if the condition\n * is false. Otherwise it outputs null.\n * @api private\n * @method processCondition\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return {String | null}  - Error message if there is an error, nul otherwise.\n */\nfunction processCondition(condition, errorMessage) {\n  if (!condition) {\n    var completeErrorMessage = '';\n    var re = /at ([^\\s]+)\\s\\(/g;\n    var stackTrace = new Error().stack;\n    var stackFunctions = [];\n\n    var funcName = re.exec(stackTrace);\n    while (funcName && funcName[1]) {\n      stackFunctions.push(funcName[1]);\n      funcName = re.exec(stackTrace);\n    }\n\n    // Number 0 is processCondition itself,\n    // Number 1 is assert,\n    // Number 2 is the caller function.\n    if (stackFunctions[2]) {\n      completeErrorMessage = stackFunctions[2] + ': ' + completeErrorMessage;\n    }\n\n    completeErrorMessage += errorMessage;\n    return completeErrorMessage;\n  }\n\n  return null;\n}\n\n/**\n * Throws an error if the boolean passed to it evaluates to false.\n * To be used like this:\n * \t\tassert(myDate !== undefined, \"Date cannot be undefined.\");\n * @api public\n * @method assert\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return void\n */\nfunction assert(condition, errorMessage) {\n  var error = processCondition(condition, errorMessage);\n  if (typeof error === 'string') {\n    throw new Error(error);\n  }\n}\n\n/**\n * Logs a warning if the boolean passed to it evaluates to false.\n * To be used like this:\n * \t\tassert.warn(myDate !== undefined, \"No date provided.\");\n * @api public\n * @method warn\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return void\n */\nassert.warn = function warn(condition, errorMessage) {\n  var error = processCondition(condition, errorMessage);\n  if (typeof error === 'string') {\n    console.warn(error);\n  }\n};\n\nexport default assert;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJhc3NlcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQnVnIGNoZWNraW5nIGZ1bmN0aW9uIHRoYXQgd2lsbCB0aHJvdyBhbiBlcnJvciB3aGVuZXZlclxuLy8gdGhlIGNvbmRpdGlvbiBzZW50IHRvIGl0IGlzIGV2YWx1YXRlZCB0byBmYWxzZVxuLyoqXG4gKiBQcm9jZXNzZXMgdGhlIG1lc3NhZ2UgYW5kIG91dHB1dHMgdGhlIGNvcnJlY3QgbWVzc2FnZSBpZiB0aGUgY29uZGl0aW9uXG4gKiBpcyBmYWxzZS4gT3RoZXJ3aXNlIGl0IG91dHB1dHMgbnVsbC5cbiAqIEBhcGkgcHJpdmF0ZVxuICogQG1ldGhvZCBwcm9jZXNzQ29uZGl0aW9uXG4gKiBAcGFyYW0gIHtCb29sZWFufSBjb25kaXRpb24gLSBSZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBjb25kaXRpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gZXJyb3JNZXNzYWdlIC0gTWVzc2FnZSBleHBsYWluaWcgdGhlIGVycm9yIGluIGNhc2UgaXQgaXMgdGhyb3duXG4gKiBAcmV0dXJuIHtTdHJpbmcgfCBudWxsfSAgLSBFcnJvciBtZXNzYWdlIGlmIHRoZXJlIGlzIGFuIGVycm9yLCBudWwgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBwcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgbGV0IGNvbXBsZXRlRXJyb3JNZXNzYWdlID0gJyc7XG4gICAgY29uc3QgcmUgPSAvYXQgKFteXFxzXSspXFxzXFwoL2c7XG4gICAgY29uc3Qgc3RhY2tUcmFjZSA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIGNvbnN0IHN0YWNrRnVuY3Rpb25zID0gW107XG5cbiAgICBsZXQgZnVuY05hbWUgPSByZS5leGVjKHN0YWNrVHJhY2UpO1xuICAgIHdoaWxlIChmdW5jTmFtZSAmJiBmdW5jTmFtZVsxXSkge1xuICAgICAgc3RhY2tGdW5jdGlvbnMucHVzaChmdW5jTmFtZVsxXSk7XG4gICAgICBmdW5jTmFtZSA9IHJlLmV4ZWMoc3RhY2tUcmFjZSk7XG4gICAgfVxuXG4gICAgLy8gTnVtYmVyIDAgaXMgcHJvY2Vzc0NvbmRpdGlvbiBpdHNlbGYsXG4gICAgLy8gTnVtYmVyIDEgaXMgYXNzZXJ0LFxuICAgIC8vIE51bWJlciAyIGlzIHRoZSBjYWxsZXIgZnVuY3Rpb24uXG4gICAgaWYgKHN0YWNrRnVuY3Rpb25zWzJdKSB7XG4gICAgICBjb21wbGV0ZUVycm9yTWVzc2FnZSA9IGAke3N0YWNrRnVuY3Rpb25zWzJdfTogJHtjb21wbGV0ZUVycm9yTWVzc2FnZX1gO1xuICAgIH1cblxuICAgIGNvbXBsZXRlRXJyb3JNZXNzYWdlICs9IGVycm9yTWVzc2FnZTtcbiAgICByZXR1cm4gY29tcGxldGVFcnJvck1lc3NhZ2U7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGJvb2xlYW4gcGFzc2VkIHRvIGl0IGV2YWx1YXRlcyB0byBmYWxzZS5cbiAqIFRvIGJlIHVzZWQgbGlrZSB0aGlzOlxuICogXHRcdGFzc2VydChteURhdGUgIT09IHVuZGVmaW5lZCwgXCJEYXRlIGNhbm5vdCBiZSB1bmRlZmluZWQuXCIpO1xuICogQGFwaSBwdWJsaWNcbiAqIEBtZXRob2QgYXNzZXJ0XG4gKiBAcGFyYW0gIHtCb29sZWFufSBjb25kaXRpb24gLSBSZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBjb25kaXRpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gZXJyb3JNZXNzYWdlIC0gTWVzc2FnZSBleHBsYWluaWcgdGhlIGVycm9yIGluIGNhc2UgaXQgaXMgdGhyb3duXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKSB7XG4gIGNvbnN0IGVycm9yID0gcHJvY2Vzc0NvbmRpdGlvbihjb25kaXRpb24sIGVycm9yTWVzc2FnZSk7XG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nIGlmIHRoZSBib29sZWFuIHBhc3NlZCB0byBpdCBldmFsdWF0ZXMgdG8gZmFsc2UuXG4gKiBUbyBiZSB1c2VkIGxpa2UgdGhpczpcbiAqIFx0XHRhc3NlcnQud2FybihteURhdGUgIT09IHVuZGVmaW5lZCwgXCJObyBkYXRlIHByb3ZpZGVkLlwiKTtcbiAqIEBhcGkgcHVibGljXG4gKiBAbWV0aG9kIHdhcm5cbiAqIEBwYXJhbSAge0Jvb2xlYW59IGNvbmRpdGlvbiAtIFJlc3VsdCBvZiB0aGUgZXZhbHVhdGVkIGNvbmRpdGlvblxuICogQHBhcmFtICB7U3RyaW5nfSBlcnJvck1lc3NhZ2UgLSBNZXNzYWdlIGV4cGxhaW5pZyB0aGUgZXJyb3IgaW4gY2FzZSBpdCBpcyB0aHJvd25cbiAqIEByZXR1cm4gdm9pZFxuICovXG5hc3NlcnQud2FybiA9IGZ1bmN0aW9uIHdhcm4oY29uZGl0aW9uLCBlcnJvck1lc3NhZ2UpIHtcbiAgY29uc3QgZXJyb3IgPSBwcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKTtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4iXSwiZmlsZSI6ImFzc2VydC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9\n","export { hooks, setHookCallback };\n\nvar hookCallback;\n\nfunction hooks () {\n    return hookCallback.apply(null, arguments);\n}\n\n// This is done to register the method called with moment()\n// without creating circular dependencies.\nfunction setHookCallback (callback) {\n    hookCallback = callback;\n}\n","export default function isArray(input) {\n    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n}\n","export default function isObject(input) {\n    // IE8 will treat undefined and null as object if it wasn't for\n    // input != null\n    return input != null && Object.prototype.toString.call(input) === '[object Object]';\n}\n","export default function isObjectEmpty(obj) {\n    var k;\n    for (k in obj) {\n        // even if its not own property I'd still call it non-empty\n        return false;\n    }\n    return true;\n}\n","export default function isNumber(input) {\n    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n}\n","export default function isDate(input) {\n    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n}\n","export default function map(arr, fn) {\n    var res = [], i;\n    for (i = 0; i < arr.length; ++i) {\n        res.push(fn(arr[i], i));\n    }\n    return res;\n}\n","export default function hasOwnProp(a, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n}\n","import hasOwnProp from './has-own-prop';\n\nexport default function extend(a, b) {\n    for (var i in b) {\n        if (hasOwnProp(b, i)) {\n            a[i] = b[i];\n        }\n    }\n\n    if (hasOwnProp(b, 'toString')) {\n        a.toString = b.toString;\n    }\n\n    if (hasOwnProp(b, 'valueOf')) {\n        a.valueOf = b.valueOf;\n    }\n\n    return a;\n}\n","import { createLocalOrUTC } from './from-anything';\n\nexport function createUTC (input, format, locale, strict) {\n    return createLocalOrUTC(input, format, locale, strict, true).utc();\n}\n","function defaultParsingFlags() {\n    // We need to deep clone this object.\n    return {\n        empty           : false,\n        unusedTokens    : [],\n        unusedInput     : [],\n        overflow        : -2,\n        charsLeftOver   : 0,\n        nullInput       : false,\n        invalidMonth    : null,\n        invalidFormat   : false,\n        userInvalidated : false,\n        iso             : false,\n        parsedDateParts : [],\n        meridiem        : null\n    };\n}\n\nexport default function getParsingFlags(m) {\n    if (m._pf == null) {\n        m._pf = defaultParsingFlags();\n    }\n    return m._pf;\n}\n","var some;\nif (Array.prototype.some) {\n    some = Array.prototype.some;\n} else {\n    some = function (fun) {\n        var t = Object(this);\n        var len = t.length >>> 0;\n\n        for (var i = 0; i < len; i++) {\n            if (i in t && fun.call(this, t[i], i, t)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n}\n\nexport { some as default };\n","import extend from '../utils/extend';\nimport { createUTC } from './utc';\nimport getParsingFlags from '../create/parsing-flags';\nimport some from '../utils/some';\n\nexport function isValid(m) {\n    if (m._isValid == null) {\n        var flags = getParsingFlags(m);\n        var parsedParts = some.call(flags.parsedDateParts, function (i) {\n            return i != null;\n        });\n        var isNowValid = !isNaN(m._d.getTime()) &&\n            flags.overflow < 0 &&\n            !flags.empty &&\n            !flags.invalidMonth &&\n            !flags.invalidWeekday &&\n            !flags.nullInput &&\n            !flags.invalidFormat &&\n            !flags.userInvalidated &&\n            (!flags.meridiem || (flags.meridiem && parsedParts));\n\n        if (m._strict) {\n            isNowValid = isNowValid &&\n                flags.charsLeftOver === 0 &&\n                flags.unusedTokens.length === 0 &&\n                flags.bigHour === undefined;\n        }\n\n        if (Object.isFrozen == null || !Object.isFrozen(m)) {\n            m._isValid = isNowValid;\n        }\n        else {\n            return isNowValid;\n        }\n    }\n    return m._isValid;\n}\n\nexport function createInvalid (flags) {\n    var m = createUTC(NaN);\n    if (flags != null) {\n        extend(getParsingFlags(m), flags);\n    }\n    else {\n        getParsingFlags(m).userInvalidated = true;\n    }\n\n    return m;\n}\n","export default function isUndefined(input) {\n    return input === void 0;\n}\n","import { hooks } from '../utils/hooks';\nimport hasOwnProp from '../utils/has-own-prop';\nimport isUndefined from '../utils/is-undefined';\nimport getParsingFlags from '../create/parsing-flags';\n\n// Plugins that add properties should also add the key here (null value),\n// so we can properly clone ourselves.\nvar momentProperties = hooks.momentProperties = [];\n\nexport function copyConfig(to, from) {\n    var i, prop, val;\n\n    if (!isUndefined(from._isAMomentObject)) {\n        to._isAMomentObject = from._isAMomentObject;\n    }\n    if (!isUndefined(from._i)) {\n        to._i = from._i;\n    }\n    if (!isUndefined(from._f)) {\n        to._f = from._f;\n    }\n    if (!isUndefined(from._l)) {\n        to._l = from._l;\n    }\n    if (!isUndefined(from._strict)) {\n        to._strict = from._strict;\n    }\n    if (!isUndefined(from._tzm)) {\n        to._tzm = from._tzm;\n    }\n    if (!isUndefined(from._isUTC)) {\n        to._isUTC = from._isUTC;\n    }\n    if (!isUndefined(from._offset)) {\n        to._offset = from._offset;\n    }\n    if (!isUndefined(from._pf)) {\n        to._pf = getParsingFlags(from);\n    }\n    if (!isUndefined(from._locale)) {\n        to._locale = from._locale;\n    }\n\n    if (momentProperties.length > 0) {\n        for (i in momentProperties) {\n            prop = momentProperties[i];\n            val = from[prop];\n            if (!isUndefined(val)) {\n                to[prop] = val;\n            }\n        }\n    }\n\n    return to;\n}\n\nvar updateInProgress = false;\n\n// Moment prototype object\nexport function Moment(config) {\n    copyConfig(this, config);\n    this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n    if (!this.isValid()) {\n        this._d = new Date(NaN);\n    }\n    // Prevent infinite loop in case updateOffset creates new moment\n    // objects.\n    if (updateInProgress === false) {\n        updateInProgress = true;\n        hooks.updateOffset(this);\n        updateInProgress = false;\n    }\n}\n\nexport function isMoment (obj) {\n    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n}\n","export default function absFloor (number) {\n    if (number < 0) {\n        // -0 -> 0\n        return Math.ceil(number) || 0;\n    } else {\n        return Math.floor(number);\n    }\n}\n","import absFloor from './abs-floor';\n\nexport default function toInt(argumentForCoercion) {\n    var coercedNumber = +argumentForCoercion,\n        value = 0;\n\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n        value = absFloor(coercedNumber);\n    }\n\n    return value;\n}\n","import toInt from './to-int';\n\n// compare two arrays, return the number of differences\nexport default function compareArrays(array1, array2, dontConvert) {\n    var len = Math.min(array1.length, array2.length),\n        lengthDiff = Math.abs(array1.length - array2.length),\n        diffs = 0,\n        i;\n    for (i = 0; i < len; i++) {\n        if ((dontConvert && array1[i] !== array2[i]) ||\n            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n            diffs++;\n        }\n    }\n    return diffs + lengthDiff;\n}\n","import extend from './extend';\nimport { hooks } from './hooks';\nimport isUndefined from './is-undefined';\n\nfunction warn(msg) {\n    if (hooks.suppressDeprecationWarnings === false &&\n            (typeof console !==  'undefined') && console.warn) {\n        console.warn('Deprecation warning: ' + msg);\n    }\n}\n\nexport function deprecate(msg, fn) {\n    var firstTime = true;\n\n    return extend(function () {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(null, msg);\n        }\n        if (firstTime) {\n            var args = [];\n            var arg;\n            for (var i = 0; i < arguments.length; i++) {\n                arg = '';\n                if (typeof arguments[i] === 'object') {\n                    arg += '\\n[' + i + '] ';\n                    for (var key in arguments[0]) {\n                        arg += key + ': ' + arguments[0][key] + ', ';\n                    }\n                    arg = arg.slice(0, -2); // Remove trailing comma and space\n                } else {\n                    arg = arguments[i];\n                }\n                args.push(arg);\n            }\n            warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n            firstTime = false;\n        }\n        return fn.apply(this, arguments);\n    }, fn);\n}\n\nvar deprecations = {};\n\nexport function deprecateSimple(name, msg) {\n    if (hooks.deprecationHandler != null) {\n        hooks.deprecationHandler(name, msg);\n    }\n    if (!deprecations[name]) {\n        warn(msg);\n        deprecations[name] = true;\n    }\n}\n\nhooks.suppressDeprecationWarnings = false;\nhooks.deprecationHandler = null;\n","export default function isFunction(input) {\n    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n}\n","import isFunction from '../utils/is-function';\nimport extend from '../utils/extend';\nimport isObject from '../utils/is-object';\nimport hasOwnProp from '../utils/has-own-prop';\n\nexport function set (config) {\n    var prop, i;\n    for (i in config) {\n        prop = config[i];\n        if (isFunction(prop)) {\n            this[i] = prop;\n        } else {\n            this['_' + i] = prop;\n        }\n    }\n    this._config = config;\n    // Lenient ordinal parsing accepts just a number in addition to\n    // number + (possibly) stuff coming from _ordinalParseLenient.\n    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n}\n\nexport function mergeConfigs(parentConfig, childConfig) {\n    var res = extend({}, parentConfig), prop;\n    for (prop in childConfig) {\n        if (hasOwnProp(childConfig, prop)) {\n            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                res[prop] = {};\n                extend(res[prop], parentConfig[prop]);\n                extend(res[prop], childConfig[prop]);\n            } else if (childConfig[prop] != null) {\n                res[prop] = childConfig[prop];\n            } else {\n                delete res[prop];\n            }\n        }\n    }\n    for (prop in parentConfig) {\n        if (hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])) {\n            // make sure changes to properties don't modify parent config\n            res[prop] = extend({}, res[prop]);\n        }\n    }\n    return res;\n}\n","export function Locale(config) {\n    if (config != null) {\n        this.set(config);\n    }\n}\n","import hasOwnProp from './has-own-prop';\n\nvar keys;\n\nif (Object.keys) {\n    keys = Object.keys;\n} else {\n    keys = function (obj) {\n        var i, res = [];\n        for (i in obj) {\n            if (hasOwnProp(obj, i)) {\n                res.push(i);\n            }\n        }\n        return res;\n    };\n}\n\nexport { keys as default };\n","export var defaultCalendar = {\n    sameDay : '[Today at] LT',\n    nextDay : '[Tomorrow at] LT',\n    nextWeek : 'dddd [at] LT',\n    lastDay : '[Yesterday at] LT',\n    lastWeek : '[Last] dddd [at] LT',\n    sameElse : 'L'\n};\n\nimport isFunction from '../utils/is-function';\n\nexport function calendar (key, mom, now) {\n    var output = this._calendar[key] || this._calendar['sameElse'];\n    return isFunction(output) ? output.call(mom, now) : output;\n}\n","export var defaultLongDateFormat = {\n    LTS  : 'h:mm:ss A',\n    LT   : 'h:mm A',\n    L    : 'MM/DD/YYYY',\n    LL   : 'MMMM D, YYYY',\n    LLL  : 'MMMM D, YYYY h:mm A',\n    LLLL : 'dddd, MMMM D, YYYY h:mm A'\n};\n\nexport function longDateFormat (key) {\n    var format = this._longDateFormat[key],\n        formatUpper = this._longDateFormat[key.toUpperCase()];\n\n    if (format || !formatUpper) {\n        return format;\n    }\n\n    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n        return val.slice(1);\n    });\n\n    return this._longDateFormat[key];\n}\n","export var defaultInvalidDate = 'Invalid date';\n\nexport function invalidDate () {\n    return this._invalidDate;\n}\n","export var defaultOrdinal = '%d';\nexport var defaultOrdinalParse = /\\d{1,2}/;\n\nexport function ordinal (number) {\n    return this._ordinal.replace('%d', number);\n}\n\n","export var defaultRelativeTime = {\n    future : 'in %s',\n    past   : '%s ago',\n    s  : 'a few seconds',\n    m  : 'a minute',\n    mm : '%d minutes',\n    h  : 'an hour',\n    hh : '%d hours',\n    d  : 'a day',\n    dd : '%d days',\n    M  : 'a month',\n    MM : '%d months',\n    y  : 'a year',\n    yy : '%d years'\n};\n\nimport isFunction from '../utils/is-function';\n\nexport function relativeTime (number, withoutSuffix, string, isFuture) {\n    var output = this._relativeTime[string];\n    return (isFunction(output)) ?\n        output(number, withoutSuffix, string, isFuture) :\n        output.replace(/%d/i, number);\n}\n\nexport function pastFuture (diff, output) {\n    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n    return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n}\n","import hasOwnProp from '../utils/has-own-prop';\n\nvar aliases = {};\n\nexport function addUnitAlias (unit, shorthand) {\n    var lowerCase = unit.toLowerCase();\n    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n}\n\nexport function normalizeUnits(units) {\n    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n}\n\nexport function normalizeObjectUnits(inputObject) {\n    var normalizedInput = {},\n        normalizedProp,\n        prop;\n\n    for (prop in inputObject) {\n        if (hasOwnProp(inputObject, prop)) {\n            normalizedProp = normalizeUnits(prop);\n            if (normalizedProp) {\n                normalizedInput[normalizedProp] = inputObject[prop];\n            }\n        }\n    }\n\n    return normalizedInput;\n}\n\n","var priorities = {};\n\nexport function addUnitPriority(unit, priority) {\n    priorities[unit] = priority;\n}\n\nexport function getPrioritizedUnits(unitsObj) {\n    var units = [];\n    for (var u in unitsObj) {\n        units.push({unit: u, priority: priorities[u]});\n    }\n    units.sort(function (a, b) {\n        return a.priority - b.priority;\n    });\n    return units;\n}\n","import { normalizeUnits, normalizeObjectUnits } from '../units/aliases';\nimport { getPrioritizedUnits } from '../units/priorities';\nimport { hooks } from '../utils/hooks';\nimport isFunction from '../utils/is-function';\n\n\nexport function makeGetSet (unit, keepTime) {\n    return function (value) {\n        if (value != null) {\n            set(this, unit, value);\n            hooks.updateOffset(this, keepTime);\n            return this;\n        } else {\n            return get(this, unit);\n        }\n    };\n}\n\nexport function get (mom, unit) {\n    return mom.isValid() ?\n        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n}\n\nexport function set (mom, unit, value) {\n    if (mom.isValid()) {\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n    }\n}\n\n// MOMENTS\n\nexport function stringGet (units) {\n    units = normalizeUnits(units);\n    if (isFunction(this[units])) {\n        return this[units]();\n    }\n    return this;\n}\n\n\nexport function stringSet (units, value) {\n    if (typeof units === 'object') {\n        units = normalizeObjectUnits(units);\n        var prioritized = getPrioritizedUnits(units);\n        for (var i = 0; i < prioritized.length; i++) {\n            this[prioritized[i].unit](units[prioritized[i].unit]);\n        }\n    } else {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units](value);\n        }\n    }\n    return this;\n}\n","export default function zeroFill(number, targetLength, forceSign) {\n    var absNumber = '' + Math.abs(number),\n        zerosToFill = targetLength - absNumber.length,\n        sign = number >= 0;\n    return (sign ? (forceSign ? '+' : '') : '-') +\n        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n}\n","import zeroFill from '../utils/zero-fill';\n\nexport var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\nvar localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\nvar formatFunctions = {};\n\nexport var formatTokenFunctions = {};\n\n// token:    'M'\n// padded:   ['MM', 2]\n// ordinal:  'Mo'\n// callback: function () { this.month() + 1 }\nexport function addFormatToken (token, padded, ordinal, callback) {\n    var func = callback;\n    if (typeof callback === 'string') {\n        func = function () {\n            return this[callback]();\n        };\n    }\n    if (token) {\n        formatTokenFunctions[token] = func;\n    }\n    if (padded) {\n        formatTokenFunctions[padded[0]] = function () {\n            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n        };\n    }\n    if (ordinal) {\n        formatTokenFunctions[ordinal] = function () {\n            return this.localeData().ordinal(func.apply(this, arguments), token);\n        };\n    }\n}\n\nfunction removeFormattingTokens(input) {\n    if (input.match(/\\[[\\s\\S]/)) {\n        return input.replace(/^\\[|\\]$/g, '');\n    }\n    return input.replace(/\\\\/g, '');\n}\n\nfunction makeFormatFunction(format) {\n    var array = format.match(formattingTokens), i, length;\n\n    for (i = 0, length = array.length; i < length; i++) {\n        if (formatTokenFunctions[array[i]]) {\n            array[i] = formatTokenFunctions[array[i]];\n        } else {\n            array[i] = removeFormattingTokens(array[i]);\n        }\n    }\n\n    return function (mom) {\n        var output = '', i;\n        for (i = 0; i < length; i++) {\n            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n        }\n        return output;\n    };\n}\n\n// format date using native date object\nexport function formatMoment(m, format) {\n    if (!m.isValid()) {\n        return m.localeData().invalidDate();\n    }\n\n    format = expandFormat(format, m.localeData());\n    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n    return formatFunctions[format](m);\n}\n\nexport function expandFormat(format, locale) {\n    var i = 5;\n\n    function replaceLongDateFormatTokens(input) {\n        return locale.longDateFormat(input) || input;\n    }\n\n    localFormattingTokens.lastIndex = 0;\n    while (i >= 0 && localFormattingTokens.test(format)) {\n        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n        localFormattingTokens.lastIndex = 0;\n        i -= 1;\n    }\n\n    return format;\n}\n","export var match1         = /\\d/;            //       0 - 9\nexport var match2         = /\\d\\d/;          //      00 - 99\nexport var match3         = /\\d{3}/;         //     000 - 999\nexport var match4         = /\\d{4}/;         //    0000 - 9999\nexport var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\nexport var match1to2      = /\\d\\d?/;         //       0 - 99\nexport var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\nexport var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\nexport var match1to3      = /\\d{1,3}/;       //       0 - 999\nexport var match1to4      = /\\d{1,4}/;       //       0 - 9999\nexport var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\nexport var matchUnsigned  = /\\d+/;           //       0 - inf\nexport var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\nexport var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\nexport var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\nexport var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n// any word (or two) characters or numbers including two/three word month in arabic.\n// includes scottish gaelic two word and hyphenated months\nexport var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n\nimport hasOwnProp from '../utils/has-own-prop';\nimport isFunction from '../utils/is-function';\n\nvar regexes = {};\n\nexport function addRegexToken (token, regex, strictRegex) {\n    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n        return (isStrict && strictRegex) ? strictRegex : regex;\n    };\n}\n\nexport function getParseRegexForToken (token, config) {\n    if (!hasOwnProp(regexes, token)) {\n        return new RegExp(unescapeFormat(token));\n    }\n\n    return regexes[token](config._strict, config._locale);\n}\n\n// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\nfunction unescapeFormat(s) {\n    return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n        return p1 || p2 || p3 || p4;\n    }));\n}\n\nexport function regexEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n","import hasOwnProp from '../utils/has-own-prop';\nimport isNumber from '../utils/is-number';\nimport toInt from '../utils/to-int';\n\nvar tokens = {};\n\nexport function addParseToken (token, callback) {\n    var i, func = callback;\n    if (typeof token === 'string') {\n        token = [token];\n    }\n    if (isNumber(callback)) {\n        func = function (input, array) {\n            array[callback] = toInt(input);\n        };\n    }\n    for (i = 0; i < token.length; i++) {\n        tokens[token[i]] = func;\n    }\n}\n\nexport function addWeekParseToken (token, callback) {\n    addParseToken(token, function (input, array, config, token) {\n        config._w = config._w || {};\n        callback(input, config._w, config, token);\n    });\n}\n\nexport function addTimeToArrayFromToken(token, input, config) {\n    if (input != null && hasOwnProp(tokens, token)) {\n        tokens[token](input, config._a, config, token);\n    }\n}\n","export var YEAR = 0;\nexport var MONTH = 1;\nexport var DATE = 2;\nexport var HOUR = 3;\nexport var MINUTE = 4;\nexport var SECOND = 5;\nexport var MILLISECOND = 6;\nexport var WEEK = 7;\nexport var WEEKDAY = 8;\n","var indexOf;\n\nif (Array.prototype.indexOf) {\n    indexOf = Array.prototype.indexOf;\n} else {\n    indexOf = function (o) {\n        // I know\n        var i;\n        for (i = 0; i < this.length; ++i) {\n            if (this[i] === o) {\n                return i;\n            }\n        }\n        return -1;\n    };\n}\n\nexport { indexOf as default };\n","import { get } from '../moment/get-set';\nimport hasOwnProp from '../utils/has-own-prop';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match2, matchWord, regexEscape } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { hooks } from '../utils/hooks';\nimport { MONTH } from './constants';\nimport toInt from '../utils/to-int';\nimport isArray from '../utils/is-array';\nimport isNumber from '../utils/is-number';\nimport indexOf from '../utils/index-of';\nimport { createUTC } from '../create/utc';\nimport getParsingFlags from '../create/parsing-flags';\n\nexport function daysInMonth(year, month) {\n    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n}\n\n// FORMATTING\n\naddFormatToken('M', ['MM', 2], 'Mo', function () {\n    return this.month() + 1;\n});\n\naddFormatToken('MMM', 0, 0, function (format) {\n    return this.localeData().monthsShort(this, format);\n});\n\naddFormatToken('MMMM', 0, 0, function (format) {\n    return this.localeData().months(this, format);\n});\n\n// ALIASES\n\naddUnitAlias('month', 'M');\n\n// PRIORITY\n\naddUnitPriority('month', 8);\n\n// PARSING\n\naddRegexToken('M',    match1to2);\naddRegexToken('MM',   match1to2, match2);\naddRegexToken('MMM',  function (isStrict, locale) {\n    return locale.monthsShortRegex(isStrict);\n});\naddRegexToken('MMMM', function (isStrict, locale) {\n    return locale.monthsRegex(isStrict);\n});\n\naddParseToken(['M', 'MM'], function (input, array) {\n    array[MONTH] = toInt(input) - 1;\n});\n\naddParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n    var month = config._locale.monthsParse(input, token, config._strict);\n    // if we didn't find a month name, mark the date as invalid.\n    if (month != null) {\n        array[MONTH] = month;\n    } else {\n        getParsingFlags(config).invalidMonth = input;\n    }\n});\n\n// LOCALES\n\nvar MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\nexport var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nexport function localeMonths (m, format) {\n    if (!m) {\n        return this._months;\n    }\n    return isArray(this._months) ? this._months[m.month()] :\n        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n}\n\nexport var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\nexport function localeMonthsShort (m, format) {\n    if (!m) {\n        return this._monthsShort;\n    }\n    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n}\n\nfunction handleStrictParse(monthName, format, strict) {\n    var i, ii, mom, llc = monthName.toLocaleLowerCase();\n    if (!this._monthsParse) {\n        // this is not used\n        this._monthsParse = [];\n        this._longMonthsParse = [];\n        this._shortMonthsParse = [];\n        for (i = 0; i < 12; ++i) {\n            mom = createUTC([2000, i]);\n            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n        }\n    }\n\n    if (strict) {\n        if (format === 'MMM') {\n            ii = indexOf.call(this._shortMonthsParse, llc);\n            return ii !== -1 ? ii : null;\n        } else {\n            ii = indexOf.call(this._longMonthsParse, llc);\n            return ii !== -1 ? ii : null;\n        }\n    } else {\n        if (format === 'MMM') {\n            ii = indexOf.call(this._shortMonthsParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._longMonthsParse, llc);\n            return ii !== -1 ? ii : null;\n        } else {\n            ii = indexOf.call(this._longMonthsParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._shortMonthsParse, llc);\n            return ii !== -1 ? ii : null;\n        }\n    }\n}\n\nexport function localeMonthsParse (monthName, format, strict) {\n    var i, mom, regex;\n\n    if (this._monthsParseExact) {\n        return handleStrictParse.call(this, monthName, format, strict);\n    }\n\n    if (!this._monthsParse) {\n        this._monthsParse = [];\n        this._longMonthsParse = [];\n        this._shortMonthsParse = [];\n    }\n\n    // TODO: add sorting\n    // Sorting makes sure if one month (or abbr) is a prefix of another\n    // see sorting in computeMonthsParse\n    for (i = 0; i < 12; i++) {\n        // make the regex if we don't have it already\n        mom = createUTC([2000, i]);\n        if (strict && !this._longMonthsParse[i]) {\n            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n        }\n        if (!strict && !this._monthsParse[i]) {\n            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n        }\n        // test the regex\n        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n            return i;\n        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n            return i;\n        } else if (!strict && this._monthsParse[i].test(monthName)) {\n            return i;\n        }\n    }\n}\n\n// MOMENTS\n\nexport function setMonth (mom, value) {\n    var dayOfMonth;\n\n    if (!mom.isValid()) {\n        // No op\n        return mom;\n    }\n\n    if (typeof value === 'string') {\n        if (/^\\d+$/.test(value)) {\n            value = toInt(value);\n        } else {\n            value = mom.localeData().monthsParse(value);\n            // TODO: Another silent failure?\n            if (!isNumber(value)) {\n                return mom;\n            }\n        }\n    }\n\n    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n    return mom;\n}\n\nexport function getSetMonth (value) {\n    if (value != null) {\n        setMonth(this, value);\n        hooks.updateOffset(this, true);\n        return this;\n    } else {\n        return get(this, 'Month');\n    }\n}\n\nexport function getDaysInMonth () {\n    return daysInMonth(this.year(), this.month());\n}\n\nvar defaultMonthsShortRegex = matchWord;\nexport function monthsShortRegex (isStrict) {\n    if (this._monthsParseExact) {\n        if (!hasOwnProp(this, '_monthsRegex')) {\n            computeMonthsParse.call(this);\n        }\n        if (isStrict) {\n            return this._monthsShortStrictRegex;\n        } else {\n            return this._monthsShortRegex;\n        }\n    } else {\n        if (!hasOwnProp(this, '_monthsShortRegex')) {\n            this._monthsShortRegex = defaultMonthsShortRegex;\n        }\n        return this._monthsShortStrictRegex && isStrict ?\n            this._monthsShortStrictRegex : this._monthsShortRegex;\n    }\n}\n\nvar defaultMonthsRegex = matchWord;\nexport function monthsRegex (isStrict) {\n    if (this._monthsParseExact) {\n        if (!hasOwnProp(this, '_monthsRegex')) {\n            computeMonthsParse.call(this);\n        }\n        if (isStrict) {\n            return this._monthsStrictRegex;\n        } else {\n            return this._monthsRegex;\n        }\n    } else {\n        if (!hasOwnProp(this, '_monthsRegex')) {\n            this._monthsRegex = defaultMonthsRegex;\n        }\n        return this._monthsStrictRegex && isStrict ?\n            this._monthsStrictRegex : this._monthsRegex;\n    }\n}\n\nfunction computeMonthsParse () {\n    function cmpLenRev(a, b) {\n        return b.length - a.length;\n    }\n\n    var shortPieces = [], longPieces = [], mixedPieces = [],\n        i, mom;\n    for (i = 0; i < 12; i++) {\n        // make the regex if we don't have it already\n        mom = createUTC([2000, i]);\n        shortPieces.push(this.monthsShort(mom, ''));\n        longPieces.push(this.months(mom, ''));\n        mixedPieces.push(this.months(mom, ''));\n        mixedPieces.push(this.monthsShort(mom, ''));\n    }\n    // Sorting makes sure if one month (or abbr) is a prefix of another it\n    // will match the longer piece.\n    shortPieces.sort(cmpLenRev);\n    longPieces.sort(cmpLenRev);\n    mixedPieces.sort(cmpLenRev);\n    for (i = 0; i < 12; i++) {\n        shortPieces[i] = regexEscape(shortPieces[i]);\n        longPieces[i] = regexEscape(longPieces[i]);\n    }\n    for (i = 0; i < 24; i++) {\n        mixedPieces[i] = regexEscape(mixedPieces[i]);\n    }\n\n    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n    this._monthsShortRegex = this._monthsRegex;\n    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n}\n","import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match1to4, match1to6, match2, match4, match6, matchSigned } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { hooks } from '../utils/hooks';\nimport { YEAR } from './constants';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('Y', 0, 0, function () {\n    var y = this.year();\n    return y <= 9999 ? '' + y : '+' + y;\n});\n\naddFormatToken(0, ['YY', 2], 0, function () {\n    return this.year() % 100;\n});\n\naddFormatToken(0, ['YYYY',   4],       0, 'year');\naddFormatToken(0, ['YYYYY',  5],       0, 'year');\naddFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n// ALIASES\n\naddUnitAlias('year', 'y');\n\n// PRIORITIES\n\naddUnitPriority('year', 1);\n\n// PARSING\n\naddRegexToken('Y',      matchSigned);\naddRegexToken('YY',     match1to2, match2);\naddRegexToken('YYYY',   match1to4, match4);\naddRegexToken('YYYYY',  match1to6, match6);\naddRegexToken('YYYYYY', match1to6, match6);\n\naddParseToken(['YYYYY', 'YYYYYY'], YEAR);\naddParseToken('YYYY', function (input, array) {\n    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n});\naddParseToken('YY', function (input, array) {\n    array[YEAR] = hooks.parseTwoDigitYear(input);\n});\naddParseToken('Y', function (input, array) {\n    array[YEAR] = parseInt(input, 10);\n});\n\n// HELPERS\n\nexport function daysInYear(year) {\n    return isLeapYear(year) ? 366 : 365;\n}\n\nfunction isLeapYear(year) {\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n// HOOKS\n\nhooks.parseTwoDigitYear = function (input) {\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n};\n\n// MOMENTS\n\nexport var getSetYear = makeGetSet('FullYear', true);\n\nexport function getIsLeapYear () {\n    return isLeapYear(this.year());\n}\n","export function createDate (y, m, d, h, M, s, ms) {\n    //can't just apply() to create a date:\n    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n    var date = new Date(y, m, d, h, M, s, ms);\n\n    //the date constructor remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n        date.setFullYear(y);\n    }\n    return date;\n}\n\nexport function createUTCDate (y) {\n    var date = new Date(Date.UTC.apply(null, arguments));\n\n    //the Date.UTC function remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n        date.setUTCFullYear(y);\n    }\n    return date;\n}\n","import { daysInYear } from './year';\nimport { createLocal } from '../create/local';\nimport { createUTCDate } from '../create/date-from-array';\n\n// start-of-first-week - start-of-year\nfunction firstWeekOffset(year, dow, doy) {\n    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n        fwd = 7 + dow - doy,\n        // first-week day local weekday -- which local weekday is fwd\n        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n    return -fwdlw + fwd - 1;\n}\n\n//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\nexport function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n    var localWeekday = (7 + weekday - dow) % 7,\n        weekOffset = firstWeekOffset(year, dow, doy),\n        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n        resYear, resDayOfYear;\n\n    if (dayOfYear <= 0) {\n        resYear = year - 1;\n        resDayOfYear = daysInYear(resYear) + dayOfYear;\n    } else if (dayOfYear > daysInYear(year)) {\n        resYear = year + 1;\n        resDayOfYear = dayOfYear - daysInYear(year);\n    } else {\n        resYear = year;\n        resDayOfYear = dayOfYear;\n    }\n\n    return {\n        year: resYear,\n        dayOfYear: resDayOfYear\n    };\n}\n\nexport function weekOfYear(mom, dow, doy) {\n    var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n        resWeek, resYear;\n\n    if (week < 1) {\n        resYear = mom.year() - 1;\n        resWeek = week + weeksInYear(resYear, dow, doy);\n    } else if (week > weeksInYear(mom.year(), dow, doy)) {\n        resWeek = week - weeksInYear(mom.year(), dow, doy);\n        resYear = mom.year() + 1;\n    } else {\n        resYear = mom.year();\n        resWeek = week;\n    }\n\n    return {\n        week: resWeek,\n        year: resYear\n    };\n}\n\nexport function weeksInYear(year, dow, doy) {\n    var weekOffset = firstWeekOffset(year, dow, doy),\n        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n}\n","import { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match2 } from '../parse/regex';\nimport { addWeekParseToken } from '../parse/token';\nimport toInt from '../utils/to-int';\nimport { createLocal } from '../create/local';\nimport { weekOfYear } from './week-calendar-utils';\n\n// FORMATTING\n\naddFormatToken('w', ['ww', 2], 'wo', 'week');\naddFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n// ALIASES\n\naddUnitAlias('week', 'w');\naddUnitAlias('isoWeek', 'W');\n\n// PRIORITIES\n\naddUnitPriority('week', 5);\naddUnitPriority('isoWeek', 5);\n\n// PARSING\n\naddRegexToken('w',  match1to2);\naddRegexToken('ww', match1to2, match2);\naddRegexToken('W',  match1to2);\naddRegexToken('WW', match1to2, match2);\n\naddWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n    week[token.substr(0, 1)] = toInt(input);\n});\n\n// HELPERS\n\n// LOCALES\n\nexport function localeWeek (mom) {\n    return weekOfYear(mom, this._week.dow, this._week.doy).week;\n}\n\nexport var defaultLocaleWeek = {\n    dow : 0, // Sunday is the first day of the week.\n    doy : 6  // The week that contains Jan 1st is the first week of the year.\n};\n\nexport function localeFirstDayOfWeek () {\n    return this._week.dow;\n}\n\nexport function localeFirstDayOfYear () {\n    return this._week.doy;\n}\n\n// MOMENTS\n\nexport function getSetWeek (input) {\n    var week = this.localeData().week(this);\n    return input == null ? week : this.add((input - week) * 7, 'd');\n}\n\nexport function getSetISOWeek (input) {\n    var week = weekOfYear(this, 1, 4).week;\n    return input == null ? week : this.add((input - week) * 7, 'd');\n}\n","import { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, matchWord, regexEscape } from '../parse/regex';\nimport { addWeekParseToken } from '../parse/token';\nimport toInt from '../utils/to-int';\nimport isArray from '../utils/is-array';\nimport indexOf from '../utils/index-of';\nimport hasOwnProp from '../utils/has-own-prop';\nimport { createUTC } from '../create/utc';\nimport getParsingFlags from '../create/parsing-flags';\n\n// FORMATTING\n\naddFormatToken('d', 0, 'do', 'day');\n\naddFormatToken('dd', 0, 0, function (format) {\n    return this.localeData().weekdaysMin(this, format);\n});\n\naddFormatToken('ddd', 0, 0, function (format) {\n    return this.localeData().weekdaysShort(this, format);\n});\n\naddFormatToken('dddd', 0, 0, function (format) {\n    return this.localeData().weekdays(this, format);\n});\n\naddFormatToken('e', 0, 0, 'weekday');\naddFormatToken('E', 0, 0, 'isoWeekday');\n\n// ALIASES\n\naddUnitAlias('day', 'd');\naddUnitAlias('weekday', 'e');\naddUnitAlias('isoWeekday', 'E');\n\n// PRIORITY\naddUnitPriority('day', 11);\naddUnitPriority('weekday', 11);\naddUnitPriority('isoWeekday', 11);\n\n// PARSING\n\naddRegexToken('d',    match1to2);\naddRegexToken('e',    match1to2);\naddRegexToken('E',    match1to2);\naddRegexToken('dd',   function (isStrict, locale) {\n    return locale.weekdaysMinRegex(isStrict);\n});\naddRegexToken('ddd',   function (isStrict, locale) {\n    return locale.weekdaysShortRegex(isStrict);\n});\naddRegexToken('dddd',   function (isStrict, locale) {\n    return locale.weekdaysRegex(isStrict);\n});\n\naddWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n    var weekday = config._locale.weekdaysParse(input, token, config._strict);\n    // if we didn't get a weekday name, mark the date as invalid\n    if (weekday != null) {\n        week.d = weekday;\n    } else {\n        getParsingFlags(config).invalidWeekday = input;\n    }\n});\n\naddWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n    week[token] = toInt(input);\n});\n\n// HELPERS\n\nfunction parseWeekday(input, locale) {\n    if (typeof input !== 'string') {\n        return input;\n    }\n\n    if (!isNaN(input)) {\n        return parseInt(input, 10);\n    }\n\n    input = locale.weekdaysParse(input);\n    if (typeof input === 'number') {\n        return input;\n    }\n\n    return null;\n}\n\nfunction parseIsoWeekday(input, locale) {\n    if (typeof input === 'string') {\n        return locale.weekdaysParse(input) % 7 || 7;\n    }\n    return isNaN(input) ? null : input;\n}\n\n// LOCALES\n\nexport var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\nexport function localeWeekdays (m, format) {\n    if (!m) {\n        return this._weekdays;\n    }\n    return isArray(this._weekdays) ? this._weekdays[m.day()] :\n        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n}\n\nexport var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\nexport function localeWeekdaysShort (m) {\n    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n}\n\nexport var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\nexport function localeWeekdaysMin (m) {\n    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n}\n\nfunction handleStrictParse(weekdayName, format, strict) {\n    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n    if (!this._weekdaysParse) {\n        this._weekdaysParse = [];\n        this._shortWeekdaysParse = [];\n        this._minWeekdaysParse = [];\n\n        for (i = 0; i < 7; ++i) {\n            mom = createUTC([2000, 1]).day(i);\n            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n        }\n    }\n\n    if (strict) {\n        if (format === 'dddd') {\n            ii = indexOf.call(this._weekdaysParse, llc);\n            return ii !== -1 ? ii : null;\n        } else if (format === 'ddd') {\n            ii = indexOf.call(this._shortWeekdaysParse, llc);\n            return ii !== -1 ? ii : null;\n        } else {\n            ii = indexOf.call(this._minWeekdaysParse, llc);\n            return ii !== -1 ? ii : null;\n        }\n    } else {\n        if (format === 'dddd') {\n            ii = indexOf.call(this._weekdaysParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._shortWeekdaysParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._minWeekdaysParse, llc);\n            return ii !== -1 ? ii : null;\n        } else if (format === 'ddd') {\n            ii = indexOf.call(this._shortWeekdaysParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._weekdaysParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._minWeekdaysParse, llc);\n            return ii !== -1 ? ii : null;\n        } else {\n            ii = indexOf.call(this._minWeekdaysParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._weekdaysParse, llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = indexOf.call(this._shortWeekdaysParse, llc);\n            return ii !== -1 ? ii : null;\n        }\n    }\n}\n\nexport function localeWeekdaysParse (weekdayName, format, strict) {\n    var i, mom, regex;\n\n    if (this._weekdaysParseExact) {\n        return handleStrictParse.call(this, weekdayName, format, strict);\n    }\n\n    if (!this._weekdaysParse) {\n        this._weekdaysParse = [];\n        this._minWeekdaysParse = [];\n        this._shortWeekdaysParse = [];\n        this._fullWeekdaysParse = [];\n    }\n\n    for (i = 0; i < 7; i++) {\n        // make the regex if we don't have it already\n\n        mom = createUTC([2000, 1]).day(i);\n        if (strict && !this._fullWeekdaysParse[i]) {\n            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n        }\n        if (!this._weekdaysParse[i]) {\n            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n        }\n        // test the regex\n        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n            return i;\n        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n            return i;\n        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n            return i;\n        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n            return i;\n        }\n    }\n}\n\n// MOMENTS\n\nexport function getSetDayOfWeek (input) {\n    if (!this.isValid()) {\n        return input != null ? this : NaN;\n    }\n    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n    if (input != null) {\n        input = parseWeekday(input, this.localeData());\n        return this.add(input - day, 'd');\n    } else {\n        return day;\n    }\n}\n\nexport function getSetLocaleDayOfWeek (input) {\n    if (!this.isValid()) {\n        return input != null ? this : NaN;\n    }\n    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n    return input == null ? weekday : this.add(input - weekday, 'd');\n}\n\nexport function getSetISODayOfWeek (input) {\n    if (!this.isValid()) {\n        return input != null ? this : NaN;\n    }\n\n    // behaves the same as moment#day except\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n    // as a setter, sunday should belong to the previous week.\n\n    if (input != null) {\n        var weekday = parseIsoWeekday(input, this.localeData());\n        return this.day(this.day() % 7 ? weekday : weekday - 7);\n    } else {\n        return this.day() || 7;\n    }\n}\n\nvar defaultWeekdaysRegex = matchWord;\nexport function weekdaysRegex (isStrict) {\n    if (this._weekdaysParseExact) {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n            computeWeekdaysParse.call(this);\n        }\n        if (isStrict) {\n            return this._weekdaysStrictRegex;\n        } else {\n            return this._weekdaysRegex;\n        }\n    } else {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n            this._weekdaysRegex = defaultWeekdaysRegex;\n        }\n        return this._weekdaysStrictRegex && isStrict ?\n            this._weekdaysStrictRegex : this._weekdaysRegex;\n    }\n}\n\nvar defaultWeekdaysShortRegex = matchWord;\nexport function weekdaysShortRegex (isStrict) {\n    if (this._weekdaysParseExact) {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n            computeWeekdaysParse.call(this);\n        }\n        if (isStrict) {\n            return this._weekdaysShortStrictRegex;\n        } else {\n            return this._weekdaysShortRegex;\n        }\n    } else {\n        if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n            this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n        }\n        return this._weekdaysShortStrictRegex && isStrict ?\n            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n    }\n}\n\nvar defaultWeekdaysMinRegex = matchWord;\nexport function weekdaysMinRegex (isStrict) {\n    if (this._weekdaysParseExact) {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n            computeWeekdaysParse.call(this);\n        }\n        if (isStrict) {\n            return this._weekdaysMinStrictRegex;\n        } else {\n            return this._weekdaysMinRegex;\n        }\n    } else {\n        if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n            this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n        }\n        return this._weekdaysMinStrictRegex && isStrict ?\n            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n    }\n}\n\n\nfunction computeWeekdaysParse () {\n    function cmpLenRev(a, b) {\n        return b.length - a.length;\n    }\n\n    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n        i, mom, minp, shortp, longp;\n    for (i = 0; i < 7; i++) {\n        // make the regex if we don't have it already\n        mom = createUTC([2000, 1]).day(i);\n        minp = this.weekdaysMin(mom, '');\n        shortp = this.weekdaysShort(mom, '');\n        longp = this.weekdays(mom, '');\n        minPieces.push(minp);\n        shortPieces.push(shortp);\n        longPieces.push(longp);\n        mixedPieces.push(minp);\n        mixedPieces.push(shortp);\n        mixedPieces.push(longp);\n    }\n    // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n    // will match the longer piece.\n    minPieces.sort(cmpLenRev);\n    shortPieces.sort(cmpLenRev);\n    longPieces.sort(cmpLenRev);\n    mixedPieces.sort(cmpLenRev);\n    for (i = 0; i < 7; i++) {\n        shortPieces[i] = regexEscape(shortPieces[i]);\n        longPieces[i] = regexEscape(longPieces[i]);\n        mixedPieces[i] = regexEscape(mixedPieces[i]);\n    }\n\n    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n    this._weekdaysShortRegex = this._weekdaysRegex;\n    this._weekdaysMinRegex = this._weekdaysRegex;\n\n    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n}\n","import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match2, match3to4, match5to6 } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { HOUR, MINUTE, SECOND } from './constants';\nimport toInt from '../utils/to-int';\nimport zeroFill from '../utils/zero-fill';\nimport getParsingFlags from '../create/parsing-flags';\n\n// FORMATTING\n\nfunction hFormat() {\n    return this.hours() % 12 || 12;\n}\n\nfunction kFormat() {\n    return this.hours() || 24;\n}\n\naddFormatToken('H', ['HH', 2], 0, 'hour');\naddFormatToken('h', ['hh', 2], 0, hFormat);\naddFormatToken('k', ['kk', 2], 0, kFormat);\n\naddFormatToken('hmm', 0, 0, function () {\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n});\n\naddFormatToken('hmmss', 0, 0, function () {\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n        zeroFill(this.seconds(), 2);\n});\n\naddFormatToken('Hmm', 0, 0, function () {\n    return '' + this.hours() + zeroFill(this.minutes(), 2);\n});\n\naddFormatToken('Hmmss', 0, 0, function () {\n    return '' + this.hours() + zeroFill(this.minutes(), 2) +\n        zeroFill(this.seconds(), 2);\n});\n\nfunction meridiem (token, lowercase) {\n    addFormatToken(token, 0, 0, function () {\n        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n    });\n}\n\nmeridiem('a', true);\nmeridiem('A', false);\n\n// ALIASES\n\naddUnitAlias('hour', 'h');\n\n// PRIORITY\naddUnitPriority('hour', 13);\n\n// PARSING\n\nfunction matchMeridiem (isStrict, locale) {\n    return locale._meridiemParse;\n}\n\naddRegexToken('a',  matchMeridiem);\naddRegexToken('A',  matchMeridiem);\naddRegexToken('H',  match1to2);\naddRegexToken('h',  match1to2);\naddRegexToken('HH', match1to2, match2);\naddRegexToken('hh', match1to2, match2);\n\naddRegexToken('hmm', match3to4);\naddRegexToken('hmmss', match5to6);\naddRegexToken('Hmm', match3to4);\naddRegexToken('Hmmss', match5to6);\n\naddParseToken(['H', 'HH'], HOUR);\naddParseToken(['a', 'A'], function (input, array, config) {\n    config._isPm = config._locale.isPM(input);\n    config._meridiem = input;\n});\naddParseToken(['h', 'hh'], function (input, array, config) {\n    array[HOUR] = toInt(input);\n    getParsingFlags(config).bigHour = true;\n});\naddParseToken('hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n    getParsingFlags(config).bigHour = true;\n});\naddParseToken('hmmss', function (input, array, config) {\n    var pos1 = input.length - 4;\n    var pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n    getParsingFlags(config).bigHour = true;\n});\naddParseToken('Hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n});\naddParseToken('Hmmss', function (input, array, config) {\n    var pos1 = input.length - 4;\n    var pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n});\n\n// LOCALES\n\nexport function localeIsPM (input) {\n    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n    // Using charAt should be more compatible.\n    return ((input + '').toLowerCase().charAt(0) === 'p');\n}\n\nexport var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\nexport function localeMeridiem (hours, minutes, isLower) {\n    if (hours > 11) {\n        return isLower ? 'pm' : 'PM';\n    } else {\n        return isLower ? 'am' : 'AM';\n    }\n}\n\n\n// MOMENTS\n\n// Setting the hour should keep the time, because the user explicitly\n// specified which hour he wants. So trying to maintain the same hour (in\n// a new timezone) makes sense. Adding/subtracting hours does not follow\n// this rule.\nexport var getSetHour = makeGetSet('Hours', true);\n","import { defaultCalendar } from './calendar';\nimport { defaultLongDateFormat } from './formats';\nimport { defaultInvalidDate } from './invalid';\nimport { defaultOrdinal, defaultOrdinalParse } from './ordinal';\nimport { defaultRelativeTime } from './relative';\n\n// months\nimport {\n    defaultLocaleMonths,\n    defaultLocaleMonthsShort,\n} from '../units/month';\n\n// week\nimport { defaultLocaleWeek } from '../units/week';\n\n// weekdays\nimport {\n    defaultLocaleWeekdays,\n    defaultLocaleWeekdaysMin,\n    defaultLocaleWeekdaysShort,\n} from '../units/day-of-week';\n\n// meridiem\nimport { defaultLocaleMeridiemParse } from '../units/hour';\n\nexport var baseConfig = {\n    calendar: defaultCalendar,\n    longDateFormat: defaultLongDateFormat,\n    invalidDate: defaultInvalidDate,\n    ordinal: defaultOrdinal,\n    ordinalParse: defaultOrdinalParse,\n    relativeTime: defaultRelativeTime,\n\n    months: defaultLocaleMonths,\n    monthsShort: defaultLocaleMonthsShort,\n\n    week: defaultLocaleWeek,\n\n    weekdays: defaultLocaleWeekdays,\n    weekdaysMin: defaultLocaleWeekdaysMin,\n    weekdaysShort: defaultLocaleWeekdaysShort,\n\n    meridiemParse: defaultLocaleMeridiemParse\n};\n","import isArray from '../utils/is-array';\nimport hasOwnProp from '../utils/has-own-prop';\nimport isUndefined from '../utils/is-undefined';\nimport compareArrays from '../utils/compare-arrays';\nimport { deprecateSimple } from '../utils/deprecate';\nimport { mergeConfigs } from './set';\nimport { Locale } from './constructor';\nimport keys from '../utils/keys';\n\nimport { baseConfig } from './base-config';\n\n// internal storage for locale config files\nvar locales = {};\nvar localeFamilies = {};\nvar globalLocale;\n\nfunction normalizeLocale(key) {\n    return key ? key.toLowerCase().replace('_', '-') : key;\n}\n\n// pick the locale from the array\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\nfunction chooseLocale(names) {\n    var i = 0, j, next, locale, split;\n\n    while (i < names.length) {\n        split = normalizeLocale(names[i]).split('-');\n        j = split.length;\n        next = normalizeLocale(names[i + 1]);\n        next = next ? next.split('-') : null;\n        while (j > 0) {\n            locale = loadLocale(split.slice(0, j).join('-'));\n            if (locale) {\n                return locale;\n            }\n            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                //the next array item is better than a shallower substring of this one\n                break;\n            }\n            j--;\n        }\n        i++;\n    }\n    return null;\n}\n\nfunction loadLocale(name) {\n    var oldLocale = null;\n    // TODO: Find a better way to register and load all the locales in Node\n    if (!locales[name] && (typeof module !== 'undefined') &&\n            module && module.exports) {\n        try {\n            oldLocale = globalLocale._abbr;\n            require('./locale/' + name);\n            // because defineLocale currently also sets the global locale, we\n            // want to undo that for lazy loaded locales\n            getSetGlobalLocale(oldLocale);\n        } catch (e) { }\n    }\n    return locales[name];\n}\n\n// This function will load locale and then set the global locale.  If\n// no arguments are passed in, it will simply return the current global\n// locale key.\nexport function getSetGlobalLocale (key, values) {\n    var data;\n    if (key) {\n        if (isUndefined(values)) {\n            data = getLocale(key);\n        }\n        else {\n            data = defineLocale(key, values);\n        }\n\n        if (data) {\n            // moment.duration._locale = moment._locale = data;\n            globalLocale = data;\n        }\n    }\n\n    return globalLocale._abbr;\n}\n\nexport function defineLocale (name, config) {\n    if (config !== null) {\n        var parentConfig = baseConfig;\n        config.abbr = name;\n        if (locales[name] != null) {\n            deprecateSimple('defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                    'an existing locale. moment.defineLocale(localeName, ' +\n                    'config) should only be used for creating a new locale ' +\n                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n            parentConfig = locales[name]._config;\n        } else if (config.parentLocale != null) {\n            if (locales[config.parentLocale] != null) {\n                parentConfig = locales[config.parentLocale]._config;\n            } else {\n                if (!localeFamilies[config.parentLocale]) {\n                    localeFamilies[config.parentLocale] = [];\n                }\n                localeFamilies[config.parentLocale].push({\n                    name: name,\n                    config: config\n                });\n                return null;\n            }\n        }\n        locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n        if (localeFamilies[name]) {\n            localeFamilies[name].forEach(function (x) {\n                defineLocale(x.name, x.config);\n            });\n        }\n\n        // backwards compat for now: also set the locale\n        // make sure we set the locale AFTER all child locales have been\n        // created, so we won't end up with the child locale set.\n        getSetGlobalLocale(name);\n\n\n        return locales[name];\n    } else {\n        // useful for testing\n        delete locales[name];\n        return null;\n    }\n}\n\nexport function updateLocale(name, config) {\n    if (config != null) {\n        var locale, parentConfig = baseConfig;\n        // MERGE\n        if (locales[name] != null) {\n            parentConfig = locales[name]._config;\n        }\n        config = mergeConfigs(parentConfig, config);\n        locale = new Locale(config);\n        locale.parentLocale = locales[name];\n        locales[name] = locale;\n\n        // backwards compat for now: also set the locale\n        getSetGlobalLocale(name);\n    } else {\n        // pass null for config to unupdate, useful for tests\n        if (locales[name] != null) {\n            if (locales[name].parentLocale != null) {\n                locales[name] = locales[name].parentLocale;\n            } else if (locales[name] != null) {\n                delete locales[name];\n            }\n        }\n    }\n    return locales[name];\n}\n\n// returns locale data\nexport function getLocale (key) {\n    var locale;\n\n    if (key && key._locale && key._locale._abbr) {\n        key = key._locale._abbr;\n    }\n\n    if (!key) {\n        return globalLocale;\n    }\n\n    if (!isArray(key)) {\n        //short-circuit everything else\n        locale = loadLocale(key);\n        if (locale) {\n            return locale;\n        }\n        key = [key];\n    }\n\n    return chooseLocale(key);\n}\n\nexport function listLocales() {\n    return keys(locales);\n}\n","import { daysInMonth } from '../units/month';\nimport { YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND, WEEK, WEEKDAY } from '../units/constants';\nimport getParsingFlags from '../create/parsing-flags';\n\nexport default function checkOverflow (m) {\n    var overflow;\n    var a = m._a;\n\n    if (a && getParsingFlags(m).overflow === -2) {\n        overflow =\n            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n            -1;\n\n        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n            overflow = DATE;\n        }\n        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n            overflow = WEEK;\n        }\n        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n            overflow = WEEKDAY;\n        }\n\n        getParsingFlags(m).overflow = overflow;\n    }\n\n    return m;\n}\n\n","import { configFromStringAndFormat } from './from-string-and-format';\nimport { hooks } from '../utils/hooks';\nimport { deprecate } from '../utils/deprecate';\nimport getParsingFlags from './parsing-flags';\n\n// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\nvar tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\nvar isoDates = [\n    ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n    ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n    ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n    ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n    ['YYYY-DDD', /\\d{4}-\\d{3}/],\n    ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n    ['YYYYYYMMDD', /[+-]\\d{10}/],\n    ['YYYYMMDD', /\\d{8}/],\n    // YYYYMM is NOT allowed by the standard\n    ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n    ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n    ['YYYYDDD', /\\d{7}/]\n];\n\n// iso time formats and regexes\nvar isoTimes = [\n    ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n    ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n    ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n    ['HH:mm', /\\d\\d:\\d\\d/],\n    ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n    ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n    ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n    ['HHmm', /\\d\\d\\d\\d/],\n    ['HH', /\\d\\d/]\n];\n\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n// date from iso format\nexport function configFromISO(config) {\n    var i, l,\n        string = config._i,\n        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n        allowTime, dateFormat, timeFormat, tzFormat;\n\n    if (match) {\n        getParsingFlags(config).iso = true;\n\n        for (i = 0, l = isoDates.length; i < l; i++) {\n            if (isoDates[i][1].exec(match[1])) {\n                dateFormat = isoDates[i][0];\n                allowTime = isoDates[i][2] !== false;\n                break;\n            }\n        }\n        if (dateFormat == null) {\n            config._isValid = false;\n            return;\n        }\n        if (match[3]) {\n            for (i = 0, l = isoTimes.length; i < l; i++) {\n                if (isoTimes[i][1].exec(match[3])) {\n                    // match[2] should be 'T' or space\n                    timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                    break;\n                }\n            }\n            if (timeFormat == null) {\n                config._isValid = false;\n                return;\n            }\n        }\n        if (!allowTime && timeFormat != null) {\n            config._isValid = false;\n            return;\n        }\n        if (match[4]) {\n            if (tzRegex.exec(match[4])) {\n                tzFormat = 'Z';\n            } else {\n                config._isValid = false;\n                return;\n            }\n        }\n        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n        configFromStringAndFormat(config);\n    } else {\n        config._isValid = false;\n    }\n}\n\n// date from iso format or fallback\nexport function configFromString(config) {\n    var matched = aspNetJsonRegex.exec(config._i);\n\n    if (matched !== null) {\n        config._d = new Date(+matched[1]);\n        return;\n    }\n\n    configFromISO(config);\n    if (config._isValid === false) {\n        delete config._isValid;\n        hooks.createFromInputFallback(config);\n    }\n}\n\nhooks.createFromInputFallback = deprecate(\n    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +\n    'which is not reliable across all browsers and versions. Non ISO date formats are ' +\n    'discouraged and will be removed in an upcoming major release. Please refer to ' +\n    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n    function (config) {\n        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n    }\n);\n","// Pick the first defined of two or three arguments.\nexport default function defaults(a, b, c) {\n    if (a != null) {\n        return a;\n    }\n    if (b != null) {\n        return b;\n    }\n    return c;\n}\n","import { hooks } from '../utils/hooks';\nimport { createDate, createUTCDate } from './date-from-array';\nimport { daysInYear } from '../units/year';\nimport { weekOfYear, weeksInYear, dayOfYearFromWeeks } from '../units/week-calendar-utils';\nimport { YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND } from '../units/constants';\nimport { createLocal } from './local';\nimport defaults from '../utils/defaults';\nimport getParsingFlags from './parsing-flags';\n\nfunction currentDateArray(config) {\n    // hooks is actually the exported moment object\n    var nowValue = new Date(hooks.now());\n    if (config._useUTC) {\n        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n    }\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n}\n\n// convert an array to a date.\n// the array should mirror the parameters below\n// note: all values past the year are optional and will default to the lowest possible value.\n// [year, month, day , hour, minute, second, millisecond]\nexport function configFromArray (config) {\n    var i, date, input = [], currentDate, yearToUse;\n\n    if (config._d) {\n        return;\n    }\n\n    currentDate = currentDateArray(config);\n\n    //compute day of the year from weeks and weekdays\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n        dayOfYearFromWeekInfo(config);\n    }\n\n    //if the day of the year is set, figure out what it is\n    if (config._dayOfYear) {\n        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n        if (config._dayOfYear > daysInYear(yearToUse)) {\n            getParsingFlags(config)._overflowDayOfYear = true;\n        }\n\n        date = createUTCDate(yearToUse, 0, config._dayOfYear);\n        config._a[MONTH] = date.getUTCMonth();\n        config._a[DATE] = date.getUTCDate();\n    }\n\n    // Default to current date.\n    // * if no year, month, day of month are given, default to today\n    // * if day of month is given, default month and year\n    // * if month is given, default only year\n    // * if year is given, don't default anything\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {\n        config._a[i] = input[i] = currentDate[i];\n    }\n\n    // Zero out whatever was not defaulted, including time\n    for (; i < 7; i++) {\n        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n    }\n\n    // Check for 24:00:00.000\n    if (config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0) {\n        config._nextDay = true;\n        config._a[HOUR] = 0;\n    }\n\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n    // Apply timezone offset from input. The actual utcOffset can be changed\n    // with parseZone.\n    if (config._tzm != null) {\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n    }\n\n    if (config._nextDay) {\n        config._a[HOUR] = 24;\n    }\n}\n\nfunction dayOfYearFromWeekInfo(config) {\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n    w = config._w;\n    if (w.GG != null || w.W != null || w.E != null) {\n        dow = 1;\n        doy = 4;\n\n        // TODO: We need to take the current isoWeekYear, but that depends on\n        // how we interpret now (local, utc, fixed offset). So create\n        // a now version of current config (take local/utc/offset flags, and\n        // create now).\n        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n        week = defaults(w.W, 1);\n        weekday = defaults(w.E, 1);\n        if (weekday < 1 || weekday > 7) {\n            weekdayOverflow = true;\n        }\n    } else {\n        dow = config._locale._week.dow;\n        doy = config._locale._week.doy;\n\n        var curWeek = weekOfYear(createLocal(), dow, doy);\n\n        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n        // Default to current week.\n        week = defaults(w.w, curWeek.week);\n\n        if (w.d != null) {\n            // weekday -- low day numbers are considered next week\n            weekday = w.d;\n            if (weekday < 0 || weekday > 6) {\n                weekdayOverflow = true;\n            }\n        } else if (w.e != null) {\n            // local weekday -- counting starts from begining of week\n            weekday = w.e + dow;\n            if (w.e < 0 || w.e > 6) {\n                weekdayOverflow = true;\n            }\n        } else {\n            // default to begining of week\n            weekday = dow;\n        }\n    }\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n        getParsingFlags(config)._overflowWeeks = true;\n    } else if (weekdayOverflow != null) {\n        getParsingFlags(config)._overflowWeekday = true;\n    } else {\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n        config._a[YEAR] = temp.year;\n        config._dayOfYear = temp.dayOfYear;\n    }\n}\n","import { configFromISO } from './from-string';\nimport { configFromArray } from './from-array';\nimport { getParseRegexForToken }   from '../parse/regex';\nimport { addTimeToArrayFromToken } from '../parse/token';\nimport { expandFormat, formatTokenFunctions, formattingTokens } from '../format/format';\nimport checkOverflow from './check-overflow';\nimport { HOUR } from '../units/constants';\nimport { hooks } from '../utils/hooks';\nimport getParsingFlags from './parsing-flags';\n\n// constant that refers to the ISO standard\nhooks.ISO_8601 = function () {};\n\n// date from string and format string\nexport function configFromStringAndFormat(config) {\n    // TODO: Move this to another part of the creation flow to prevent circular deps\n    if (config._f === hooks.ISO_8601) {\n        configFromISO(config);\n        return;\n    }\n\n    config._a = [];\n    getParsingFlags(config).empty = true;\n\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`\n    var string = '' + config._i,\n        i, parsedInput, tokens, token, skipped,\n        stringLength = string.length,\n        totalParsedInputLength = 0;\n\n    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n    for (i = 0; i < tokens.length; i++) {\n        token = tokens[i];\n        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n        // console.log('token', token, 'parsedInput', parsedInput,\n        //         'regex', getParseRegexForToken(token, config));\n        if (parsedInput) {\n            skipped = string.substr(0, string.indexOf(parsedInput));\n            if (skipped.length > 0) {\n                getParsingFlags(config).unusedInput.push(skipped);\n            }\n            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n            totalParsedInputLength += parsedInput.length;\n        }\n        // don't parse if it's not a known token\n        if (formatTokenFunctions[token]) {\n            if (parsedInput) {\n                getParsingFlags(config).empty = false;\n            }\n            else {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n            addTimeToArrayFromToken(token, parsedInput, config);\n        }\n        else if (config._strict && !parsedInput) {\n            getParsingFlags(config).unusedTokens.push(token);\n        }\n    }\n\n    // add remaining unparsed input length to the string\n    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n    if (string.length > 0) {\n        getParsingFlags(config).unusedInput.push(string);\n    }\n\n    // clear _12h flag if hour is <= 12\n    if (config._a[HOUR] <= 12 &&\n        getParsingFlags(config).bigHour === true &&\n        config._a[HOUR] > 0) {\n        getParsingFlags(config).bigHour = undefined;\n    }\n\n    getParsingFlags(config).parsedDateParts = config._a.slice(0);\n    getParsingFlags(config).meridiem = config._meridiem;\n    // handle meridiem\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n    configFromArray(config);\n    checkOverflow(config);\n}\n\n\nfunction meridiemFixWrap (locale, hour, meridiem) {\n    var isPm;\n\n    if (meridiem == null) {\n        // nothing to do\n        return hour;\n    }\n    if (locale.meridiemHour != null) {\n        return locale.meridiemHour(hour, meridiem);\n    } else if (locale.isPM != null) {\n        // Fallback\n        isPm = locale.isPM(meridiem);\n        if (isPm && hour < 12) {\n            hour += 12;\n        }\n        if (!isPm && hour === 12) {\n            hour = 0;\n        }\n        return hour;\n    } else {\n        // this is not supposed to happen\n        return hour;\n    }\n}\n","import { copyConfig } from '../moment/constructor';\nimport { configFromStringAndFormat } from './from-string-and-format';\nimport getParsingFlags from './parsing-flags';\nimport { isValid } from './valid';\nimport extend from '../utils/extend';\n\n// date from string and array of format strings\nexport function configFromStringAndArray(config) {\n    var tempConfig,\n        bestMoment,\n\n        scoreToBeat,\n        i,\n        currentScore;\n\n    if (config._f.length === 0) {\n        getParsingFlags(config).invalidFormat = true;\n        config._d = new Date(NaN);\n        return;\n    }\n\n    for (i = 0; i < config._f.length; i++) {\n        currentScore = 0;\n        tempConfig = copyConfig({}, config);\n        if (config._useUTC != null) {\n            tempConfig._useUTC = config._useUTC;\n        }\n        tempConfig._f = config._f[i];\n        configFromStringAndFormat(tempConfig);\n\n        if (!isValid(tempConfig)) {\n            continue;\n        }\n\n        // if there is any input that was not parsed add a penalty for that format\n        currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n        //or tokens\n        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n        getParsingFlags(tempConfig).score = currentScore;\n\n        if (scoreToBeat == null || currentScore < scoreToBeat) {\n            scoreToBeat = currentScore;\n            bestMoment = tempConfig;\n        }\n    }\n\n    extend(config, bestMoment || tempConfig);\n}\n","import { normalizeObjectUnits } from '../units/aliases';\nimport { configFromArray } from './from-array';\nimport map from '../utils/map';\n\nexport function configFromObject(config) {\n    if (config._d) {\n        return;\n    }\n\n    var i = normalizeObjectUnits(config._i);\n    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n        return obj && parseInt(obj, 10);\n    });\n\n    configFromArray(config);\n}\n","import isArray from '../utils/is-array';\nimport isObject from '../utils/is-object';\nimport isObjectEmpty from '../utils/is-object-empty';\nimport isNumber from '../utils/is-number';\nimport isDate from '../utils/is-date';\nimport map from '../utils/map';\nimport { createInvalid } from './valid';\nimport { Moment, isMoment } from '../moment/constructor';\nimport { getLocale } from '../locale/locales';\nimport { hooks } from '../utils/hooks';\nimport checkOverflow from './check-overflow';\nimport { isValid } from './valid';\n\nimport { configFromStringAndArray }  from './from-string-and-array';\nimport { configFromStringAndFormat } from './from-string-and-format';\nimport { configFromString }          from './from-string';\nimport { configFromArray }           from './from-array';\nimport { configFromObject }          from './from-object';\n\nfunction createFromConfig (config) {\n    var res = new Moment(checkOverflow(prepareConfig(config)));\n    if (res._nextDay) {\n        // Adding is smart enough around DST\n        res.add(1, 'd');\n        res._nextDay = undefined;\n    }\n\n    return res;\n}\n\nexport function prepareConfig (config) {\n    var input = config._i,\n        format = config._f;\n\n    config._locale = config._locale || getLocale(config._l);\n\n    if (input === null || (format === undefined && input === '')) {\n        return createInvalid({nullInput: true});\n    }\n\n    if (typeof input === 'string') {\n        config._i = input = config._locale.preparse(input);\n    }\n\n    if (isMoment(input)) {\n        return new Moment(checkOverflow(input));\n    } else if (isDate(input)) {\n        config._d = input;\n    } else if (isArray(format)) {\n        configFromStringAndArray(config);\n    } else if (format) {\n        configFromStringAndFormat(config);\n    }  else {\n        configFromInput(config);\n    }\n\n    if (!isValid(config)) {\n        config._d = null;\n    }\n\n    return config;\n}\n\nfunction configFromInput(config) {\n    var input = config._i;\n    if (input === undefined) {\n        config._d = new Date(hooks.now());\n    } else if (isDate(input)) {\n        config._d = new Date(input.valueOf());\n    } else if (typeof input === 'string') {\n        configFromString(config);\n    } else if (isArray(input)) {\n        config._a = map(input.slice(0), function (obj) {\n            return parseInt(obj, 10);\n        });\n        configFromArray(config);\n    } else if (typeof(input) === 'object') {\n        configFromObject(config);\n    } else if (isNumber(input)) {\n        // from milliseconds\n        config._d = new Date(input);\n    } else {\n        hooks.createFromInputFallback(config);\n    }\n}\n\nexport function createLocalOrUTC (input, format, locale, strict, isUTC) {\n    var c = {};\n\n    if (locale === true || locale === false) {\n        strict = locale;\n        locale = undefined;\n    }\n\n    if ((isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)) {\n        input = undefined;\n    }\n    // object construction must be done this way.\n    // https://github.com/moment/moment/issues/1423\n    c._isAMomentObject = true;\n    c._useUTC = c._isUTC = isUTC;\n    c._l = locale;\n    c._i = input;\n    c._f = format;\n    c._strict = strict;\n\n    return createFromConfig(c);\n}\n","import { createLocalOrUTC } from './from-anything';\n\nexport function createLocal (input, format, locale, strict) {\n    return createLocalOrUTC(input, format, locale, strict, false);\n}\n","import { deprecate } from '../utils/deprecate';\nimport isArray from '../utils/is-array';\nimport { createLocal } from '../create/local';\nimport { createInvalid } from '../create/valid';\n\nexport var prototypeMin = deprecate(\n    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n    function () {\n        var other = createLocal.apply(null, arguments);\n        if (this.isValid() && other.isValid()) {\n            return other < this ? this : other;\n        } else {\n            return createInvalid();\n        }\n    }\n);\n\nexport var prototypeMax = deprecate(\n    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n    function () {\n        var other = createLocal.apply(null, arguments);\n        if (this.isValid() && other.isValid()) {\n            return other > this ? this : other;\n        } else {\n            return createInvalid();\n        }\n    }\n);\n\n// Pick a moment m from moments so that m[fn](other) is true for all\n// other. This relies on the function fn to be transitive.\n//\n// moments should either be an array of moment objects or an array, whose\n// first element is an array of moment objects.\nfunction pickBy(fn, moments) {\n    var res, i;\n    if (moments.length === 1 && isArray(moments[0])) {\n        moments = moments[0];\n    }\n    if (!moments.length) {\n        return createLocal();\n    }\n    res = moments[0];\n    for (i = 1; i < moments.length; ++i) {\n        if (!moments[i].isValid() || moments[i][fn](res)) {\n            res = moments[i];\n        }\n    }\n    return res;\n}\n\n// TODO: Use [].sort instead?\nexport function min () {\n    var args = [].slice.call(arguments, 0);\n\n    return pickBy('isBefore', args);\n}\n\nexport function max () {\n    var args = [].slice.call(arguments, 0);\n\n    return pickBy('isAfter', args);\n}\n","export var now = function () {\n    return Date.now ? Date.now() : +(new Date());\n};\n","import { normalizeObjectUnits } from '../units/aliases';\nimport { getLocale } from '../locale/locales';\n\nexport function Duration (duration) {\n    var normalizedInput = normalizeObjectUnits(duration),\n        years = normalizedInput.year || 0,\n        quarters = normalizedInput.quarter || 0,\n        months = normalizedInput.month || 0,\n        weeks = normalizedInput.week || 0,\n        days = normalizedInput.day || 0,\n        hours = normalizedInput.hour || 0,\n        minutes = normalizedInput.minute || 0,\n        seconds = normalizedInput.second || 0,\n        milliseconds = normalizedInput.millisecond || 0;\n\n    // representation for dateAddRemove\n    this._milliseconds = +milliseconds +\n        seconds * 1e3 + // 1000\n        minutes * 6e4 + // 1000 * 60\n        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a\n    // day when working around DST, we need to store them separately\n    this._days = +days +\n        weeks * 7;\n    // It is impossible translate months into days without knowing\n    // which months you are are talking about, so we have to store\n    // it separately.\n    this._months = +months +\n        quarters * 3 +\n        years * 12;\n\n    this._data = {};\n\n    this._locale = getLocale();\n\n    this._bubble();\n}\n\nexport function isDuration (obj) {\n    return obj instanceof Duration;\n}\n","export default function absRound (number) {\n    if (number < 0) {\n        return Math.round(-1 * number) * -1;\n    } else {\n        return Math.round(number);\n    }\n}\n","import zeroFill from '../utils/zero-fill';\nimport { createDuration } from '../duration/create';\nimport { addSubtract } from '../moment/add-subtract';\nimport { isMoment, copyConfig } from '../moment/constructor';\nimport { addFormatToken } from '../format/format';\nimport { addRegexToken, matchOffset, matchShortOffset } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { createLocal } from '../create/local';\nimport { prepareConfig } from '../create/from-anything';\nimport { createUTC } from '../create/utc';\nimport isDate from '../utils/is-date';\nimport toInt from '../utils/to-int';\nimport isUndefined from '../utils/is-undefined';\nimport compareArrays from '../utils/compare-arrays';\nimport { hooks } from '../utils/hooks';\n\n// FORMATTING\n\nfunction offset (token, separator) {\n    addFormatToken(token, 0, 0, function () {\n        var offset = this.utcOffset();\n        var sign = '+';\n        if (offset < 0) {\n            offset = -offset;\n            sign = '-';\n        }\n        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n    });\n}\n\noffset('Z', ':');\noffset('ZZ', '');\n\n// PARSING\n\naddRegexToken('Z',  matchShortOffset);\naddRegexToken('ZZ', matchShortOffset);\naddParseToken(['Z', 'ZZ'], function (input, array, config) {\n    config._useUTC = true;\n    config._tzm = offsetFromString(matchShortOffset, input);\n});\n\n// HELPERS\n\n// timezone chunker\n// '+10:00' > ['10',  '00']\n// '-1530'  > ['-15', '30']\nvar chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\nfunction offsetFromString(matcher, string) {\n    var matches = (string || '').match(matcher);\n\n    if (matches === null) {\n        return null;\n    }\n\n    var chunk   = matches[matches.length - 1] || [];\n    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n    var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n    return minutes === 0 ?\n      0 :\n      parts[0] === '+' ? minutes : -minutes;\n}\n\n// Return a moment from input, that is local/utc/zone equivalent to model.\nexport function cloneWithOffset(input, model) {\n    var res, diff;\n    if (model._isUTC) {\n        res = model.clone();\n        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n        // Use low-level api, because this fn is low-level api.\n        res._d.setTime(res._d.valueOf() + diff);\n        hooks.updateOffset(res, false);\n        return res;\n    } else {\n        return createLocal(input).local();\n    }\n}\n\nfunction getDateOffset (m) {\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n    // https://github.com/moment/moment/pull/1871\n    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n}\n\n// HOOKS\n\n// This function will be called whenever a moment is mutated.\n// It is intended to keep the offset in sync with the timezone.\nhooks.updateOffset = function () {};\n\n// MOMENTS\n\n// keepLocalTime = true means only change the timezone, without\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n// +0200, so we adjust the time as needed, to be valid.\n//\n// Keeping the time actually adds/subtracts (one hour)\n// from the actual represented time. That is why we call updateOffset\n// a second time. In case it wants us to change the offset again\n// _changeInProgress == true case, then we have to adjust, because\n// there is no such time in the given timezone.\nexport function getSetOffset (input, keepLocalTime) {\n    var offset = this._offset || 0,\n        localAdjust;\n    if (!this.isValid()) {\n        return input != null ? this : NaN;\n    }\n    if (input != null) {\n        if (typeof input === 'string') {\n            input = offsetFromString(matchShortOffset, input);\n            if (input === null) {\n                return this;\n            }\n        } else if (Math.abs(input) < 16) {\n            input = input * 60;\n        }\n        if (!this._isUTC && keepLocalTime) {\n            localAdjust = getDateOffset(this);\n        }\n        this._offset = input;\n        this._isUTC = true;\n        if (localAdjust != null) {\n            this.add(localAdjust, 'm');\n        }\n        if (offset !== input) {\n            if (!keepLocalTime || this._changeInProgress) {\n                addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n            } else if (!this._changeInProgress) {\n                this._changeInProgress = true;\n                hooks.updateOffset(this, true);\n                this._changeInProgress = null;\n            }\n        }\n        return this;\n    } else {\n        return this._isUTC ? offset : getDateOffset(this);\n    }\n}\n\nexport function getSetZone (input, keepLocalTime) {\n    if (input != null) {\n        if (typeof input !== 'string') {\n            input = -input;\n        }\n\n        this.utcOffset(input, keepLocalTime);\n\n        return this;\n    } else {\n        return -this.utcOffset();\n    }\n}\n\nexport function setOffsetToUTC (keepLocalTime) {\n    return this.utcOffset(0, keepLocalTime);\n}\n\nexport function setOffsetToLocal (keepLocalTime) {\n    if (this._isUTC) {\n        this.utcOffset(0, keepLocalTime);\n        this._isUTC = false;\n\n        if (keepLocalTime) {\n            this.subtract(getDateOffset(this), 'm');\n        }\n    }\n    return this;\n}\n\nexport function setOffsetToParsedOffset () {\n    if (this._tzm != null) {\n        this.utcOffset(this._tzm);\n    } else if (typeof this._i === 'string') {\n        var tZone = offsetFromString(matchOffset, this._i);\n        if (tZone != null) {\n            this.utcOffset(tZone);\n        }\n        else {\n            this.utcOffset(0, true);\n        }\n    }\n    return this;\n}\n\nexport function hasAlignedHourOffset (input) {\n    if (!this.isValid()) {\n        return false;\n    }\n    input = input ? createLocal(input).utcOffset() : 0;\n\n    return (this.utcOffset() - input) % 60 === 0;\n}\n\nexport function isDaylightSavingTime () {\n    return (\n        this.utcOffset() > this.clone().month(0).utcOffset() ||\n        this.utcOffset() > this.clone().month(5).utcOffset()\n    );\n}\n\nexport function isDaylightSavingTimeShifted () {\n    if (!isUndefined(this._isDSTShifted)) {\n        return this._isDSTShifted;\n    }\n\n    var c = {};\n\n    copyConfig(c, this);\n    c = prepareConfig(c);\n\n    if (c._a) {\n        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n        this._isDSTShifted = this.isValid() &&\n            compareArrays(c._a, other.toArray()) > 0;\n    } else {\n        this._isDSTShifted = false;\n    }\n\n    return this._isDSTShifted;\n}\n\nexport function isLocal () {\n    return this.isValid() ? !this._isUTC : false;\n}\n\nexport function isUtcOffset () {\n    return this.isValid() ? this._isUTC : false;\n}\n\nexport function isUtc () {\n    return this.isValid() ? this._isUTC && this._offset === 0 : false;\n}\n","import { Duration, isDuration } from './constructor';\nimport isNumber from '../utils/is-number';\nimport toInt from '../utils/to-int';\nimport absRound from '../utils/abs-round';\nimport hasOwnProp from '../utils/has-own-prop';\nimport { DATE, HOUR, MINUTE, SECOND, MILLISECOND } from '../units/constants';\nimport { cloneWithOffset } from '../units/offset';\nimport { createLocal } from '../create/local';\n\n// ASP.NET json date format regex\nvar aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n// and further modified to allow for strings containing both week and day\nvar isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\nexport function createDuration (input, key) {\n    var duration = input,\n        // matching against regexp is expensive, do it on demand\n        match = null,\n        sign,\n        ret,\n        diffRes;\n\n    if (isDuration(input)) {\n        duration = {\n            ms : input._milliseconds,\n            d  : input._days,\n            M  : input._months\n        };\n    } else if (isNumber(input)) {\n        duration = {};\n        if (key) {\n            duration[key] = input;\n        } else {\n            duration.milliseconds = input;\n        }\n    } else if (!!(match = aspNetRegex.exec(input))) {\n        sign = (match[1] === '-') ? -1 : 1;\n        duration = {\n            y  : 0,\n            d  : toInt(match[DATE])                         * sign,\n            h  : toInt(match[HOUR])                         * sign,\n            m  : toInt(match[MINUTE])                       * sign,\n            s  : toInt(match[SECOND])                       * sign,\n            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n        };\n    } else if (!!(match = isoRegex.exec(input))) {\n        sign = (match[1] === '-') ? -1 : 1;\n        duration = {\n            y : parseIso(match[2], sign),\n            M : parseIso(match[3], sign),\n            w : parseIso(match[4], sign),\n            d : parseIso(match[5], sign),\n            h : parseIso(match[6], sign),\n            m : parseIso(match[7], sign),\n            s : parseIso(match[8], sign)\n        };\n    } else if (duration == null) {// checks for null or undefined\n        duration = {};\n    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n        duration = {};\n        duration.ms = diffRes.milliseconds;\n        duration.M = diffRes.months;\n    }\n\n    ret = new Duration(duration);\n\n    if (isDuration(input) && hasOwnProp(input, '_locale')) {\n        ret._locale = input._locale;\n    }\n\n    return ret;\n}\n\ncreateDuration.fn = Duration.prototype;\n\nfunction parseIso (inp, sign) {\n    // We'd normally use ~~inp for this, but unfortunately it also\n    // converts floats to ints.\n    // inp may be undefined, so careful calling replace on it.\n    var res = inp && parseFloat(inp.replace(',', '.'));\n    // apply sign while we're at it\n    return (isNaN(res) ? 0 : res) * sign;\n}\n\nfunction positiveMomentsDifference(base, other) {\n    var res = {milliseconds: 0, months: 0};\n\n    res.months = other.month() - base.month() +\n        (other.year() - base.year()) * 12;\n    if (base.clone().add(res.months, 'M').isAfter(other)) {\n        --res.months;\n    }\n\n    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n    return res;\n}\n\nfunction momentsDifference(base, other) {\n    var res;\n    if (!(base.isValid() && other.isValid())) {\n        return {milliseconds: 0, months: 0};\n    }\n\n    other = cloneWithOffset(other, base);\n    if (base.isBefore(other)) {\n        res = positiveMomentsDifference(base, other);\n    } else {\n        res = positiveMomentsDifference(other, base);\n        res.milliseconds = -res.milliseconds;\n        res.months = -res.months;\n    }\n\n    return res;\n}\n","import { get, set } from './get-set';\nimport { setMonth } from '../units/month';\nimport { createDuration } from '../duration/create';\nimport { deprecateSimple } from '../utils/deprecate';\nimport { hooks } from '../utils/hooks';\nimport absRound from '../utils/abs-round';\n\n\n// TODO: remove 'name' arg after deprecation is removed\nfunction createAdder(direction, name) {\n    return function (val, period) {\n        var dur, tmp;\n        //invert the arguments, but complain about it\n        if (period !== null && !isNaN(+period)) {\n            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n            tmp = val; val = period; period = tmp;\n        }\n\n        val = typeof val === 'string' ? +val : val;\n        dur = createDuration(val, period);\n        addSubtract(this, dur, direction);\n        return this;\n    };\n}\n\nexport function addSubtract (mom, duration, isAdding, updateOffset) {\n    var milliseconds = duration._milliseconds,\n        days = absRound(duration._days),\n        months = absRound(duration._months);\n\n    if (!mom.isValid()) {\n        // No op\n        return;\n    }\n\n    updateOffset = updateOffset == null ? true : updateOffset;\n\n    if (milliseconds) {\n        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n    }\n    if (days) {\n        set(mom, 'Date', get(mom, 'Date') + days * isAdding);\n    }\n    if (months) {\n        setMonth(mom, get(mom, 'Month') + months * isAdding);\n    }\n    if (updateOffset) {\n        hooks.updateOffset(mom, days || months);\n    }\n}\n\nexport var add      = createAdder(1, 'add');\nexport var subtract = createAdder(-1, 'subtract');\n\n","import { createLocal } from '../create/local';\nimport { cloneWithOffset } from '../units/offset';\nimport isFunction from '../utils/is-function';\nimport { hooks } from '../utils/hooks';\n\nexport function getCalendarFormat(myMoment, now) {\n    var diff = myMoment.diff(now, 'days', true);\n    return diff < -6 ? 'sameElse' :\n            diff < -1 ? 'lastWeek' :\n            diff < 0 ? 'lastDay' :\n            diff < 1 ? 'sameDay' :\n            diff < 2 ? 'nextDay' :\n            diff < 7 ? 'nextWeek' : 'sameElse';\n}\n\nexport function calendar (time, formats) {\n    // We want to compare the start of today, vs this.\n    // Getting start-of-today depends on whether we're local/utc/offset or not.\n    var now = time || createLocal(),\n        sod = cloneWithOffset(now, this).startOf('day'),\n        format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n}\n","import { Moment } from './constructor';\n\nexport function clone () {\n    return new Moment(this);\n}\n","import { isMoment } from './constructor';\nimport { normalizeUnits } from '../units/aliases';\nimport { createLocal } from '../create/local';\nimport isUndefined from '../utils/is-undefined';\n\nexport function isAfter (input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input);\n    if (!(this.isValid() && localInput.isValid())) {\n        return false;\n    }\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n    if (units === 'millisecond') {\n        return this.valueOf() > localInput.valueOf();\n    } else {\n        return localInput.valueOf() < this.clone().startOf(units).valueOf();\n    }\n}\n\nexport function isBefore (input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input);\n    if (!(this.isValid() && localInput.isValid())) {\n        return false;\n    }\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n    if (units === 'millisecond') {\n        return this.valueOf() < localInput.valueOf();\n    } else {\n        return this.clone().endOf(units).valueOf() < localInput.valueOf();\n    }\n}\n\nexport function isBetween (from, to, units, inclusivity) {\n    inclusivity = inclusivity || '()';\n    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n}\n\nexport function isSame (input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input),\n        inputMs;\n    if (!(this.isValid() && localInput.isValid())) {\n        return false;\n    }\n    units = normalizeUnits(units || 'millisecond');\n    if (units === 'millisecond') {\n        return this.valueOf() === localInput.valueOf();\n    } else {\n        inputMs = localInput.valueOf();\n        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n    }\n}\n\nexport function isSameOrAfter (input, units) {\n    return this.isSame(input, units) || this.isAfter(input,units);\n}\n\nexport function isSameOrBefore (input, units) {\n    return this.isSame(input, units) || this.isBefore(input,units);\n}\n","import absFloor from '../utils/abs-floor';\nimport { cloneWithOffset } from '../units/offset';\nimport { normalizeUnits } from '../units/aliases';\n\nexport function diff (input, units, asFloat) {\n    var that,\n        zoneDelta,\n        delta, output;\n\n    if (!this.isValid()) {\n        return NaN;\n    }\n\n    that = cloneWithOffset(input, this);\n\n    if (!that.isValid()) {\n        return NaN;\n    }\n\n    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n    units = normalizeUnits(units);\n\n    if (units === 'year' || units === 'month' || units === 'quarter') {\n        output = monthDiff(this, that);\n        if (units === 'quarter') {\n            output = output / 3;\n        } else if (units === 'year') {\n            output = output / 12;\n        }\n    } else {\n        delta = this - that;\n        output = units === 'second' ? delta / 1e3 : // 1000\n            units === 'minute' ? delta / 6e4 : // 1000 * 60\n            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n            delta;\n    }\n    return asFloat ? output : absFloor(output);\n}\n\nfunction monthDiff (a, b) {\n    // difference in months\n    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n        // b is in (anchor - 1 month, anchor + 1 month)\n        anchor = a.clone().add(wholeMonthDiff, 'months'),\n        anchor2, adjust;\n\n    if (b - anchor < 0) {\n        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n        // linear across the month\n        adjust = (b - anchor) / (anchor - anchor2);\n    } else {\n        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n        // linear across the month\n        adjust = (b - anchor) / (anchor2 - anchor);\n    }\n\n    //check for negative zero, return zero if negative zero\n    return -(wholeMonthDiff + adjust) || 0;\n}\n","import { formatMoment } from '../format/format';\nimport { hooks } from '../utils/hooks';\nimport isFunction from '../utils/is-function';\n\nhooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\nhooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\nexport function toString () {\n    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n}\n\nexport function toISOString () {\n    var m = this.clone().utc();\n    if (0 < m.year() && m.year() <= 9999) {\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            return this.toDate().toISOString();\n        } else {\n            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    } else {\n        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n    }\n}\n\n/**\n * Return a human readable representation of a moment that can\n * also be evaluated to get a new moment which is the same\n *\n * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n */\nexport function inspect () {\n    if (!this.isValid()) {\n        return 'moment.invalid(/* ' + this._i + ' */)';\n    }\n    var func = 'moment';\n    var zone = '';\n    if (!this.isLocal()) {\n        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n        zone = 'Z';\n    }\n    var prefix = '[' + func + '(\"]';\n    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n    var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n    var suffix = zone + '[\")]';\n\n    return this.format(prefix + year + datetime + suffix);\n}\n\nexport function format (inputString) {\n    if (!inputString) {\n        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n    }\n    var output = formatMoment(this, inputString);\n    return this.localeData().postformat(output);\n}\n","import { createDuration } from '../duration/create';\nimport { createLocal } from '../create/local';\nimport { isMoment } from '../moment/constructor';\n\nexport function from (time, withoutSuffix) {\n    if (this.isValid() &&\n            ((isMoment(time) && time.isValid()) ||\n             createLocal(time).isValid())) {\n        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n    } else {\n        return this.localeData().invalidDate();\n    }\n}\n\nexport function fromNow (withoutSuffix) {\n    return this.from(createLocal(), withoutSuffix);\n}\n","import { createDuration } from '../duration/create';\nimport { createLocal } from '../create/local';\nimport { isMoment } from '../moment/constructor';\n\nexport function to (time, withoutSuffix) {\n    if (this.isValid() &&\n            ((isMoment(time) && time.isValid()) ||\n             createLocal(time).isValid())) {\n        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n    } else {\n        return this.localeData().invalidDate();\n    }\n}\n\nexport function toNow (withoutSuffix) {\n    return this.to(createLocal(), withoutSuffix);\n}\n","import { getLocale } from '../locale/locales';\nimport { deprecate } from '../utils/deprecate';\n\n// If passed a locale key, it will set the locale for this\n// instance.  Otherwise, it will return the locale configuration\n// variables for this instance.\nexport function locale (key) {\n    var newLocaleData;\n\n    if (key === undefined) {\n        return this._locale._abbr;\n    } else {\n        newLocaleData = getLocale(key);\n        if (newLocaleData != null) {\n            this._locale = newLocaleData;\n        }\n        return this;\n    }\n}\n\nexport var lang = deprecate(\n    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n    function (key) {\n        if (key === undefined) {\n            return this.localeData();\n        } else {\n            return this.locale(key);\n        }\n    }\n);\n\nexport function localeData () {\n    return this._locale;\n}\n","import { normalizeUnits } from '../units/aliases';\n\nexport function startOf (units) {\n    units = normalizeUnits(units);\n    // the following switch intentionally omits break keywords\n    // to utilize falling through the cases.\n    switch (units) {\n        case 'year':\n            this.month(0);\n            /* falls through */\n        case 'quarter':\n        case 'month':\n            this.date(1);\n            /* falls through */\n        case 'week':\n        case 'isoWeek':\n        case 'day':\n        case 'date':\n            this.hours(0);\n            /* falls through */\n        case 'hour':\n            this.minutes(0);\n            /* falls through */\n        case 'minute':\n            this.seconds(0);\n            /* falls through */\n        case 'second':\n            this.milliseconds(0);\n    }\n\n    // weeks are a special case\n    if (units === 'week') {\n        this.weekday(0);\n    }\n    if (units === 'isoWeek') {\n        this.isoWeekday(1);\n    }\n\n    // quarters are also special\n    if (units === 'quarter') {\n        this.month(Math.floor(this.month() / 3) * 3);\n    }\n\n    return this;\n}\n\nexport function endOf (units) {\n    units = normalizeUnits(units);\n    if (units === undefined || units === 'millisecond') {\n        return this;\n    }\n\n    // 'date' is an alias for 'day', so it should be considered as such.\n    if (units === 'date') {\n        units = 'day';\n    }\n\n    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n}\n","export function valueOf () {\n    return this._d.valueOf() - ((this._offset || 0) * 60000);\n}\n\nexport function unix () {\n    return Math.floor(this.valueOf() / 1000);\n}\n\nexport function toDate () {\n    return new Date(this.valueOf());\n}\n\nexport function toArray () {\n    var m = this;\n    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n}\n\nexport function toObject () {\n    var m = this;\n    return {\n        years: m.year(),\n        months: m.month(),\n        date: m.date(),\n        hours: m.hours(),\n        minutes: m.minutes(),\n        seconds: m.seconds(),\n        milliseconds: m.milliseconds()\n    };\n}\n\nexport function toJSON () {\n    // new Date(NaN).toJSON() === null\n    return this.isValid() ? this.toISOString() : null;\n}\n","import { isValid as _isValid } from '../create/valid';\nimport extend from '../utils/extend';\nimport getParsingFlags from '../create/parsing-flags';\n\nexport function isValid () {\n    return _isValid(this);\n}\n\nexport function parsingFlags () {\n    return extend({}, getParsingFlags(this));\n}\n\nexport function invalidAt () {\n    return getParsingFlags(this).overflow;\n}\n","export function creationData() {\n    return {\n        input: this._i,\n        format: this._f,\n        locale: this._locale,\n        isUTC: this._isUTC,\n        strict: this._strict\n    };\n}\n","import { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match1to4, match1to6, match2, match4, match6, matchSigned } from '../parse/regex';\nimport { addWeekParseToken } from '../parse/token';\nimport { weekOfYear, weeksInYear, dayOfYearFromWeeks } from './week-calendar-utils';\nimport toInt from '../utils/to-int';\nimport { hooks } from '../utils/hooks';\nimport { createLocal } from '../create/local';\nimport { createUTCDate } from '../create/date-from-array';\n\n// FORMATTING\n\naddFormatToken(0, ['gg', 2], 0, function () {\n    return this.weekYear() % 100;\n});\n\naddFormatToken(0, ['GG', 2], 0, function () {\n    return this.isoWeekYear() % 100;\n});\n\nfunction addWeekYearFormatToken (token, getter) {\n    addFormatToken(0, [token, token.length], 0, getter);\n}\n\naddWeekYearFormatToken('gggg',     'weekYear');\naddWeekYearFormatToken('ggggg',    'weekYear');\naddWeekYearFormatToken('GGGG',  'isoWeekYear');\naddWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n// ALIASES\n\naddUnitAlias('weekYear', 'gg');\naddUnitAlias('isoWeekYear', 'GG');\n\n// PRIORITY\n\naddUnitPriority('weekYear', 1);\naddUnitPriority('isoWeekYear', 1);\n\n\n// PARSING\n\naddRegexToken('G',      matchSigned);\naddRegexToken('g',      matchSigned);\naddRegexToken('GG',     match1to2, match2);\naddRegexToken('gg',     match1to2, match2);\naddRegexToken('GGGG',   match1to4, match4);\naddRegexToken('gggg',   match1to4, match4);\naddRegexToken('GGGGG',  match1to6, match6);\naddRegexToken('ggggg',  match1to6, match6);\n\naddWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n    week[token.substr(0, 2)] = toInt(input);\n});\n\naddWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n    week[token] = hooks.parseTwoDigitYear(input);\n});\n\n// MOMENTS\n\nexport function getSetWeekYear (input) {\n    return getSetWeekYearHelper.call(this,\n            input,\n            this.week(),\n            this.weekday(),\n            this.localeData()._week.dow,\n            this.localeData()._week.doy);\n}\n\nexport function getSetISOWeekYear (input) {\n    return getSetWeekYearHelper.call(this,\n            input, this.isoWeek(), this.isoWeekday(), 1, 4);\n}\n\nexport function getISOWeeksInYear () {\n    return weeksInYear(this.year(), 1, 4);\n}\n\nexport function getWeeksInYear () {\n    var weekInfo = this.localeData()._week;\n    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n}\n\nfunction getSetWeekYearHelper(input, week, weekday, dow, doy) {\n    var weeksTarget;\n    if (input == null) {\n        return weekOfYear(this, dow, doy).year;\n    } else {\n        weeksTarget = weeksInYear(input, dow, doy);\n        if (week > weeksTarget) {\n            week = weeksTarget;\n        }\n        return setWeekAll.call(this, input, week, weekday, dow, doy);\n    }\n}\n\nfunction setWeekAll(weekYear, week, weekday, dow, doy) {\n    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n    this.year(date.getUTCFullYear());\n    this.month(date.getUTCMonth());\n    this.date(date.getUTCDate());\n    return this;\n}\n","import { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1 } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { MONTH } from './constants';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('Q', 0, 'Qo', 'quarter');\n\n// ALIASES\n\naddUnitAlias('quarter', 'Q');\n\n// PRIORITY\n\naddUnitPriority('quarter', 7);\n\n// PARSING\n\naddRegexToken('Q', match1);\naddParseToken('Q', function (input, array) {\n    array[MONTH] = (toInt(input) - 1) * 3;\n});\n\n// MOMENTS\n\nexport function getSetQuarter (input) {\n    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n}\n","import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match2 } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { DATE } from './constants';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('D', ['DD', 2], 'Do', 'date');\n\n// ALIASES\n\naddUnitAlias('date', 'D');\n\n// PRIOROITY\naddUnitPriority('date', 9);\n\n// PARSING\n\naddRegexToken('D',  match1to2);\naddRegexToken('DD', match1to2, match2);\naddRegexToken('Do', function (isStrict, locale) {\n    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n});\n\naddParseToken(['D', 'DD'], DATE);\naddParseToken('Do', function (input, array) {\n    array[DATE] = toInt(input.match(match1to2)[0], 10);\n});\n\n// MOMENTS\n\nexport var getSetDayOfMonth = makeGetSet('Date', true);\n","import { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match3, match1to3 } from '../parse/regex';\nimport { daysInYear } from './year';\nimport { createUTCDate } from '../create/date-from-array';\nimport { addParseToken } from '../parse/token';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n// ALIASES\n\naddUnitAlias('dayOfYear', 'DDD');\n\n// PRIORITY\naddUnitPriority('dayOfYear', 4);\n\n// PARSING\n\naddRegexToken('DDD',  match1to3);\naddRegexToken('DDDD', match3);\naddParseToken(['DDD', 'DDDD'], function (input, array, config) {\n    config._dayOfYear = toInt(input);\n});\n\n// HELPERS\n\n// MOMENTS\n\nexport function getSetDayOfYear (input) {\n    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n}\n","import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match2 } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { MINUTE } from './constants';\n\n// FORMATTING\n\naddFormatToken('m', ['mm', 2], 0, 'minute');\n\n// ALIASES\n\naddUnitAlias('minute', 'm');\n\n// PRIORITY\n\naddUnitPriority('minute', 14);\n\n// PARSING\n\naddRegexToken('m',  match1to2);\naddRegexToken('mm', match1to2, match2);\naddParseToken(['m', 'mm'], MINUTE);\n\n// MOMENTS\n\nexport var getSetMinute = makeGetSet('Minutes', false);\n","import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1to2, match2 } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { SECOND } from './constants';\n\n// FORMATTING\n\naddFormatToken('s', ['ss', 2], 0, 'second');\n\n// ALIASES\n\naddUnitAlias('second', 's');\n\n// PRIORITY\n\naddUnitPriority('second', 15);\n\n// PARSING\n\naddRegexToken('s',  match1to2);\naddRegexToken('ss', match1to2, match2);\naddParseToken(['s', 'ss'], SECOND);\n\n// MOMENTS\n\nexport var getSetSecond = makeGetSet('Seconds', false);\n","import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1, match2, match3, match1to3, matchUnsigned } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { MILLISECOND } from './constants';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('S', 0, 0, function () {\n    return ~~(this.millisecond() / 100);\n});\n\naddFormatToken(0, ['SS', 2], 0, function () {\n    return ~~(this.millisecond() / 10);\n});\n\naddFormatToken(0, ['SSS', 3], 0, 'millisecond');\naddFormatToken(0, ['SSSS', 4], 0, function () {\n    return this.millisecond() * 10;\n});\naddFormatToken(0, ['SSSSS', 5], 0, function () {\n    return this.millisecond() * 100;\n});\naddFormatToken(0, ['SSSSSS', 6], 0, function () {\n    return this.millisecond() * 1000;\n});\naddFormatToken(0, ['SSSSSSS', 7], 0, function () {\n    return this.millisecond() * 10000;\n});\naddFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n    return this.millisecond() * 100000;\n});\naddFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n    return this.millisecond() * 1000000;\n});\n\n\n// ALIASES\n\naddUnitAlias('millisecond', 'ms');\n\n// PRIORITY\n\naddUnitPriority('millisecond', 16);\n\n// PARSING\n\naddRegexToken('S',    match1to3, match1);\naddRegexToken('SS',   match1to3, match2);\naddRegexToken('SSS',  match1to3, match3);\n\nvar token;\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {\n    addRegexToken(token, matchUnsigned);\n}\n\nfunction parseMs(input, array) {\n    array[MILLISECOND] = toInt(('0.' + input) * 1000);\n}\n\nfor (token = 'S'; token.length <= 9; token += 'S') {\n    addParseToken(token, parseMs);\n}\n// MOMENTS\n\nexport var getSetMillisecond = makeGetSet('Milliseconds', false);\n","import { addFormatToken } from '../format/format';\n\n// FORMATTING\n\naddFormatToken('z',  0, 0, 'zoneAbbr');\naddFormatToken('zz', 0, 0, 'zoneName');\n\n// MOMENTS\n\nexport function getZoneAbbr () {\n    return this._isUTC ? 'UTC' : '';\n}\n\nexport function getZoneName () {\n    return this._isUTC ? 'Coordinated Universal Time' : '';\n}\n","import { Moment } from './constructor';\n\nvar proto = Moment.prototype;\n\nimport { add, subtract } from './add-subtract';\nimport { calendar, getCalendarFormat } from './calendar';\nimport { clone } from './clone';\nimport { isBefore, isBetween, isSame, isAfter, isSameOrAfter, isSameOrBefore } from './compare';\nimport { diff } from './diff';\nimport { format, toString, toISOString, inspect } from './format';\nimport { from, fromNow } from './from';\nimport { to, toNow } from './to';\nimport { stringGet, stringSet } from './get-set';\nimport { locale, localeData, lang } from './locale';\nimport { prototypeMin, prototypeMax } from './min-max';\nimport { startOf, endOf } from './start-end-of';\nimport { valueOf, toDate, toArray, toObject, toJSON, unix } from './to-type';\nimport { isValid, parsingFlags, invalidAt } from './valid';\nimport { creationData } from './creation-data';\n\nproto.add               = add;\nproto.calendar          = calendar;\nproto.clone             = clone;\nproto.diff              = diff;\nproto.endOf             = endOf;\nproto.format            = format;\nproto.from              = from;\nproto.fromNow           = fromNow;\nproto.to                = to;\nproto.toNow             = toNow;\nproto.get               = stringGet;\nproto.invalidAt         = invalidAt;\nproto.isAfter           = isAfter;\nproto.isBefore          = isBefore;\nproto.isBetween         = isBetween;\nproto.isSame            = isSame;\nproto.isSameOrAfter     = isSameOrAfter;\nproto.isSameOrBefore    = isSameOrBefore;\nproto.isValid           = isValid;\nproto.lang              = lang;\nproto.locale            = locale;\nproto.localeData        = localeData;\nproto.max               = prototypeMax;\nproto.min               = prototypeMin;\nproto.parsingFlags      = parsingFlags;\nproto.set               = stringSet;\nproto.startOf           = startOf;\nproto.subtract          = subtract;\nproto.toArray           = toArray;\nproto.toObject          = toObject;\nproto.toDate            = toDate;\nproto.toISOString       = toISOString;\nproto.inspect           = inspect;\nproto.toJSON            = toJSON;\nproto.toString          = toString;\nproto.unix              = unix;\nproto.valueOf           = valueOf;\nproto.creationData      = creationData;\n\n// Year\nimport { getSetYear, getIsLeapYear } from '../units/year';\nproto.year       = getSetYear;\nproto.isLeapYear = getIsLeapYear;\n\n// Week Year\nimport { getSetWeekYear, getSetISOWeekYear, getWeeksInYear, getISOWeeksInYear } from '../units/week-year';\nproto.weekYear    = getSetWeekYear;\nproto.isoWeekYear = getSetISOWeekYear;\n\n// Quarter\nimport { getSetQuarter } from '../units/quarter';\nproto.quarter = proto.quarters = getSetQuarter;\n\n// Month\nimport { getSetMonth, getDaysInMonth } from '../units/month';\nproto.month       = getSetMonth;\nproto.daysInMonth = getDaysInMonth;\n\n// Week\nimport { getSetWeek, getSetISOWeek } from '../units/week';\nproto.week           = proto.weeks        = getSetWeek;\nproto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\nproto.weeksInYear    = getWeeksInYear;\nproto.isoWeeksInYear = getISOWeeksInYear;\n\n// Day\nimport { getSetDayOfMonth } from '../units/day-of-month';\nimport { getSetDayOfWeek, getSetISODayOfWeek, getSetLocaleDayOfWeek } from '../units/day-of-week';\nimport { getSetDayOfYear } from '../units/day-of-year';\nproto.date       = getSetDayOfMonth;\nproto.day        = proto.days             = getSetDayOfWeek;\nproto.weekday    = getSetLocaleDayOfWeek;\nproto.isoWeekday = getSetISODayOfWeek;\nproto.dayOfYear  = getSetDayOfYear;\n\n// Hour\nimport { getSetHour } from '../units/hour';\nproto.hour = proto.hours = getSetHour;\n\n// Minute\nimport { getSetMinute } from '../units/minute';\nproto.minute = proto.minutes = getSetMinute;\n\n// Second\nimport { getSetSecond } from '../units/second';\nproto.second = proto.seconds = getSetSecond;\n\n// Millisecond\nimport { getSetMillisecond } from '../units/millisecond';\nproto.millisecond = proto.milliseconds = getSetMillisecond;\n\n// Offset\nimport {\n    getSetOffset,\n    setOffsetToUTC,\n    setOffsetToLocal,\n    setOffsetToParsedOffset,\n    hasAlignedHourOffset,\n    isDaylightSavingTime,\n    isDaylightSavingTimeShifted,\n    getSetZone,\n    isLocal,\n    isUtcOffset,\n    isUtc\n} from '../units/offset';\nproto.utcOffset            = getSetOffset;\nproto.utc                  = setOffsetToUTC;\nproto.local                = setOffsetToLocal;\nproto.parseZone            = setOffsetToParsedOffset;\nproto.hasAlignedHourOffset = hasAlignedHourOffset;\nproto.isDST                = isDaylightSavingTime;\nproto.isLocal              = isLocal;\nproto.isUtcOffset          = isUtcOffset;\nproto.isUtc                = isUtc;\nproto.isUTC                = isUtc;\n\n// Timezone\nimport { getZoneAbbr, getZoneName } from '../units/timezone';\nproto.zoneAbbr = getZoneAbbr;\nproto.zoneName = getZoneName;\n\n// Deprecations\nimport { deprecate } from '../utils/deprecate';\nproto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\nproto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\nproto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\nproto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\nproto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\nexport default proto;\n","import { createLocal } from '../create/local';\nimport { createUTC } from '../create/utc';\nimport { createInvalid } from '../create/valid';\nimport { isMoment } from './constructor';\nimport { min, max } from './min-max';\nimport { now } from './now';\nimport momentPrototype from './prototype';\n\nfunction createUnix (input) {\n    return createLocal(input * 1000);\n}\n\nfunction createInZone () {\n    return createLocal.apply(null, arguments).parseZone();\n}\n\nexport {\n    now,\n    min,\n    max,\n    isMoment,\n    createUTC,\n    createUnix,\n    createLocal,\n    createInZone,\n    createInvalid,\n    momentPrototype\n};\n","export function preParsePostFormat (string) {\n    return string;\n}\n","import { Locale } from './constructor';\n\nvar proto = Locale.prototype;\n\nimport { calendar } from './calendar';\nimport { longDateFormat } from './formats';\nimport { invalidDate } from './invalid';\nimport { ordinal } from './ordinal';\nimport { preParsePostFormat } from './pre-post-format';\nimport { relativeTime, pastFuture } from './relative';\nimport { set } from './set';\n\nproto.calendar        = calendar;\nproto.longDateFormat  = longDateFormat;\nproto.invalidDate     = invalidDate;\nproto.ordinal         = ordinal;\nproto.preparse        = preParsePostFormat;\nproto.postformat      = preParsePostFormat;\nproto.relativeTime    = relativeTime;\nproto.pastFuture      = pastFuture;\nproto.set             = set;\n\n// Month\nimport {\n    localeMonthsParse,\n    localeMonths,\n    localeMonthsShort,\n    monthsRegex,\n    monthsShortRegex\n} from '../units/month';\n\nproto.months            =        localeMonths;\nproto.monthsShort       =        localeMonthsShort;\nproto.monthsParse       =        localeMonthsParse;\nproto.monthsRegex       = monthsRegex;\nproto.monthsShortRegex  = monthsShortRegex;\n\n// Week\nimport { localeWeek, localeFirstDayOfYear, localeFirstDayOfWeek } from '../units/week';\nproto.week = localeWeek;\nproto.firstDayOfYear = localeFirstDayOfYear;\nproto.firstDayOfWeek = localeFirstDayOfWeek;\n\n// Day of Week\nimport {\n    localeWeekdaysParse,\n    localeWeekdays,\n    localeWeekdaysMin,\n    localeWeekdaysShort,\n\n    weekdaysRegex,\n    weekdaysShortRegex,\n    weekdaysMinRegex\n} from '../units/day-of-week';\n\nproto.weekdays       =        localeWeekdays;\nproto.weekdaysMin    =        localeWeekdaysMin;\nproto.weekdaysShort  =        localeWeekdaysShort;\nproto.weekdaysParse  =        localeWeekdaysParse;\n\nproto.weekdaysRegex       =        weekdaysRegex;\nproto.weekdaysShortRegex  =        weekdaysShortRegex;\nproto.weekdaysMinRegex    =        weekdaysMinRegex;\n\n// Hours\nimport { localeIsPM, localeMeridiem } from '../units/hour';\n\nproto.isPM = localeIsPM;\nproto.meridiem = localeMeridiem;\n","import isNumber from '../utils/is-number';\nimport { getLocale } from './locales';\nimport { createUTC } from '../create/utc';\n\nfunction get (format, index, field, setter) {\n    var locale = getLocale();\n    var utc = createUTC().set(setter, index);\n    return locale[field](utc, format);\n}\n\nfunction listMonthsImpl (format, index, field) {\n    if (isNumber(format)) {\n        index = format;\n        format = undefined;\n    }\n\n    format = format || '';\n\n    if (index != null) {\n        return get(format, index, field, 'month');\n    }\n\n    var i;\n    var out = [];\n    for (i = 0; i < 12; i++) {\n        out[i] = get(format, i, field, 'month');\n    }\n    return out;\n}\n\n// ()\n// (5)\n// (fmt, 5)\n// (fmt)\n// (true)\n// (true, 5)\n// (true, fmt, 5)\n// (true, fmt)\nfunction listWeekdaysImpl (localeSorted, format, index, field) {\n    if (typeof localeSorted === 'boolean') {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n    } else {\n        format = localeSorted;\n        index = format;\n        localeSorted = false;\n\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n    }\n\n    var locale = getLocale(),\n        shift = localeSorted ? locale._week.dow : 0;\n\n    if (index != null) {\n        return get(format, (index + shift) % 7, field, 'day');\n    }\n\n    var i;\n    var out = [];\n    for (i = 0; i < 7; i++) {\n        out[i] = get(format, (i + shift) % 7, field, 'day');\n    }\n    return out;\n}\n\nexport function listMonths (format, index) {\n    return listMonthsImpl(format, index, 'months');\n}\n\nexport function listMonthsShort (format, index) {\n    return listMonthsImpl(format, index, 'monthsShort');\n}\n\nexport function listWeekdays (localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n}\n\nexport function listWeekdaysShort (localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n}\n\nexport function listWeekdaysMin (localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n}\n","import './prototype';\nimport { getSetGlobalLocale } from './locales';\nimport toInt from '../utils/to-int';\n\ngetSetGlobalLocale('en', {\n    ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n    ordinal : function (number) {\n        var b = number % 10,\n            output = (toInt(number % 100 / 10) === 1) ? 'th' :\n            (b === 1) ? 'st' :\n            (b === 2) ? 'nd' :\n            (b === 3) ? 'rd' : 'th';\n        return number + output;\n    }\n});\n","// Side effect imports\nimport './prototype';\n\nimport {\n    getSetGlobalLocale,\n    defineLocale,\n    updateLocale,\n    getLocale,\n    listLocales\n} from './locales';\n\nimport {\n    listMonths,\n    listMonthsShort,\n    listWeekdays,\n    listWeekdaysShort,\n    listWeekdaysMin\n} from './lists';\n\nexport {\n    getSetGlobalLocale,\n    defineLocale,\n    updateLocale,\n    getLocale,\n    listLocales,\n    listMonths,\n    listMonthsShort,\n    listWeekdays,\n    listWeekdaysShort,\n    listWeekdaysMin\n};\n\nimport { deprecate } from '../utils/deprecate';\nimport { hooks } from '../utils/hooks';\n\nhooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\nhooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\nimport './en';\n","var mathAbs = Math.abs;\n\nexport function abs () {\n    var data           = this._data;\n\n    this._milliseconds = mathAbs(this._milliseconds);\n    this._days         = mathAbs(this._days);\n    this._months       = mathAbs(this._months);\n\n    data.milliseconds  = mathAbs(data.milliseconds);\n    data.seconds       = mathAbs(data.seconds);\n    data.minutes       = mathAbs(data.minutes);\n    data.hours         = mathAbs(data.hours);\n    data.months        = mathAbs(data.months);\n    data.years         = mathAbs(data.years);\n\n    return this;\n}\n","import { createDuration } from './create';\n\nfunction addSubtract (duration, input, value, direction) {\n    var other = createDuration(input, value);\n\n    duration._milliseconds += direction * other._milliseconds;\n    duration._days         += direction * other._days;\n    duration._months       += direction * other._months;\n\n    return duration._bubble();\n}\n\n// supports only 2.0-style add(1, 's') or add(duration)\nexport function add (input, value) {\n    return addSubtract(this, input, value, 1);\n}\n\n// supports only 2.0-style subtract(1, 's') or subtract(duration)\nexport function subtract (input, value) {\n    return addSubtract(this, input, value, -1);\n}\n","export default function absCeil (number) {\n    if (number < 0) {\n        return Math.floor(number);\n    } else {\n        return Math.ceil(number);\n    }\n}\n","import absFloor from '../utils/abs-floor';\nimport absCeil from '../utils/abs-ceil';\nimport { createUTCDate } from '../create/date-from-array';\n\nexport function bubble () {\n    var milliseconds = this._milliseconds;\n    var days         = this._days;\n    var months       = this._months;\n    var data         = this._data;\n    var seconds, minutes, hours, years, monthsFromDays;\n\n    // if we have a mix of positive and negative values, bubble down first\n    // check: https://github.com/moment/moment/issues/2166\n    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n            (milliseconds <= 0 && days <= 0 && months <= 0))) {\n        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n        days = 0;\n        months = 0;\n    }\n\n    // The following code bubbles up values, see the tests for\n    // examples of what that means.\n    data.milliseconds = milliseconds % 1000;\n\n    seconds           = absFloor(milliseconds / 1000);\n    data.seconds      = seconds % 60;\n\n    minutes           = absFloor(seconds / 60);\n    data.minutes      = minutes % 60;\n\n    hours             = absFloor(minutes / 60);\n    data.hours        = hours % 24;\n\n    days += absFloor(hours / 24);\n\n    // convert days to months\n    monthsFromDays = absFloor(daysToMonths(days));\n    months += monthsFromDays;\n    days -= absCeil(monthsToDays(monthsFromDays));\n\n    // 12 months -> 1 year\n    years = absFloor(months / 12);\n    months %= 12;\n\n    data.days   = days;\n    data.months = months;\n    data.years  = years;\n\n    return this;\n}\n\nexport function daysToMonths (days) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    // 400 years have 12 months === 4800\n    return days * 4800 / 146097;\n}\n\nexport function monthsToDays (months) {\n    // the reverse of daysToMonths\n    return months * 146097 / 4800;\n}\n","import { daysToMonths, monthsToDays } from './bubble';\nimport { normalizeUnits } from '../units/aliases';\nimport toInt from '../utils/to-int';\n\nexport function as (units) {\n    var days;\n    var months;\n    var milliseconds = this._milliseconds;\n\n    units = normalizeUnits(units);\n\n    if (units === 'month' || units === 'year') {\n        days   = this._days   + milliseconds / 864e5;\n        months = this._months + daysToMonths(days);\n        return units === 'month' ? months : months / 12;\n    } else {\n        // handle milliseconds separately because of floating point math errors (issue #1867)\n        days = this._days + Math.round(monthsToDays(this._months));\n        switch (units) {\n            case 'week'   : return days / 7     + milliseconds / 6048e5;\n            case 'day'    : return days         + milliseconds / 864e5;\n            case 'hour'   : return days * 24    + milliseconds / 36e5;\n            case 'minute' : return days * 1440  + milliseconds / 6e4;\n            case 'second' : return days * 86400 + milliseconds / 1000;\n            // Math.floor prevents floating point math errors here\n            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n            default: throw new Error('Unknown unit ' + units);\n        }\n    }\n}\n\n// TODO: Use this.as('ms')?\nexport function valueOf () {\n    return (\n        this._milliseconds +\n        this._days * 864e5 +\n        (this._months % 12) * 2592e6 +\n        toInt(this._months / 12) * 31536e6\n    );\n}\n\nfunction makeAs (alias) {\n    return function () {\n        return this.as(alias);\n    };\n}\n\nexport var asMilliseconds = makeAs('ms');\nexport var asSeconds      = makeAs('s');\nexport var asMinutes      = makeAs('m');\nexport var asHours        = makeAs('h');\nexport var asDays         = makeAs('d');\nexport var asWeeks        = makeAs('w');\nexport var asMonths       = makeAs('M');\nexport var asYears        = makeAs('y');\n","import { normalizeUnits } from '../units/aliases';\nimport absFloor from '../utils/abs-floor';\n\nexport function get (units) {\n    units = normalizeUnits(units);\n    return this[units + 's']();\n}\n\nfunction makeGetter(name) {\n    return function () {\n        return this._data[name];\n    };\n}\n\nexport var milliseconds = makeGetter('milliseconds');\nexport var seconds      = makeGetter('seconds');\nexport var minutes      = makeGetter('minutes');\nexport var hours        = makeGetter('hours');\nexport var days         = makeGetter('days');\nexport var months       = makeGetter('months');\nexport var years        = makeGetter('years');\n\nexport function weeks () {\n    return absFloor(this.days() / 7);\n}\n","import { createDuration } from './create';\n\nvar round = Math.round;\nvar thresholds = {\n    s: 45,  // seconds to minute\n    m: 45,  // minutes to hour\n    h: 22,  // hours to day\n    d: 26,  // days to month\n    M: 11   // months to year\n};\n\n// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\nfunction substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n}\n\nfunction relativeTime (posNegDuration, withoutSuffix, locale) {\n    var duration = createDuration(posNegDuration).abs();\n    var seconds  = round(duration.as('s'));\n    var minutes  = round(duration.as('m'));\n    var hours    = round(duration.as('h'));\n    var days     = round(duration.as('d'));\n    var months   = round(duration.as('M'));\n    var years    = round(duration.as('y'));\n\n    var a = seconds < thresholds.s && ['s', seconds]  ||\n            minutes <= 1           && ['m']           ||\n            minutes < thresholds.m && ['mm', minutes] ||\n            hours   <= 1           && ['h']           ||\n            hours   < thresholds.h && ['hh', hours]   ||\n            days    <= 1           && ['d']           ||\n            days    < thresholds.d && ['dd', days]    ||\n            months  <= 1           && ['M']           ||\n            months  < thresholds.M && ['MM', months]  ||\n            years   <= 1           && ['y']           || ['yy', years];\n\n    a[2] = withoutSuffix;\n    a[3] = +posNegDuration > 0;\n    a[4] = locale;\n    return substituteTimeAgo.apply(null, a);\n}\n\n// This function allows you to set the rounding function for relative time strings\nexport function getSetRelativeTimeRounding (roundingFunction) {\n    if (roundingFunction === undefined) {\n        return round;\n    }\n    if (typeof(roundingFunction) === 'function') {\n        round = roundingFunction;\n        return true;\n    }\n    return false;\n}\n\n// This function allows you to set a threshold for relative time strings\nexport function getSetRelativeTimeThreshold (threshold, limit) {\n    if (thresholds[threshold] === undefined) {\n        return false;\n    }\n    if (limit === undefined) {\n        return thresholds[threshold];\n    }\n    thresholds[threshold] = limit;\n    return true;\n}\n\nexport function humanize (withSuffix) {\n    var locale = this.localeData();\n    var output = relativeTime(this, !withSuffix, locale);\n\n    if (withSuffix) {\n        output = locale.pastFuture(+this, output);\n    }\n\n    return locale.postformat(output);\n}\n","import absFloor from '../utils/abs-floor';\nvar abs = Math.abs;\n\nexport function toISOString() {\n    // for ISO strings we do not use the normal bubbling rules:\n    //  * milliseconds bubble up until they become hours\n    //  * days do not bubble at all\n    //  * months bubble up until they become years\n    // This is because there is no context-free conversion between hours and days\n    // (think of clock changes)\n    // and also not between days and months (28-31 days per month)\n    var seconds = abs(this._milliseconds) / 1000;\n    var days         = abs(this._days);\n    var months       = abs(this._months);\n    var minutes, hours, years;\n\n    // 3600 seconds -> 60 minutes -> 1 hour\n    minutes           = absFloor(seconds / 60);\n    hours             = absFloor(minutes / 60);\n    seconds %= 60;\n    minutes %= 60;\n\n    // 12 months -> 1 year\n    years  = absFloor(months / 12);\n    months %= 12;\n\n\n    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n    var Y = years;\n    var M = months;\n    var D = days;\n    var h = hours;\n    var m = minutes;\n    var s = seconds;\n    var total = this.asSeconds();\n\n    if (!total) {\n        // this is the same as C#'s (Noda) and python (isodate)...\n        // but not other JS (goog.date)\n        return 'P0D';\n    }\n\n    return (total < 0 ? '-' : '') +\n        'P' +\n        (Y ? Y + 'Y' : '') +\n        (M ? M + 'M' : '') +\n        (D ? D + 'D' : '') +\n        ((h || m || s) ? 'T' : '') +\n        (h ? h + 'H' : '') +\n        (m ? m + 'M' : '') +\n        (s ? s + 'S' : '');\n}\n","import { Duration } from './constructor';\n\nvar proto = Duration.prototype;\n\nimport { abs } from './abs';\nimport { add, subtract } from './add-subtract';\nimport { as, asMilliseconds, asSeconds, asMinutes, asHours, asDays, asWeeks, asMonths, asYears, valueOf } from './as';\nimport { bubble } from './bubble';\nimport { get, milliseconds, seconds, minutes, hours, days, months, years, weeks } from './get';\nimport { humanize } from './humanize';\nimport { toISOString } from './iso-string';\nimport { lang, locale, localeData } from '../moment/locale';\n\nproto.abs            = abs;\nproto.add            = add;\nproto.subtract       = subtract;\nproto.as             = as;\nproto.asMilliseconds = asMilliseconds;\nproto.asSeconds      = asSeconds;\nproto.asMinutes      = asMinutes;\nproto.asHours        = asHours;\nproto.asDays         = asDays;\nproto.asWeeks        = asWeeks;\nproto.asMonths       = asMonths;\nproto.asYears        = asYears;\nproto.valueOf        = valueOf;\nproto._bubble        = bubble;\nproto.get            = get;\nproto.milliseconds   = milliseconds;\nproto.seconds        = seconds;\nproto.minutes        = minutes;\nproto.hours          = hours;\nproto.days           = days;\nproto.weeks          = weeks;\nproto.months         = months;\nproto.years          = years;\nproto.humanize       = humanize;\nproto.toISOString    = toISOString;\nproto.toString       = toISOString;\nproto.toJSON         = toISOString;\nproto.locale         = locale;\nproto.localeData     = localeData;\n\n// Deprecations\nimport { deprecate } from '../utils/deprecate';\n\nproto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString);\nproto.lang = lang;\n","// Side effect imports\nimport './prototype';\n\nimport { createDuration } from './create';\nimport { isDuration } from './constructor';\nimport {\n    getSetRelativeTimeRounding,\n    getSetRelativeTimeThreshold\n} from './humanize';\n\nexport {\n    createDuration,\n    isDuration,\n    getSetRelativeTimeRounding,\n    getSetRelativeTimeThreshold\n};\n","import { addFormatToken } from '../format/format';\nimport { addRegexToken, matchTimestamp, matchSigned } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('X', 0, 0, 'unix');\naddFormatToken('x', 0, 0, 'valueOf');\n\n// PARSING\n\naddRegexToken('x', matchSigned);\naddRegexToken('X', matchTimestamp);\naddParseToken('X', function (input, array, config) {\n    config._d = new Date(parseFloat(input, 10) * 1000);\n});\naddParseToken('x', function (input, array, config) {\n    config._d = new Date(toInt(input));\n});\n","// Side effect imports\nimport './day-of-month';\nimport './day-of-week';\nimport './day-of-year';\nimport './hour';\nimport './millisecond';\nimport './minute';\nimport './month';\nimport './offset';\nimport './quarter';\nimport './second';\nimport './timestamp';\nimport './timezone';\nimport './week-year';\nimport './week';\nimport './year';\n\nimport { normalizeUnits } from './aliases';\n\nexport { normalizeUnits };\n","//! moment.js\n//! version : 2.17.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\nimport { hooks as moment, setHookCallback } from './lib/utils/hooks';\n\nmoment.version = '2.17.0';\n\nimport {\n    min,\n    max,\n    now,\n    isMoment,\n    momentPrototype as fn,\n    createUTC       as utc,\n    createUnix      as unix,\n    createLocal     as local,\n    createInvalid   as invalid,\n    createInZone    as parseZone\n} from './lib/moment/moment';\n\nimport {\n    getCalendarFormat\n} from './lib/moment/calendar';\n\nimport {\n    defineLocale,\n    updateLocale,\n    getSetGlobalLocale as locale,\n    getLocale          as localeData,\n    listLocales        as locales,\n    listMonths         as months,\n    listMonthsShort    as monthsShort,\n    listWeekdays       as weekdays,\n    listWeekdaysMin    as weekdaysMin,\n    listWeekdaysShort  as weekdaysShort\n} from './lib/locale/locale';\n\nimport {\n    isDuration,\n    createDuration as duration,\n    getSetRelativeTimeRounding as relativeTimeRounding,\n    getSetRelativeTimeThreshold as relativeTimeThreshold\n} from './lib/duration/duration';\n\nimport { normalizeUnits } from './lib/units/units';\n\nimport isDate from './lib/utils/is-date';\n\nsetHookCallback(local);\n\nmoment.fn                    = fn;\nmoment.min                   = min;\nmoment.max                   = max;\nmoment.now                   = now;\nmoment.utc                   = utc;\nmoment.unix                  = unix;\nmoment.months                = months;\nmoment.isDate                = isDate;\nmoment.locale                = locale;\nmoment.invalid               = invalid;\nmoment.duration              = duration;\nmoment.isMoment              = isMoment;\nmoment.weekdays              = weekdays;\nmoment.parseZone             = parseZone;\nmoment.localeData            = localeData;\nmoment.isDuration            = isDuration;\nmoment.monthsShort           = monthsShort;\nmoment.weekdaysMin           = weekdaysMin;\nmoment.defineLocale          = defineLocale;\nmoment.updateLocale          = updateLocale;\nmoment.locales               = locales;\nmoment.weekdaysShort         = weekdaysShort;\nmoment.normalizeUnits        = normalizeUnits;\nmoment.relativeTimeRounding = relativeTimeRounding;\nmoment.relativeTimeThreshold = relativeTimeThreshold;\nmoment.calendarFormat        = getCalendarFormat;\nmoment.prototype             = fn;\n\nexport default moment;\n","//! moment-timezone.js\n//! version : 0.5.10\n//! Copyright (c) JS Foundation and other contributors\n//! license : MIT\n//! github.com/moment/moment-timezone\n\n(function (root, factory) {\n\t\"use strict\";\n\n\t/*global define*/\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(['moment'], factory);                 // AMD\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory(require('moment')); // Node\n\t} else {\n\t\tfactory(root.moment);                        // Browser\n\t}\n}(this, function (moment) {\n\t\"use strict\";\n\n\t// Do not load moment-timezone a second time.\n\tif (moment.tz !== undefined) {\n\t\tlogError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);\n\t\treturn moment;\n\t}\n\n\tvar VERSION = \"0.5.10\",\n\t\tzones = {},\n\t\tlinks = {},\n\t\tnames = {},\n\t\tguesses = {},\n\t\tcachedGuess,\n\n\t\tmomentVersion = moment.version.split('.'),\n\t\tmajor = +momentVersion[0],\n\t\tminor = +momentVersion[1];\n\n\t// Moment.js version check\n\tif (major < 2 || (major === 2 && minor < 6)) {\n\t\tlogError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');\n\t}\n\n\t/************************************\n\t\tUnpacking\n\t************************************/\n\n\tfunction charCodeToInt(charCode) {\n\t\tif (charCode > 96) {\n\t\t\treturn charCode - 87;\n\t\t} else if (charCode > 64) {\n\t\t\treturn charCode - 29;\n\t\t}\n\t\treturn charCode - 48;\n\t}\n\n\tfunction unpackBase60(string) {\n\t\tvar i = 0,\n\t\t\tparts = string.split('.'),\n\t\t\twhole = parts[0],\n\t\t\tfractional = parts[1] || '',\n\t\t\tmultiplier = 1,\n\t\t\tnum,\n\t\t\tout = 0,\n\t\t\tsign = 1;\n\n\t\t// handle negative numbers\n\t\tif (string.charCodeAt(0) === 45) {\n\t\t\ti = 1;\n\t\t\tsign = -1;\n\t\t}\n\n\t\t// handle digits before the decimal\n\t\tfor (i; i < whole.length; i++) {\n\t\t\tnum = charCodeToInt(whole.charCodeAt(i));\n\t\t\tout = 60 * out + num;\n\t\t}\n\n\t\t// handle digits after the decimal\n\t\tfor (i = 0; i < fractional.length; i++) {\n\t\t\tmultiplier = multiplier / 60;\n\t\t\tnum = charCodeToInt(fractional.charCodeAt(i));\n\t\t\tout += num * multiplier;\n\t\t}\n\n\t\treturn out * sign;\n\t}\n\n\tfunction arrayToInt (array) {\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tarray[i] = unpackBase60(array[i]);\n\t\t}\n\t}\n\n\tfunction intToUntil (array, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tarray[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds\n\t\t}\n\n\t\tarray[length - 1] = Infinity;\n\t}\n\n\tfunction mapIndices (source, indices) {\n\t\tvar out = [], i;\n\n\t\tfor (i = 0; i < indices.length; i++) {\n\t\t\tout[i] = source[indices[i]];\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction unpack (string) {\n\t\tvar data = string.split('|'),\n\t\t\toffsets = data[2].split(' '),\n\t\t\tindices = data[3].split(''),\n\t\t\tuntils  = data[4].split(' ');\n\n\t\tarrayToInt(offsets);\n\t\tarrayToInt(indices);\n\t\tarrayToInt(untils);\n\n\t\tintToUntil(untils, indices.length);\n\n\t\treturn {\n\t\t\tname       : data[0],\n\t\t\tabbrs      : mapIndices(data[1].split(' '), indices),\n\t\t\toffsets    : mapIndices(offsets, indices),\n\t\t\tuntils     : untils,\n\t\t\tpopulation : data[5] | 0\n\t\t};\n\t}\n\n\t/************************************\n\t\tZone object\n\t************************************/\n\n\tfunction Zone (packedString) {\n\t\tif (packedString) {\n\t\t\tthis._set(unpack(packedString));\n\t\t}\n\t}\n\n\tZone.prototype = {\n\t\t_set : function (unpacked) {\n\t\t\tthis.name       = unpacked.name;\n\t\t\tthis.abbrs      = unpacked.abbrs;\n\t\t\tthis.untils     = unpacked.untils;\n\t\t\tthis.offsets    = unpacked.offsets;\n\t\t\tthis.population = unpacked.population;\n\t\t},\n\n\t\t_index : function (timestamp) {\n\t\t\tvar target = +timestamp,\n\t\t\t\tuntils = this.untils,\n\t\t\t\ti;\n\n\t\t\tfor (i = 0; i < untils.length; i++) {\n\t\t\t\tif (target < untils[i]) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tparse : function (timestamp) {\n\t\t\tvar target  = +timestamp,\n\t\t\t\toffsets = this.offsets,\n\t\t\t\tuntils  = this.untils,\n\t\t\t\tmax     = untils.length - 1,\n\t\t\t\toffset, offsetNext, offsetPrev, i;\n\n\t\t\tfor (i = 0; i < max; i++) {\n\t\t\t\toffset     = offsets[i];\n\t\t\t\toffsetNext = offsets[i + 1];\n\t\t\t\toffsetPrev = offsets[i ? i - 1 : i];\n\n\t\t\t\tif (offset < offsetNext && tz.moveAmbiguousForward) {\n\t\t\t\t\toffset = offsetNext;\n\t\t\t\t} else if (offset > offsetPrev && tz.moveInvalidForward) {\n\t\t\t\t\toffset = offsetPrev;\n\t\t\t\t}\n\n\t\t\t\tif (target < untils[i] - (offset * 60000)) {\n\t\t\t\t\treturn offsets[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn offsets[max];\n\t\t},\n\n\t\tabbr : function (mom) {\n\t\t\treturn this.abbrs[this._index(mom)];\n\t\t},\n\n\t\toffset : function (mom) {\n\t\t\treturn this.offsets[this._index(mom)];\n\t\t}\n\t};\n\n\t/************************************\n\t\tCurrent Timezone\n\t************************************/\n\n\tfunction OffsetAt(at) {\n\t\tvar timeString = at.toTimeString();\n\t\tvar abbr = timeString.match(/\\([a-z ]+\\)/i);\n\t\tif (abbr && abbr[0]) {\n\t\t\t// 17:56:31 GMT-0600 (CST)\n\t\t\t// 17:56:31 GMT-0600 (Central Standard Time)\n\t\t\tabbr = abbr[0].match(/[A-Z]/g);\n\t\t\tabbr = abbr ? abbr.join('') : undefined;\n\t\t} else {\n\t\t\t// 17:56:31 CST\n\t\t\t// 17:56:31 GMT+0800 (台北標準時間)\n\t\t\tabbr = timeString.match(/[A-Z]{3,5}/g);\n\t\t\tabbr = abbr ? abbr[0] : undefined;\n\t\t}\n\n\t\tif (abbr === 'GMT') {\n\t\t\tabbr = undefined;\n\t\t}\n\n\t\tthis.at = +at;\n\t\tthis.abbr = abbr;\n\t\tthis.offset = at.getTimezoneOffset();\n\t}\n\n\tfunction ZoneScore(zone) {\n\t\tthis.zone = zone;\n\t\tthis.offsetScore = 0;\n\t\tthis.abbrScore = 0;\n\t}\n\n\tZoneScore.prototype.scoreOffsetAt = function (offsetAt) {\n\t\tthis.offsetScore += Math.abs(this.zone.offset(offsetAt.at) - offsetAt.offset);\n\t\tif (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {\n\t\t\tthis.abbrScore++;\n\t\t}\n\t};\n\n\tfunction findChange(low, high) {\n\t\tvar mid, diff;\n\n\t\twhile ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {\n\t\t\tmid = new OffsetAt(new Date(low.at + diff));\n\t\t\tif (mid.offset === low.offset) {\n\t\t\t\tlow = mid;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\tfunction userOffsets() {\n\t\tvar startYear = new Date().getFullYear() - 2,\n\t\t\tlast = new OffsetAt(new Date(startYear, 0, 1)),\n\t\t\toffsets = [last],\n\t\t\tchange, next, i;\n\n\t\tfor (i = 1; i < 48; i++) {\n\t\t\tnext = new OffsetAt(new Date(startYear, i, 1));\n\t\t\tif (next.offset !== last.offset) {\n\t\t\t\tchange = findChange(last, next);\n\t\t\t\toffsets.push(change);\n\t\t\t\toffsets.push(new OffsetAt(new Date(change.at + 6e4)));\n\t\t\t}\n\t\t\tlast = next;\n\t\t}\n\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));\n\t\t}\n\n\t\treturn offsets;\n\t}\n\n\tfunction sortZoneScores (a, b) {\n\t\tif (a.offsetScore !== b.offsetScore) {\n\t\t\treturn a.offsetScore - b.offsetScore;\n\t\t}\n\t\tif (a.abbrScore !== b.abbrScore) {\n\t\t\treturn a.abbrScore - b.abbrScore;\n\t\t}\n\t\treturn b.zone.population - a.zone.population;\n\t}\n\n\tfunction addToGuesses (name, offsets) {\n\t\tvar i, offset;\n\t\tarrayToInt(offsets);\n\t\tfor (i = 0; i < offsets.length; i++) {\n\t\t\toffset = offsets[i];\n\t\t\tguesses[offset] = guesses[offset] || {};\n\t\t\tguesses[offset][name] = true;\n\t\t}\n\t}\n\n\tfunction guessesForUserOffsets (offsets) {\n\t\tvar offsetsLength = offsets.length,\n\t\t\tfilteredGuesses = {},\n\t\t\tout = [],\n\t\t\ti, j, guessesOffset;\n\n\t\tfor (i = 0; i < offsetsLength; i++) {\n\t\t\tguessesOffset = guesses[offsets[i].offset] || {};\n\t\t\tfor (j in guessesOffset) {\n\t\t\t\tif (guessesOffset.hasOwnProperty(j)) {\n\t\t\t\t\tfilteredGuesses[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (i in filteredGuesses) {\n\t\t\tif (filteredGuesses.hasOwnProperty(i)) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction rebuildGuess () {\n\n\t\t// use Intl API when available and returning valid time zone\n\t\ttry {\n\t\t\tvar intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\t\tif (intlName){\n\t\t\t\tvar name = names[normalizeName(intlName)];\n\t\t\t\tif (name) {\n\t\t\t\t\treturn name;\n\t\t\t\t}\n\t\t\t\tlogError(\"Moment Timezone found \" + intlName + \" from the Intl api, but did not have that data loaded.\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// Intl unavailable, fall back to manual guessing.\n\t\t}\n\n\t\tvar offsets = userOffsets(),\n\t\t\toffsetsLength = offsets.length,\n\t\t\tguesses = guessesForUserOffsets(offsets),\n\t\t\tzoneScores = [],\n\t\t\tzoneScore, i, j;\n\n\t\tfor (i = 0; i < guesses.length; i++) {\n\t\t\tzoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);\n\t\t\tfor (j = 0; j < offsetsLength; j++) {\n\t\t\t\tzoneScore.scoreOffsetAt(offsets[j]);\n\t\t\t}\n\t\t\tzoneScores.push(zoneScore);\n\t\t}\n\n\t\tzoneScores.sort(sortZoneScores);\n\n\t\treturn zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;\n\t}\n\n\tfunction guess (ignoreCache) {\n\t\tif (!cachedGuess || ignoreCache) {\n\t\t\tcachedGuess = rebuildGuess();\n\t\t}\n\t\treturn cachedGuess;\n\t}\n\n\t/************************************\n\t\tGlobal Methods\n\t************************************/\n\n\tfunction normalizeName (name) {\n\t\treturn (name || '').toLowerCase().replace(/\\//g, '_');\n\t}\n\n\tfunction addZone (packed) {\n\t\tvar i, name, split, normalized;\n\n\t\tif (typeof packed === \"string\") {\n\t\t\tpacked = [packed];\n\t\t}\n\n\t\tfor (i = 0; i < packed.length; i++) {\n\t\t\tsplit = packed[i].split('|');\n\t\t\tname = split[0];\n\t\t\tnormalized = normalizeName(name);\n\t\t\tzones[normalized] = packed[i];\n\t\t\tnames[normalized] = name;\n\t\t\tif (split[5]) {\n\t\t\t\taddToGuesses(normalized, split[2].split(' '));\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getZone (name, caller) {\n\t\tname = normalizeName(name);\n\n\t\tvar zone = zones[name];\n\t\tvar link;\n\n\t\tif (zone instanceof Zone) {\n\t\t\treturn zone;\n\t\t}\n\n\t\tif (typeof zone === 'string') {\n\t\t\tzone = new Zone(zone);\n\t\t\tzones[name] = zone;\n\t\t\treturn zone;\n\t\t}\n\n\t\t// Pass getZone to prevent recursion more than 1 level deep\n\t\tif (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {\n\t\t\tzone = zones[name] = new Zone();\n\t\t\tzone._set(link);\n\t\t\tzone.name = names[name];\n\t\t\treturn zone;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfunction getNames () {\n\t\tvar i, out = [];\n\n\t\tfor (i in names) {\n\t\t\tif (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out.sort();\n\t}\n\n\tfunction addLink (aliases) {\n\t\tvar i, alias, normal0, normal1;\n\n\t\tif (typeof aliases === \"string\") {\n\t\t\taliases = [aliases];\n\t\t}\n\n\t\tfor (i = 0; i < aliases.length; i++) {\n\t\t\talias = aliases[i].split('|');\n\n\t\t\tnormal0 = normalizeName(alias[0]);\n\t\t\tnormal1 = normalizeName(alias[1]);\n\n\t\t\tlinks[normal0] = normal1;\n\t\t\tnames[normal0] = alias[0];\n\n\t\t\tlinks[normal1] = normal0;\n\t\t\tnames[normal1] = alias[1];\n\t\t}\n\t}\n\n\tfunction loadData (data) {\n\t\taddZone(data.zones);\n\t\taddLink(data.links);\n\t\ttz.dataVersion = data.version;\n\t}\n\n\tfunction zoneExists (name) {\n\t\tif (!zoneExists.didShowError) {\n\t\t\tzoneExists.didShowError = true;\n\t\t\t\tlogError(\"moment.tz.zoneExists('\" + name + \"') has been deprecated in favor of !moment.tz.zone('\" + name + \"')\");\n\t\t}\n\t\treturn !!getZone(name);\n\t}\n\n\tfunction needsOffset (m) {\n\t\treturn !!(m._a && (m._tzm === undefined));\n\t}\n\n\tfunction logError (message) {\n\t\tif (typeof console !== 'undefined' && typeof console.error === 'function') {\n\t\t\tconsole.error(message);\n\t\t}\n\t}\n\n\t/************************************\n\t\tmoment.tz namespace\n\t************************************/\n\n\tfunction tz (input) {\n\t\tvar args = Array.prototype.slice.call(arguments, 0, -1),\n\t\t\tname = arguments[arguments.length - 1],\n\t\t\tzone = getZone(name),\n\t\t\tout  = moment.utc.apply(null, args);\n\n\t\tif (zone && !moment.isMoment(input) && needsOffset(out)) {\n\t\t\tout.add(zone.parse(out), 'minutes');\n\t\t}\n\n\t\tout.tz(name);\n\n\t\treturn out;\n\t}\n\n\ttz.version      = VERSION;\n\ttz.dataVersion  = '';\n\ttz._zones       = zones;\n\ttz._links       = links;\n\ttz._names       = names;\n\ttz.add          = addZone;\n\ttz.link         = addLink;\n\ttz.load         = loadData;\n\ttz.zone         = getZone;\n\ttz.zoneExists   = zoneExists; // deprecated in 0.1.0\n\ttz.guess        = guess;\n\ttz.names        = getNames;\n\ttz.Zone         = Zone;\n\ttz.unpack       = unpack;\n\ttz.unpackBase60 = unpackBase60;\n\ttz.needsOffset  = needsOffset;\n\ttz.moveInvalidForward   = true;\n\ttz.moveAmbiguousForward = false;\n\n\t/************************************\n\t\tInterface with Moment.js\n\t************************************/\n\n\tvar fn = moment.fn;\n\n\tmoment.tz = tz;\n\n\tmoment.defaultZone = null;\n\n\tmoment.updateOffset = function (mom, keepTime) {\n\t\tvar zone = moment.defaultZone,\n\t\t\toffset;\n\n\t\tif (mom._z === undefined) {\n\t\t\tif (zone && needsOffset(mom) && !mom._isUTC) {\n\t\t\t\tmom._d = moment.utc(mom._a)._d;\n\t\t\t\tmom.utc().add(zone.parse(mom), 'minutes');\n\t\t\t}\n\t\t\tmom._z = zone;\n\t\t}\n\t\tif (mom._z) {\n\t\t\toffset = mom._z.offset(mom);\n\t\t\tif (Math.abs(offset) < 16) {\n\t\t\t\toffset = offset / 60;\n\t\t\t}\n\t\t\tif (mom.utcOffset !== undefined) {\n\t\t\t\tmom.utcOffset(-offset, keepTime);\n\t\t\t} else {\n\t\t\t\tmom.zone(offset, keepTime);\n\t\t\t}\n\t\t}\n\t};\n\n\tfn.tz = function (name) {\n\t\tif (name) {\n\t\t\tthis._z = getZone(name);\n\t\t\tif (this._z) {\n\t\t\t\tmoment.updateOffset(this);\n\t\t\t} else {\n\t\t\t\tlogError(\"Moment Timezone has no data for \" + name + \". See http://momentjs.com/timezone/docs/#/data-loading/.\");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif (this._z) { return this._z.name; }\n\t};\n\n\tfunction abbrWrap (old) {\n\t\treturn function () {\n\t\t\tif (this._z) { return this._z.abbr(this); }\n\t\t\treturn old.call(this);\n\t\t};\n\t}\n\n\tfunction resetZoneWrap (old) {\n\t\treturn function () {\n\t\t\tthis._z = null;\n\t\t\treturn old.apply(this, arguments);\n\t\t};\n\t}\n\n\tfn.zoneName = abbrWrap(fn.zoneName);\n\tfn.zoneAbbr = abbrWrap(fn.zoneAbbr);\n\tfn.utc      = resetZoneWrap(fn.utc);\n\n\tmoment.tz.setDefault = function(name) {\n\t\tif (major < 2 || (major === 2 && minor < 9)) {\n\t\t\tlogError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');\n\t\t}\n\t\tmoment.defaultZone = name ? getZone(name) : null;\n\t\treturn moment;\n\t};\n\n\t// Cloning a moment should include the _z property.\n\tvar momentProperties = moment.momentProperties;\n\tif (Object.prototype.toString.call(momentProperties) === '[object Array]') {\n\t\t// moment 2.8.1+\n\t\tmomentProperties.push('_z');\n\t\tmomentProperties.push('_a');\n\t} else if (momentProperties) {\n\t\t// moment 2.7.0\n\t\tmomentProperties._z = null;\n\t}\n\n\t// INJECT DATA\n\n\treturn moment;\n}));\n","var moment = module.exports = require(\"./moment-timezone\");\nmoment.tz.load(require('./data/packed/latest.json'));\n","import moment from 'moment-timezone';\n\nexport default {\n  targetEl: null,\n  name: 'Book an interview',\n  email: 'info@slvolunteers.com',\n  calendar: 'Interviews',\n  apiToken: 'xxx',\n  showCredits: false,\n  // Display and scroll to the first upcoming event in the calendar\n  goToFirstEvent: false,\n  // 'instant' 'confirm_decline'. Controls message after booking confirmation.\n  bookingGraph: 'confirm_decline',\n  fullCalendar: {\n    weekends: false,\n    businessHours: true,\n    views: {\n      agenda: {\n        displayEventEnd: false,\n        columnFormat: 'ddd\\nMMM D',\n      },\n    },\n  },\n  timekitCreateBooking: {\n    event: {\n      // Default, you may want to customize this to a specific location,\n      where: 'Online',\n      // Inserted dynamically based on the host and visitors names\n      // (you can replace it with a static string)\n      what: 'Interview',\n    },\n    customer: {\n      id: 'XXXXXXX user id XXXXXXXX',\n      timezone: moment.tz.guess(),\n    },\n  },\n  avatar: 'avatar.jpg', // This prevents the template from breaking\n};\n","/**\n * Checks if an element or up to 4 of its parents have a class;\n * @function parentHasClass\n * @param  {String} className\n * @param  {HTMLElement} el\n * @param  {number} counter [optional]\n * @return {Boolean}\n */\nfunction parentHasClass(className, el, counter = 0) { // eslint-disable-line complexity\n  const maxIterations = 5;\n  if (!el || !el.classList || counter >= maxIterations) {\n    return false;\n  }\n\n  return el.classList.contains(className)\n    ? true\n    : parentHasClass(className, el.parentNode, counter + 1);\n}\n\n/**\n * Auto-complete calendar booking fields when data is available.\n * @function setAutoFillForm\n */\nfunction setAutoFillForm(rootEl, name, email) {\n  if (!(name && email)) {\n    return;\n  }\n\n  rootEl.addEventListener('click', e => {\n    if (!parentHasClass('fc-event', e.target)) {\n      return;\n    }\n\n    function fillValues() {\n      const nameInput = document.querySelector('.bookingjs-form-input[name=name]');\n      const emailInput = document.querySelector('.bookingjs-form-input[name=email]');\n\n      if (nameInput && emailInput) {\n        nameInput.value = name;\n        emailInput.value = email;\n      }\n    }\n\n    setTimeout(fillValues, 200);\n  });\n}\n\nexport default {\n  setAutoFillForm,\n};\n","/* globals TimekitBooking, xController, $LAB */\nimport assert from 'fl-assert';\nimport defaultConfig from './defaultConfig';\nimport utils from './utils';\n\n//------------------------------------------------------\n// Controll scheduling widget\n//------------------------------------------------------\nfunction flBooking(config = {}) {\n  // Dependency check\n  ['moment', 'jQuery'].forEach(dep => assert(window[dep], `Dependency ${dep} not found.`));\n\n  const {\n    autofillUser,\n    autofillEmail,\n    timezone,\n    targetEl,\n    createBooking,\n    getEvents,\n  } = config;\n\n  assert(\n    timezone &&\n    timezone.timezone !== undefined &&\n    timezone.utc_offset !== undefined,\n    'Invalid timezone object'\n  );\n\n  // This string will be replaced by the actual id\n  const scheduler = window['$$ scheduler id $$'];\n  scheduler.setCreateBooking(createBooking);\n  scheduler.setFindTime(getEvents);\n  scheduler.setUserTimezone(timezone);\n\n  const timekitConfig = Object.assign({}, defaultConfig, config);\n  new TimekitBooking().init(timekitConfig);\n\n  utils.setAutoFillForm(targetEl, autofillUser, autofillEmail);\n}\n\nexport default flBooking;\n"],"names":["some","warn","set","indexOf","handleStrictParse","keys","calendar","isValid","_isValid","proto","get","addSubtract","add","subtract","valueOf","relativeTime","abs","toISOString","moment","local","fn","utc","unix","months","locale","invalid","duration","weekdays","parseZone","localeData","monthsShort","weekdaysMin","locales","weekdaysShort","relativeTimeRounding","relativeTimeThreshold","this","require$$1","require$$0","tz","guess","parentHasClass","className","el","counter","maxIterations","classList","contains","parentNode","setAutoFillForm","rootEl","name","email","addEventListener","e","target","fillValues","nameInput","document","querySelector","emailInput","value","flBooking","config","forEach","assert","window","dep","autofillUser","autofillEmail","timezone","targetEl","createBooking","getEvents","undefined","utc_offset","scheduler","setCreateBooking","setFindTime","setUserTimezone","timekitConfig","Object","assign","defaultConfig","TimekitBooking","init"],"mappings":";;;;;;AAAA;;;;;;;;;;;AAWA,SAAS,gBAAgB,CAAC,SAAS,EAAE,YAAY,EAAE;EACjD,IAAI,CAAC,SAAS,EAAE;IACd,IAAI,oBAAoB,GAAG,EAAE,CAAC;IAC9B,IAAI,EAAE,GAAG,kBAAkB,CAAC;IAC5B,IAAI,UAAU,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;IACnC,IAAI,cAAc,GAAG,EAAE,CAAC;;IAExB,IAAI,QAAQ,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnC,OAAO,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;MAC9B,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACjC,QAAQ,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAChC;;;;;IAKD,IAAI,cAAc,CAAC,CAAC,CAAC,EAAE;MACrB,oBAAoB,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,oBAAoB,CAAC;KACxE;;IAED,oBAAoB,IAAI,YAAY,CAAC;IACrC,OAAO,oBAAoB,CAAC;GAC7B;;EAED,OAAO,IAAI,CAAC;CACb;;;;;;;;;;;;AAYD,SAAS,MAAM,CAAC,SAAS,EAAE,YAAY,EAAE;EACvC,IAAI,KAAK,GAAG,gBAAgB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;EACtD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;GACxB;CACF;;;;;;;;;;;;AAYD,MAAM,CAAC,IAAI,GAAG,SAAS,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE;EACnD,IAAI,KAAK,GAAG,gBAAgB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;EACtD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACrB;CACF,CAAC,AAEF,AAAsB,AACtB;;;;;;;;;;;;ACvEA,IAAI,YAAY,CAAC;;AAEjB,SAAS,KAAK,IAAI;IACd,OAAO,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;CAC9C;;;;AAID,SAAS,eAAe,EAAE,QAAQ,EAAE;IAChC,YAAY,GAAG,QAAQ,CAAC;CAC3B;;ACZc,SAAS,OAAO,CAAC,KAAK,EAAE;IACnC,OAAO,KAAK,YAAY,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,gBAAgB,CAAC;CAC/F;;ACFc,SAAS,QAAQ,CAAC,KAAK,EAAE;;;IAGpC,OAAO,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;CACvF;;ACJc,SAAS,aAAa,CAAC,GAAG,EAAE;IACvC,IAAI,CAAC,CAAC;IACN,KAAK,CAAC,IAAI,GAAG,EAAE;;QAEX,OAAO,KAAK,CAAC;KAChB;IACD,OAAO,IAAI,CAAC;CACf;;ACPc,SAAS,QAAQ,CAAC,KAAK,EAAE;IACpC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;CACnG;;ACFc,SAAS,MAAM,CAAC,KAAK,EAAE;IAClC,OAAO,KAAK,YAAY,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,eAAe,CAAC;CAC7F;;ACFc,SAAS,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE;IACjC,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;IAChB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QAC7B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KAC3B;IACD,OAAO,GAAG,CAAC;CACd;;ACNc,SAAS,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE;IACrC,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CACrD;;ACAc,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;IACjC,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;QACb,IAAI,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;YAClB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACf;KACJ;;IAED,IAAI,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE;QAC3B,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;KAC3B;;IAED,IAAI,UAAU,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE;QAC1B,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;KACzB;;IAED,OAAO,CAAC,CAAC;CACZ;;AChBM,SAAS,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;IACtD,OAAO,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;CACtE;;ACJD,SAAS,mBAAmB,GAAG;;IAE3B,OAAO;QACH,KAAK,aAAa,KAAK;QACvB,YAAY,MAAM,EAAE;QACpB,WAAW,OAAO,EAAE;QACpB,QAAQ,UAAU,CAAC,CAAC;QACpB,aAAa,KAAK,CAAC;QACnB,SAAS,SAAS,KAAK;QACvB,YAAY,MAAM,IAAI;QACtB,aAAa,KAAK,KAAK;QACvB,eAAe,GAAG,KAAK;QACvB,GAAG,eAAe,KAAK;QACvB,eAAe,GAAG,EAAE;QACpB,QAAQ,UAAU,IAAI;KACzB,CAAC;CACL;;AAED,AAAe,SAAS,eAAe,CAAC,CAAC,EAAE;IACvC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,EAAE;QACf,CAAC,CAAC,GAAG,GAAG,mBAAmB,EAAE,CAAC;KACjC;IACD,OAAO,CAAC,CAAC,GAAG,CAAC;CAChB;;ACvBD,IAAI,IAAI,CAAC;AACT,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE;IACtB,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;CAC/B,MAAM;IACH,IAAI,GAAG,UAAU,GAAG,EAAE;QAClB,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,GAAG,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;;QAEzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;gBACtC,OAAO,IAAI,CAAC;aACf;SACJ;;QAED,OAAO,KAAK,CAAC;KAChB,CAAC;CACL;;AAED,kBAA2B;;ACbpB,SAAS,OAAO,CAAC,CAAC,EAAE;IACvB,IAAI,CAAC,CAAC,QAAQ,IAAI,IAAI,EAAE;QACpB,IAAI,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,WAAW,GAAGA,MAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE;YAC5D,OAAO,CAAC,IAAI,IAAI,CAAC;SACpB,CAAC,CAAC;QACH,IAAI,UAAU,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;YACnC,KAAK,CAAC,QAAQ,GAAG,CAAC;YAClB,CAAC,KAAK,CAAC,KAAK;YACZ,CAAC,KAAK,CAAC,YAAY;YACnB,CAAC,KAAK,CAAC,cAAc;YACrB,CAAC,KAAK,CAAC,SAAS;YAChB,CAAC,KAAK,CAAC,aAAa;YACpB,CAAC,KAAK,CAAC,eAAe;YACtB,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC;;QAEzD,IAAI,CAAC,CAAC,OAAO,EAAE;YACX,UAAU,GAAG,UAAU;gBACnB,KAAK,CAAC,aAAa,KAAK,CAAC;gBACzB,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC;gBAC/B,KAAK,CAAC,OAAO,KAAK,SAAS,CAAC;SACnC;;QAED,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;YAChD,CAAC,CAAC,QAAQ,GAAG,UAAU,CAAC;SAC3B;aACI;YACD,OAAO,UAAU,CAAC;SACrB;KACJ;IACD,OAAO,CAAC,CAAC,QAAQ,CAAC;CACrB;;AAED,AAAO,SAAS,aAAa,EAAE,KAAK,EAAE;IAClC,IAAI,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IACvB,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;KACrC;SACI;QACD,eAAe,CAAC,CAAC,CAAC,CAAC,eAAe,GAAG,IAAI,CAAC;KAC7C;;IAED,OAAO,CAAC,CAAC;CACZ;;AChDc,SAAS,WAAW,CAAC,KAAK,EAAE;IACvC,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC;CAC3B;;ACGD;;AAEA,IAAI,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,GAAG,EAAE,CAAC;;AAEnD,AAAO,SAAS,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE;IACjC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC;;IAEjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;QACrC,EAAE,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;KAC/C;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;QACvB,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;KACnB;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;QACvB,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;KACnB;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;QACvB,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;KACnB;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAC5B,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;KAC7B;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QACzB,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;KACvB;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QAC3B,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;KAC3B;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAC5B,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;KAC7B;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACxB,EAAE,CAAC,GAAG,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;KAClC;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAC5B,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;KAC7B;;IAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7B,KAAK,CAAC,IAAI,gBAAgB,EAAE;YACxB,IAAI,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;YACjB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;gBACnB,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;aAClB;SACJ;KACJ;;IAED,OAAO,EAAE,CAAC;CACb;;AAED,IAAI,gBAAgB,GAAG,KAAK,CAAC;;;AAG7B,AAAO,SAAS,MAAM,CAAC,MAAM,EAAE;IAC3B,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACzB,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,IAAI,GAAG,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,CAAC;IAClE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;KAC3B;;;IAGD,IAAI,gBAAgB,KAAK,KAAK,EAAE;QAC5B,gBAAgB,GAAG,IAAI,CAAC;QACxB,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACzB,gBAAgB,GAAG,KAAK,CAAC;KAC5B;CACJ;;AAED,AAAO,SAAS,QAAQ,EAAE,GAAG,EAAE;IAC3B,OAAO,GAAG,YAAY,MAAM,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC;CACjF;;AC5Ec,SAAS,QAAQ,EAAE,MAAM,EAAE;IACtC,IAAI,MAAM,GAAG,CAAC,EAAE;;QAEZ,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACjC,MAAM;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAC7B;CACJ;;ACLc,SAAS,KAAK,CAAC,mBAAmB,EAAE;IAC/C,IAAI,aAAa,GAAG,CAAC,mBAAmB;QACpC,KAAK,GAAG,CAAC,CAAC;;IAEd,IAAI,aAAa,KAAK,CAAC,IAAI,QAAQ,CAAC,aAAa,CAAC,EAAE;QAChD,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;KACnC;;IAED,OAAO,KAAK,CAAC;CAChB;;ACTD;AACA,AAAe,SAAS,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE;IAC/D,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;QAC5C,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QACpD,KAAK,GAAG,CAAC;QACT,CAAC,CAAC;IACN,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QACtB,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACzD,KAAK,EAAE,CAAC;SACX;KACJ;IACD,OAAO,KAAK,GAAG,UAAU,CAAC;CAC7B;;ACXD,SAASC,MAAI,CAAC,GAAG,EAAE;IACf,IAAI,KAAK,CAAC,2BAA2B,KAAK,KAAK;YACvC,CAAC,OAAO,OAAO,MAAM,WAAW,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE;QACvD,OAAO,CAAC,IAAI,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAC;KAC/C;CACJ;;AAED,AAAO,SAAS,SAAS,CAAC,GAAG,EAAE,EAAE,EAAE;IAC/B,IAAI,SAAS,GAAG,IAAI,CAAC;;IAErB,OAAO,MAAM,CAAC,YAAY;QACtB,IAAI,KAAK,CAAC,kBAAkB,IAAI,IAAI,EAAE;YAClC,KAAK,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SACvC;QACD,IAAI,SAAS,EAAE;YACX,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,GAAG,CAAC;YACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,GAAG,GAAG,EAAE,CAAC;gBACT,IAAI,OAAO,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;oBAClC,GAAG,IAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;oBACxB,KAAK,IAAI,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;wBAC1B,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;qBAChD;oBACD,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;iBAC1B,MAAM;oBACH,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;iBACtB;gBACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAClB;YACDA,MAAI,CAAC,GAAG,GAAG,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YACrG,SAAS,GAAG,KAAK,CAAC;SACrB;QACD,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KACpC,EAAE,EAAE,CAAC,CAAC;CACV;;AAED,IAAI,YAAY,GAAG,EAAE,CAAC;;AAEtB,AAAO,SAAS,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE;IACvC,IAAI,KAAK,CAAC,kBAAkB,IAAI,IAAI,EAAE;QAClC,KAAK,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACvC;IACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;QACrBA,MAAI,CAAC,GAAG,CAAC,CAAC;QACV,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KAC7B;CACJ;;AAED,KAAK,CAAC,2BAA2B,GAAG,KAAK,CAAC;AAC1C,KAAK,CAAC,kBAAkB,GAAG,IAAI,CAAC;;ACtDjB,SAAS,UAAU,CAAC,KAAK,EAAE;IACtC,OAAO,KAAK,YAAY,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,mBAAmB,CAAC;CACrG;;ACGM,SAAS,GAAG,EAAE,MAAM,EAAE;IACzB,IAAI,IAAI,EAAE,CAAC,CAAC;IACZ,KAAK,CAAC,IAAI,MAAM,EAAE;QACd,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACjB,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;YAClB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;SAClB,MAAM;YACH,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;SACxB;KACJ;IACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;;;IAGtB,IAAI,CAAC,oBAAoB,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;CAChG;;AAED,AAAO,SAAS,YAAY,CAAC,YAAY,EAAE,WAAW,EAAE;IACpD,IAAI,GAAG,GAAG,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,EAAE,IAAI,CAAC;IACzC,KAAK,IAAI,IAAI,WAAW,EAAE;QACtB,IAAI,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE;YAC/B,IAAI,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC7D,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;aACxC,MAAM,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;gBAClC,GAAG,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;aACjC,MAAM;gBACH,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;aACpB;SACJ;KACJ;IACD,KAAK,IAAI,IAAI,YAAY,EAAE;QACvB,IAAI,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC;gBAC1B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC;gBAC9B,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;;YAElC,GAAG,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;SACrC;KACJ;IACD,OAAO,GAAG,CAAC;CACd;;AC7CM,SAAS,MAAM,CAAC,MAAM,EAAE;IAC3B,IAAI,MAAM,IAAI,IAAI,EAAE;QAChB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACpB;CACJ;;ACFD,IAAI,IAAI,CAAC;;AAET,IAAI,MAAM,CAAC,IAAI,EAAE;IACb,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;CACtB,MAAM;IACH,IAAI,GAAG,UAAU,GAAG,EAAE;QAClB,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC;QAChB,KAAK,CAAC,IAAI,GAAG,EAAE;YACX,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;gBACpB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACf;SACJ;QACD,OAAO,GAAG,CAAC;KACd,CAAC;CACL;;AAED,kBAA2B;;AClBpB,IAAI,eAAe,GAAG;IACzB,OAAO,GAAG,eAAe;IACzB,OAAO,GAAG,kBAAkB;IAC5B,QAAQ,GAAG,cAAc;IACzB,OAAO,GAAG,mBAAmB;IAC7B,QAAQ,GAAG,qBAAqB;IAChC,QAAQ,GAAG,GAAG;CACjB,CAAC;;AAEF,AAEA,AAAO,SAAS,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACrC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC/D,OAAO,UAAU,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC;CAC9D;;ACdM,IAAI,qBAAqB,GAAG;IAC/B,GAAG,IAAI,WAAW;IAClB,EAAE,KAAK,QAAQ;IACf,CAAC,MAAM,YAAY;IACnB,EAAE,KAAK,cAAc;IACrB,GAAG,IAAI,qBAAqB;IAC5B,IAAI,GAAG,2BAA2B;CACrC,CAAC;;AAEF,AAAO,SAAS,cAAc,EAAE,GAAG,EAAE;IACjC,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;QAClC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;;IAE1D,IAAI,MAAM,IAAI,CAAC,WAAW,EAAE;QACxB,OAAO,MAAM,CAAC;KACjB;;IAED,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,kBAAkB,EAAE,UAAU,GAAG,EAAE;QAC/E,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACvB,CAAC,CAAC;;IAEH,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;CACpC;;ACtBM,IAAI,kBAAkB,GAAG,cAAc,CAAC;;AAE/C,AAAO,SAAS,WAAW,IAAI;IAC3B,OAAO,IAAI,CAAC,YAAY,CAAC;CAC5B;;ACJM,IAAI,cAAc,GAAG,IAAI,CAAC;AACjC,AAAO,IAAI,mBAAmB,GAAG,SAAS,CAAC;;AAE3C,AAAO,SAAS,OAAO,EAAE,MAAM,EAAE;IAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CAC9C;;ACLM,IAAI,mBAAmB,GAAG;IAC7B,MAAM,GAAG,OAAO;IAChB,IAAI,KAAK,QAAQ;IACjB,CAAC,IAAI,eAAe;IACpB,CAAC,IAAI,UAAU;IACf,EAAE,GAAG,YAAY;IACjB,CAAC,IAAI,SAAS;IACd,EAAE,GAAG,UAAU;IACf,CAAC,IAAI,OAAO;IACZ,EAAE,GAAG,SAAS;IACd,CAAC,IAAI,SAAS;IACd,EAAE,GAAG,WAAW;IAChB,CAAC,IAAI,QAAQ;IACb,EAAE,GAAG,UAAU;CAClB,CAAC;;AAEF,AAEA,AAAO,SAAS,YAAY,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE;IACnE,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACxC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,CAAC,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;CACrC;;AAED,AAAO,SAAS,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE;IACtC,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,GAAG,QAAQ,GAAG,MAAM,CAAC,CAAC;IAC9D,OAAO,UAAU,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;CAC9E;;AC1BD,IAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,AAAO,SAAS,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IACnC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;CAC7E;;AAED,AAAO,SAAS,cAAc,CAAC,KAAK,EAAE;IAClC,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,SAAS,CAAC;CACjG;;AAED,AAAO,SAAS,oBAAoB,CAAC,WAAW,EAAE;IAC9C,IAAI,eAAe,GAAG,EAAE;QACpB,cAAc;QACd,IAAI,CAAC;;IAET,KAAK,IAAI,IAAI,WAAW,EAAE;QACtB,IAAI,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE;YAC/B,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,cAAc,EAAE;gBAChB,eAAe,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;aACvD;SACJ;KACJ;;IAED,OAAO,eAAe,CAAC;CAC1B;;AC5BD,IAAI,UAAU,GAAG,EAAE,CAAC;;AAEpB,AAAO,SAAS,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE;IAC5C,UAAU,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;CAC/B;;AAED,AAAO,SAAS,mBAAmB,CAAC,QAAQ,EAAE;IAC1C,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,KAAK,IAAI,CAAC,IAAI,QAAQ,EAAE;QACpB,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAClD;IACD,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;QACvB,OAAO,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;KAClC,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;CAChB;;ACTM,SAAS,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE;IACxC,OAAO,UAAU,KAAK,EAAE;QACpB,IAAI,KAAK,IAAI,IAAI,EAAE;YACfC,KAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YACvB,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC;SACf,MAAM;YACH,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC1B;KACJ,CAAC;CACL;;AAED,AAAO,SAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;IAC5B,OAAO,GAAG,CAAC,OAAO,EAAE;QAChB,GAAG,CAAC,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;CAChE;;AAED,AAAO,SAASA,KAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE;IACnC,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;QACf,GAAG,CAAC,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;KAC3D;CACJ;;;;AAID,AAAO,SAAS,SAAS,EAAE,KAAK,EAAE;IAC9B,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAC9B,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;KACxB;IACD,OAAO,IAAI,CAAC;CACf;;;AAGD,AAAO,SAAS,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE;IACrC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,WAAW,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACzD;KACJ,MAAM;QACH,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;SAC7B;KACJ;IACD,OAAO,IAAI,CAAC;CACf;;ACtDc,SAAS,QAAQ,CAAC,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE;IAC9D,IAAI,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;QACjC,WAAW,GAAG,YAAY,GAAG,SAAS,CAAC,MAAM;QAC7C,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC;IACvB,OAAO,CAAC,IAAI,GAAG,CAAC,SAAS,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;CAC/E;;ACJM,IAAI,gBAAgB,GAAG,sLAAsL,CAAC;;AAErN,IAAI,qBAAqB,GAAG,4CAA4C,CAAC;;AAEzE,IAAI,eAAe,GAAG,EAAE,CAAC;;AAEzB,AAAO,IAAI,oBAAoB,GAAG,EAAE,CAAC;;;;;;AAMrC,AAAO,SAAS,cAAc,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;IAC9D,IAAI,IAAI,GAAG,QAAQ,CAAC;IACpB,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAC9B,IAAI,GAAG,YAAY;YACf,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;SAC3B,CAAC;KACL;IACD,IAAI,KAAK,EAAE;QACP,oBAAoB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;KACtC;IACD,IAAI,MAAM,EAAE;QACR,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY;YAC1C,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACtE,CAAC;KACL;IACD,IAAI,OAAO,EAAE;QACT,oBAAoB,CAAC,OAAO,CAAC,GAAG,YAAY;YACxC,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC;SACxE,CAAC;KACL;CACJ;;AAED,SAAS,sBAAsB,CAAC,KAAK,EAAE;IACnC,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;QACzB,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;KACxC;IACD,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;CACnC;;AAED,SAAS,kBAAkB,CAAC,MAAM,EAAE;IAChC,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;;IAEtD,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAChD,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;YAChC,KAAK,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7C,MAAM;YACH,KAAK,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;KACJ;;IAED,OAAO,UAAU,GAAG,EAAE;QAClB,IAAI,MAAM,GAAG,EAAE,EAAE,CAAC,CAAC;QACnB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,YAAY,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;SAClF;QACD,OAAO,MAAM,CAAC;KACjB,CAAC;CACL;;;AAGD,AAAO,SAAS,YAAY,CAAC,CAAC,EAAE,MAAM,EAAE;IACpC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE;QACd,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC;KACvC;;IAED,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;IAC9C,eAAe,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;;IAEhF,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;CACrC;;AAED,AAAO,SAAS,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE;IACzC,IAAI,CAAC,GAAG,CAAC,CAAC;;IAEV,SAAS,2BAA2B,CAAC,KAAK,EAAE;QACxC,OAAO,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;KAChD;;IAED,qBAAqB,CAAC,SAAS,GAAG,CAAC,CAAC;IACpC,OAAO,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACjD,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,2BAA2B,CAAC,CAAC;QAC5E,qBAAqB,CAAC,SAAS,GAAG,CAAC,CAAC;QACpC,CAAC,IAAI,CAAC,CAAC;KACV;;IAED,OAAO,MAAM,CAAC;CACjB;;AC1FM,IAAI,MAAM,WAAW,IAAI,CAAC;AACjC,AAAO,IAAI,MAAM,WAAW,MAAM,CAAC;AACnC,AAAO,IAAI,MAAM,WAAW,OAAO,CAAC;AACpC,AAAO,IAAI,MAAM,WAAW,OAAO,CAAC;AACpC,AAAO,IAAI,MAAM,WAAW,YAAY,CAAC;AACzC,AAAO,IAAI,SAAS,QAAQ,OAAO,CAAC;AACpC,AAAO,IAAI,SAAS,QAAQ,WAAW,CAAC;AACxC,AAAO,IAAI,SAAS,QAAQ,eAAe,CAAC;AAC5C,AAAO,IAAI,SAAS,QAAQ,SAAS,CAAC;AACtC,AAAO,IAAI,SAAS,QAAQ,SAAS,CAAC;AACtC,AAAO,IAAI,SAAS,QAAQ,cAAc,CAAC;;AAE3C,AAAO,IAAI,aAAa,IAAI,KAAK,CAAC;AAClC,AAAO,IAAI,WAAW,MAAM,UAAU,CAAC;;AAEvC,AAAO,IAAI,WAAW,MAAM,oBAAoB,CAAC;AACjD,AAAO,IAAI,gBAAgB,GAAG,yBAAyB,CAAC;;AAExD,AAAO,IAAI,cAAc,GAAG,sBAAsB,CAAC;;;;AAInD,AAAO,IAAI,SAAS,GAAG,kHAAkH,CAAC;;;AAG1I,AACA,AAEA,IAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,AAAO,SAAS,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE;IACtD,OAAO,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,UAAU,QAAQ,EAAE,UAAU,EAAE;QACzE,OAAO,CAAC,QAAQ,IAAI,WAAW,CAAC,GAAG,WAAW,GAAG,KAAK,CAAC;KAC1D,CAAC;CACL;;AAED,AAAO,SAAS,qBAAqB,EAAE,KAAK,EAAE,MAAM,EAAE;IAClD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;QAC7B,OAAO,IAAI,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;KAC5C;;IAED,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;CACzD;;;AAGD,SAAS,cAAc,CAAC,CAAC,EAAE;IACvB,OAAO,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,qCAAqC,EAAE,UAAU,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QACrH,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;KAC/B,CAAC,CAAC,CAAC;CACP;;AAED,AAAO,SAAS,WAAW,CAAC,CAAC,EAAE;IAC3B,OAAO,CAAC,CAAC,OAAO,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC;CACtD;;ACjDD,IAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,AAAO,SAAS,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAE;IAC5C,IAAI,CAAC,EAAE,IAAI,GAAG,QAAQ,CAAC;IACvB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;KACnB;IACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACpB,IAAI,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE;YAC3B,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;SAClC,CAAC;KACL;IACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KAC3B;CACJ;;AAED,AAAO,SAAS,iBAAiB,EAAE,KAAK,EAAE,QAAQ,EAAE;IAChD,aAAa,CAAC,KAAK,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;QACxD,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC;QAC5B,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KAC7C,CAAC,CAAC;CACN;;AAED,AAAO,SAAS,uBAAuB,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IAC1D,IAAI,KAAK,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;QAC5C,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KAClD;CACJ;;AChCM,IAAI,IAAI,GAAG,CAAC,CAAC;AACpB,AAAO,IAAI,KAAK,GAAG,CAAC,CAAC;AACrB,AAAO,IAAI,IAAI,GAAG,CAAC,CAAC;AACpB,AAAO,IAAI,IAAI,GAAG,CAAC,CAAC;AACpB,AAAO,IAAI,MAAM,GAAG,CAAC,CAAC;AACtB,AAAO,IAAI,MAAM,GAAG,CAAC,CAAC;AACtB,AAAO,IAAI,WAAW,GAAG,CAAC,CAAC;AAC3B,AAAO,IAAI,IAAI,GAAG,CAAC,CAAC;AACpB,AAAO,IAAI,OAAO,GAAG,CAAC,CAAC;;ACRvB,IAAI,OAAO,CAAC;;AAEZ,IAAI,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE;IACzB,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC;CACrC,MAAM;IACH,OAAO,GAAG,UAAU,CAAC,EAAE;;QAEnB,IAAI,CAAC,CAAC;QACN,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;gBACf,OAAO,CAAC,CAAC;aACZ;SACJ;QACD,OAAO,CAAC,CAAC,CAAC;KACb,CAAC;CACL;;AAED,wBAA8B;;ACDvB,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;IACrC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;CAC9D;;;;AAID,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY;IAC7C,OAAO,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;CAC3B,CAAC,CAAC;;AAEH,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,MAAM,EAAE;IAC1C,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CACtD,CAAC,CAAC;;AAEH,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,MAAM,EAAE;IAC3C,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CACjD,CAAC,CAAC;;;;AAIH,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;;;;AAI3B,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;;;;AAI5B,aAAa,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC;AACjC,aAAa,CAAC,IAAI,IAAI,SAAS,EAAE,MAAM,CAAC,CAAC;AACzC,aAAa,CAAC,KAAK,GAAG,UAAU,QAAQ,EAAE,MAAM,EAAE;IAC9C,OAAO,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;CAC5C,CAAC,CAAC;AACH,aAAa,CAAC,MAAM,EAAE,UAAU,QAAQ,EAAE,MAAM,EAAE;IAC9C,OAAO,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;CACvC,CAAC,CAAC;;AAEH,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;IAC/C,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;CACnC,CAAC,CAAC;;AAEH,aAAa,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;IAClE,IAAI,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;;IAErE,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;KACxB,MAAM;QACH,eAAe,CAAC,MAAM,CAAC,CAAC,YAAY,GAAG,KAAK,CAAC;KAChD;CACJ,CAAC,CAAC;;;;AAIH,IAAI,gBAAgB,GAAG,+BAA+B,CAAC;AACvD,AAAO,IAAI,mBAAmB,GAAG,uFAAuF,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACpI,AAAO,SAAS,YAAY,EAAE,CAAC,EAAE,MAAM,EAAE;IACrC,IAAI,CAAC,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,gBAAgB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;CACnH;;AAED,AAAO,IAAI,wBAAwB,GAAG,iDAAiD,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnG,AAAO,SAAS,iBAAiB,EAAE,CAAC,EAAE,MAAM,EAAE;IAC1C,IAAI,CAAC,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC,YAAY,CAAC;KAC5B;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAC5D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;CAC7F;;AAED,SAAS,iBAAiB,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE;IAClD,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;IACpD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;;QAEpB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;YACrB,GAAG,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC1E,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC;SACvE;KACJ;;IAED,IAAI,MAAM,EAAE;QACR,IAAI,MAAM,KAAK,KAAK,EAAE;YAClB,EAAE,GAAGC,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC/C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC,MAAM;YACH,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;YAC9C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC;KACJ,MAAM;QACH,IAAI,MAAM,KAAK,KAAK,EAAE;YAClB,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC/C,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;YAC9C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC,MAAM;YACH,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;YAC9C,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC/C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC;KACJ;CACJ;;AAED,AAAO,SAAS,iBAAiB,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE;IAC1D,IAAI,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;;IAElB,IAAI,IAAI,CAAC,iBAAiB,EAAE;QACxB,OAAO,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;KAClE;;IAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;QACpB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;KAC/B;;;;;IAKD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;;QAErB,GAAG,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YACrC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;YAC9F,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;SACvG;QACD,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;YAClC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACtE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SAClE;;QAED,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACzE,OAAO,CAAC,CAAC;SACZ,MAAM,IAAI,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAChF,OAAO,CAAC,CAAC;SACZ,MAAM,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACxD,OAAO,CAAC,CAAC;SACZ;KACJ;CACJ;;;;AAID,AAAO,SAAS,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE;IAClC,IAAI,UAAU,CAAC;;IAEf,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE;;QAEhB,OAAO,GAAG,CAAC;KACd;;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACrB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB,MAAM;YACH,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;;YAE5C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAClB,OAAO,GAAG,CAAC;aACd;SACJ;KACJ;;IAED,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAClE,GAAG,CAAC,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IACvE,OAAO,GAAG,CAAC;CACd;;AAED,AAAO,SAAS,WAAW,EAAE,KAAK,EAAE;IAChC,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACtB,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;KACf,MAAM;QACH,OAAO,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAC7B;CACJ;;AAED,AAAO,SAAS,cAAc,IAAI;IAC9B,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;CACjD;;AAED,IAAI,uBAAuB,GAAG,SAAS,CAAC;AACxC,AAAO,SAAS,gBAAgB,EAAE,QAAQ,EAAE;IACxC,IAAI,IAAI,CAAC,iBAAiB,EAAE;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,EAAE;YACnC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;QACD,IAAI,QAAQ,EAAE;YACV,OAAO,IAAI,CAAC,uBAAuB,CAAC;SACvC,MAAM;YACH,OAAO,IAAI,CAAC,iBAAiB,CAAC;SACjC;KACJ,MAAM;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,mBAAmB,CAAC,EAAE;YACxC,IAAI,CAAC,iBAAiB,GAAG,uBAAuB,CAAC;SACpD;QACD,OAAO,IAAI,CAAC,uBAAuB,IAAI,QAAQ;YAC3C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,iBAAiB,CAAC;KAC7D;CACJ;;AAED,IAAI,kBAAkB,GAAG,SAAS,CAAC;AACnC,AAAO,SAAS,WAAW,EAAE,QAAQ,EAAE;IACnC,IAAI,IAAI,CAAC,iBAAiB,EAAE;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,EAAE;YACnC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;QACD,IAAI,QAAQ,EAAE;YACV,OAAO,IAAI,CAAC,kBAAkB,CAAC;SAClC,MAAM;YACH,OAAO,IAAI,CAAC,YAAY,CAAC;SAC5B;KACJ,MAAM;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,EAAE;YACnC,IAAI,CAAC,YAAY,GAAG,kBAAkB,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,kBAAkB,IAAI,QAAQ;YACtC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC;KACnD;CACJ;;AAED,SAAS,kBAAkB,IAAI;IAC3B,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;QACrB,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;KAC9B;;IAED,IAAI,WAAW,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,EAAE,WAAW,GAAG,EAAE;QACnD,CAAC,EAAE,GAAG,CAAC;IACX,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;;QAErB,GAAG,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;QACtC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;QACvC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;KAC/C;;;IAGD,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5B,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3B,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QACrB,WAAW,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9C;IACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QACrB,WAAW,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;KAChD;;IAED,IAAI,CAAC,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IACxE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC;IAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7E,IAAI,CAAC,uBAAuB,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;CACtF;;AC9QD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;IAClC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACpB,OAAO,CAAC,IAAI,IAAI,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;CACvC,CAAC,CAAC;;AAEH,cAAc,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IACxC,OAAO,IAAI,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC;CAC5B,CAAC,CAAC;;AAEH,cAAc,CAAC,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;AAClD,cAAc,CAAC,CAAC,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;AAClD,cAAc,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;;;;AAIlD,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;;;AAI1B,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;;;;AAI3B,aAAa,CAAC,GAAG,OAAO,WAAW,CAAC,CAAC;AACrC,aAAa,CAAC,IAAI,MAAM,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,MAAM,IAAI,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,OAAO,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;;AAE3C,aAAa,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;AACzC,aAAa,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;IAC1C,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;CACpF,CAAC,CAAC;AACH,aAAa,CAAC,IAAI,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;IACxC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;CAChD,CAAC,CAAC;AACH,aAAa,CAAC,GAAG,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;IACvC,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;CACrC,CAAC,CAAC;;;;AAIH,AAAO,SAAS,UAAU,CAAC,IAAI,EAAE;IAC7B,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;CACvC;;AAED,SAAS,UAAU,CAAC,IAAI,EAAE;IACtB,OAAO,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;CACnE;;;;AAID,KAAK,CAAC,iBAAiB,GAAG,UAAU,KAAK,EAAE;IACvC,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;CAC3D,CAAC;;;;AAIF,AAAO,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;;AAErD,AAAO,SAAS,aAAa,IAAI;IAC7B,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;CAClC;;AC1EM,SAAS,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;;;IAG9C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;;;IAG1C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE;QACnD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;KACvB;IACD,OAAO,IAAI,CAAC;CACf;;AAED,AAAO,SAAS,aAAa,EAAE,CAAC,EAAE;IAC9B,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;;;IAGrD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE;QACtD,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;KAC1B;IACD,OAAO,IAAI,CAAC;CACf;;AChBD;AACA,SAAS,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE;IACrC;QACI,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;;QAEnB,KAAK,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;;IAEpE,OAAO,CAAC,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;CAC3B;;;AAGD,AAAO,SAAS,kBAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9D,IAAI,YAAY,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC;QACtC,UAAU,GAAG,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC;QAC5C,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,YAAY,GAAG,UAAU;QAC1D,OAAO,EAAE,YAAY,CAAC;;IAE1B,IAAI,SAAS,IAAI,CAAC,EAAE;QAChB,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC;QACnB,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;KAClD,MAAM,IAAI,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,EAAE;QACrC,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC;QACnB,YAAY,GAAG,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;KAC/C,MAAM;QACH,OAAO,GAAG,IAAI,CAAC;QACf,YAAY,GAAG,SAAS,CAAC;KAC5B;;IAED,OAAO;QACH,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,YAAY;KAC1B,CAAC;CACL;;AAED,AAAO,SAAS,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACtC,IAAI,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;QAClD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QAC7D,OAAO,EAAE,OAAO,CAAC;;IAErB,IAAI,IAAI,GAAG,CAAC,EAAE;QACV,OAAO,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACzB,OAAO,GAAG,IAAI,GAAG,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;KACnD,MAAM,IAAI,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;QACjD,OAAO,GAAG,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACnD,OAAO,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAC5B,MAAM;QACH,OAAO,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACrB,OAAO,GAAG,IAAI,CAAC;KAClB;;IAED,OAAO;QACH,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,OAAO;KAChB,CAAC;CACL;;AAED,AAAO,SAAS,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE;IACxC,IAAI,UAAU,GAAG,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC;QAC5C,cAAc,GAAG,eAAe,CAAC,IAAI,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACzD,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;CAC/D;;ACvDD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAC7C,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;;;;AAIhD,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC1B,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;;;;AAI7B,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC3B,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;;;;AAI9B,aAAa,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC/B,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvC,aAAa,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC/B,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;;AAEvC,iBAAiB,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE;IAC5E,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;CAC3C,CAAC,CAAC;;;;;;AAMH,AAAO,SAAS,UAAU,EAAE,GAAG,EAAE;IAC7B,OAAO,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;CAC/D;;AAED,AAAO,IAAI,iBAAiB,GAAG;IAC3B,GAAG,GAAG,CAAC;IACP,GAAG,GAAG,CAAC;CACV,CAAC;;AAEF,AAAO,SAAS,oBAAoB,IAAI;IACpC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;CACzB;;AAED,AAAO,SAAS,oBAAoB,IAAI;IACpC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;CACzB;;;;AAID,AAAO,SAAS,UAAU,EAAE,KAAK,EAAE;IAC/B,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,OAAO,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;CACnE;;AAED,AAAO,SAAS,aAAa,EAAE,KAAK,EAAE;IAClC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACvC,OAAO,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;CACnE;;ACtDD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;;AAEpC,cAAc,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,MAAM,EAAE;IACzC,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CACtD,CAAC,CAAC;;AAEH,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,MAAM,EAAE;IAC1C,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CACxD,CAAC,CAAC;;AAEH,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,MAAM,EAAE;IAC3C,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;CACnD,CAAC,CAAC;;AAEH,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;AACrC,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;;;;AAIxC,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACzB,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AAC7B,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;;;AAGhC,eAAe,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC3B,eAAe,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AAC/B,eAAe,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;;;;AAIlC,aAAa,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC;AACjC,aAAa,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC;AACjC,aAAa,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC;AACjC,aAAa,CAAC,IAAI,IAAI,UAAU,QAAQ,EAAE,MAAM,EAAE;IAC9C,OAAO,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;CAC5C,CAAC,CAAC;AACH,aAAa,CAAC,KAAK,IAAI,UAAU,QAAQ,EAAE,MAAM,EAAE;IAC/C,OAAO,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;CAC9C,CAAC,CAAC;AACH,aAAa,CAAC,MAAM,IAAI,UAAU,QAAQ,EAAE,MAAM,EAAE;IAChD,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;CACzC,CAAC,CAAC;;AAEH,iBAAiB,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE;IAC3E,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;;IAEzE,IAAI,OAAO,IAAI,IAAI,EAAE;QACjB,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC;KACpB,MAAM;QACH,eAAe,CAAC,MAAM,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC;KAClD;CACJ,CAAC,CAAC;;AAEH,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE;IACrE,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;CAC9B,CAAC,CAAC;;;;AAIH,SAAS,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,OAAO,KAAK,CAAC;KAChB;;IAED,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACf,OAAO,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KAC9B;;IAED,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,OAAO,KAAK,CAAC;KAChB;;IAED,OAAO,IAAI,CAAC;CACf;;AAED,SAAS,eAAe,CAAC,KAAK,EAAE,MAAM,EAAE;IACpC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,OAAO,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC/C;IACD,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;CACtC;;;;AAID,AAAO,IAAI,qBAAqB,GAAG,0DAA0D,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzG,AAAO,SAAS,cAAc,EAAE,CAAC,EAAE,MAAM,EAAE;IACvC,IAAI,CAAC,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QACpD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;CAC/F;;AAED,AAAO,IAAI,0BAA0B,GAAG,6BAA6B,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACjF,AAAO,SAAS,mBAAmB,EAAE,CAAC,EAAE;IACpC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;CACnE;;AAED,AAAO,IAAI,wBAAwB,GAAG,sBAAsB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxE,AAAO,SAAS,iBAAiB,EAAE,CAAC,EAAE;IAClC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;CAC/D;;AAED,SAASC,mBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE;IACpD,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,WAAW,CAAC,iBAAiB,EAAE,CAAC;IACtD,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QACtB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;;QAE5B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACpB,GAAG,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC1E,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC9E,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC;SACvE;KACJ;;IAED,IAAI,MAAM,EAAE;QACR,IAAI,MAAM,KAAK,MAAM,EAAE;YACnB,EAAE,GAAGD,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAC5C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC,MAAM,IAAI,MAAM,KAAK,KAAK,EAAE;YACzB,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;YACjD,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC,MAAM;YACH,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC/C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC;KACJ,MAAM;QACH,IAAI,MAAM,KAAK,MAAM,EAAE;YACnB,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAC5C,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;YACjD,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC/C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC,MAAM,IAAI,MAAM,KAAK,KAAK,EAAE;YACzB,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;YACjD,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAC5C,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC/C,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC,MAAM;YACH,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC/C,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAC5C,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,EAAE,GAAGA,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;YACjD,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SAChC;KACJ;CACJ;;AAED,AAAO,SAAS,mBAAmB,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE;IAC9D,IAAI,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;;IAElB,IAAI,IAAI,CAAC,mBAAmB,EAAE;QAC1B,OAAOC,mBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;KACpE;;IAED,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QACtB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;KAChC;;IAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;;;QAGpB,GAAG,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClC,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE;YACvC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;YACrG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;YAC3G,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;SAC1G;QACD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;YACzB,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC7G,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SACpE;;QAED,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC7E,OAAO,CAAC,CAAC;SACZ,MAAM,IAAI,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACpF,OAAO,CAAC,CAAC;SACZ,MAAM,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACjF,OAAO,CAAC,CAAC;SACZ,MAAM,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC5D,OAAO,CAAC,CAAC;SACZ;KACJ;CACJ;;;;AAID,AAAO,SAAS,eAAe,EAAE,KAAK,EAAE;IACpC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;KACrC;IACD,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;IAC/D,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,KAAK,GAAG,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;KACrC,MAAM;QACH,OAAO,GAAG,CAAC;KACd;CACJ;;AAED,AAAO,SAAS,qBAAqB,EAAE,KAAK,EAAE;IAC1C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;KACrC;IACD,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACjE,OAAO,KAAK,IAAI,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;CACnE;;AAED,AAAO,SAAS,kBAAkB,EAAE,KAAK,EAAE;IACvC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;KACrC;;;;;;IAMD,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,IAAI,OAAO,GAAG,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,OAAO,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC;KAC3D,MAAM;QACH,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KAC1B;CACJ;;AAED,IAAI,oBAAoB,GAAG,SAAS,CAAC;AACrC,AAAO,SAAS,aAAa,EAAE,QAAQ,EAAE;IACrC,IAAI,IAAI,CAAC,mBAAmB,EAAE;QAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;YACrC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,IAAI,QAAQ,EAAE;YACV,OAAO,IAAI,CAAC,oBAAoB,CAAC;SACpC,MAAM;YACH,OAAO,IAAI,CAAC,cAAc,CAAC;SAC9B;KACJ,MAAM;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;YACrC,IAAI,CAAC,cAAc,GAAG,oBAAoB,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC,oBAAoB,IAAI,QAAQ;YACxC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC;KACvD;CACJ;;AAED,IAAI,yBAAyB,GAAG,SAAS,CAAC;AAC1C,AAAO,SAAS,kBAAkB,EAAE,QAAQ,EAAE;IAC1C,IAAI,IAAI,CAAC,mBAAmB,EAAE;QAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;YACrC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,IAAI,QAAQ,EAAE;YACV,OAAO,IAAI,CAAC,yBAAyB,CAAC;SACzC,MAAM;YACH,OAAO,IAAI,CAAC,mBAAmB,CAAC;SACnC;KACJ,MAAM;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,qBAAqB,CAAC,EAAE;YAC1C,IAAI,CAAC,mBAAmB,GAAG,yBAAyB,CAAC;SACxD;QACD,OAAO,IAAI,CAAC,yBAAyB,IAAI,QAAQ;YAC7C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,mBAAmB,CAAC;KACjE;CACJ;;AAED,IAAI,uBAAuB,GAAG,SAAS,CAAC;AACxC,AAAO,SAAS,gBAAgB,EAAE,QAAQ,EAAE;IACxC,IAAI,IAAI,CAAC,mBAAmB,EAAE;QAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;YACrC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,IAAI,QAAQ,EAAE;YACV,OAAO,IAAI,CAAC,uBAAuB,CAAC;SACvC,MAAM;YACH,OAAO,IAAI,CAAC,iBAAiB,CAAC;SACjC;KACJ,MAAM;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,mBAAmB,CAAC,EAAE;YACxC,IAAI,CAAC,iBAAiB,GAAG,uBAAuB,CAAC;SACpD;QACD,OAAO,IAAI,CAAC,uBAAuB,IAAI,QAAQ;YAC3C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,iBAAiB,CAAC;KAC7D;CACJ;;;AAGD,SAAS,oBAAoB,IAAI;IAC7B,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;QACrB,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;KAC9B;;IAED,IAAI,SAAS,GAAG,EAAE,EAAE,WAAW,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,EAAE,WAAW,GAAG,EAAE;QACnE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC;IAChC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;;QAEpB,GAAG,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACjC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACrC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC/B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3B;;;IAGD,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1B,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5B,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3B,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACpB,WAAW,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,WAAW,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;KAChD;;IAED,IAAI,CAAC,cAAc,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1E,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC;IAC/C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC;;IAE7C,IAAI,CAAC,oBAAoB,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/E,IAAI,CAAC,yBAAyB,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IACrF,IAAI,CAAC,uBAAuB,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;CACpF;;AC/VD;;AAEA,SAAS,OAAO,GAAG;IACf,OAAO,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;CAClC;;AAED,SAAS,OAAO,GAAG;IACf,OAAO,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;CAC7B;;AAED,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;AAC1C,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;AAC3C,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;;AAE3C,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;IACpC,OAAO,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;CACjE,CAAC,CAAC;;AAEH,cAAc,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;IACtC,OAAO,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACzD,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;CACnC,CAAC,CAAC;;AAEH,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;IACpC,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;CAC1D,CAAC,CAAC;;AAEH,cAAc,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;IACtC,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAClD,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;CACnC,CAAC,CAAC;;AAEH,SAAS,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE;IACjC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;QACpC,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,SAAS,CAAC,CAAC;KAC9E,CAAC,CAAC;CACN;;AAED,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACpB,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;;;;AAIrB,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;;AAG1B,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;;;;AAI5B,SAAS,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAE;IACtC,OAAO,MAAM,CAAC,cAAc,CAAC;CAChC;;AAED,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,CAAC;AACnC,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,CAAC;AACnC,aAAa,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC/B,aAAa,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC/B,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvC,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;;AAEvC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAChC,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAClC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAChC,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;;AAElC,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AACjC,aAAa,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACtD,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;CAC5B,CAAC,CAAC;AACH,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACvD,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;CAC1C,CAAC,CAAC;AACH,aAAa,CAAC,KAAK,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACjD,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1C,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;CAC1C,CAAC,CAAC;AACH,aAAa,CAAC,OAAO,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACnD,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC3C,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1C,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;CAC1C,CAAC,CAAC;AACH,aAAa,CAAC,KAAK,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACjD,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1C,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;CAC5C,CAAC,CAAC;AACH,aAAa,CAAC,OAAO,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACnD,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC3C,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;CAC7C,CAAC,CAAC;;;;AAIH,AAAO,SAAS,UAAU,EAAE,KAAK,EAAE;;;IAG/B,OAAO,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;CACzD;;AAED,AAAO,IAAI,0BAA0B,GAAG,eAAe,CAAC;AACxD,AAAO,SAAS,cAAc,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;IACrD,IAAI,KAAK,GAAG,EAAE,EAAE;QACZ,OAAO,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;KAChC,MAAM;QACH,OAAO,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;KAChC;CACJ;;;;;;;;;AASD,AAAO,IAAI,UAAU,GAAG,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;;ACnIlD;AACA,AAKA;AACA,AAEA;AACA,AAMA;AACA,AAEA,AAAO,IAAI,UAAU,GAAG;IACpB,QAAQ,EAAE,eAAe;IACzB,cAAc,EAAE,qBAAqB;IACrC,WAAW,EAAE,kBAAkB;IAC/B,OAAO,EAAE,cAAc;IACvB,YAAY,EAAE,mBAAmB;IACjC,YAAY,EAAE,mBAAmB;;IAEjC,MAAM,EAAE,mBAAmB;IAC3B,WAAW,EAAE,wBAAwB;;IAErC,IAAI,EAAE,iBAAiB;;IAEvB,QAAQ,EAAE,qBAAqB;IAC/B,WAAW,EAAE,wBAAwB;IACrC,aAAa,EAAE,0BAA0B;;IAEzC,aAAa,EAAE,0BAA0B;CAC5C,CAAC;;AChCF;AACA,IAAI,OAAO,GAAG,EAAE,CAAC;AACjB,IAAI,cAAc,GAAG,EAAE,CAAC;AACxB,IAAI,YAAY,CAAC;;AAEjB,SAAS,eAAe,CAAC,GAAG,EAAE;IAC1B,OAAO,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;CAC1D;;;;;AAKD,SAAS,YAAY,CAAC,KAAK,EAAE;IACzB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC;;IAElC,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE;QACrB,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7C,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;QACjB,IAAI,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,EAAE;YACV,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACjD,IAAI,MAAM,EAAE;gBACR,OAAO,MAAM,CAAC;aACjB;YACD,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;gBAEvE,MAAM;aACT;YACD,CAAC,EAAE,CAAC;SACP;QACD,CAAC,EAAE,CAAC;KACP;IACD,OAAO,IAAI,CAAC;CACf;;AAED,SAAS,UAAU,CAAC,IAAI,EAAE;IACtB,IAAI,SAAS,GAAG,IAAI,CAAC;;IAErB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC;YAC7C,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;QAC9B,IAAI;YACA,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC;YAC/B,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;;;YAG5B,kBAAkB,CAAC,SAAS,CAAC,CAAC;SACjC,CAAC,OAAO,CAAC,EAAE,GAAG;KAClB;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;CACxB;;;;;AAKD,AAAO,SAAS,kBAAkB,EAAE,GAAG,EAAE,MAAM,EAAE;IAC7C,IAAI,IAAI,CAAC;IACT,IAAI,GAAG,EAAE;QACL,IAAI,WAAW,CAAC,MAAM,CAAC,EAAE;YACrB,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;SACzB;aACI;YACD,IAAI,GAAG,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SACpC;;QAED,IAAI,IAAI,EAAE;;YAEN,YAAY,GAAG,IAAI,CAAC;SACvB;KACJ;;IAED,OAAO,YAAY,CAAC,KAAK,CAAC;CAC7B;;AAED,AAAO,SAAS,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE;IACxC,IAAI,MAAM,KAAK,IAAI,EAAE;QACjB,IAAI,YAAY,GAAG,UAAU,CAAC;QAC9B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;YACvB,eAAe,CAAC,sBAAsB;oBAC9B,wDAAwD;oBACxD,sDAAsD;oBACtD,wDAAwD;oBACxD,yEAAyE,CAAC,CAAC;YACnF,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;SACxC,MAAM,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI,EAAE;YACpC,IAAI,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE;gBACtC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC;aACvD,MAAM;gBACH,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;oBACtC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;iBAC5C;gBACD,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;oBACrC,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,MAAM;iBACjB,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;;QAE/D,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE;YACtB,cAAc,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBACtC,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;aAClC,CAAC,CAAC;SACN;;;;;QAKD,kBAAkB,CAAC,IAAI,CAAC,CAAC;;;QAGzB,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;KACxB,MAAM;;QAEH,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;CACJ;;AAED,AAAO,SAAS,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE;IACvC,IAAI,MAAM,IAAI,IAAI,EAAE;QAChB,IAAI,MAAM,EAAE,YAAY,GAAG,UAAU,CAAC;;QAEtC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;YACvB,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;SACxC;QACD,MAAM,GAAG,YAAY,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC5C,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;QAC5B,MAAM,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QACpC,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;;;QAGvB,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAC5B,MAAM;;QAEH,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;YACvB,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,IAAI,IAAI,EAAE;gBACpC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;aAC9C,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;gBAC9B,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;aACxB;SACJ;KACJ;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;CACxB;;;AAGD,AAAO,SAAS,SAAS,EAAE,GAAG,EAAE;IAC5B,IAAI,MAAM,CAAC;;IAEX,IAAI,GAAG,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE;QACzC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;KAC3B;;IAED,IAAI,CAAC,GAAG,EAAE;QACN,OAAO,YAAY,CAAC;KACvB;;IAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;;QAEf,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,MAAM,EAAE;YACR,OAAO,MAAM,CAAC;SACjB;QACD,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;KACf;;IAED,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;CAC5B;;AAED,AAAO,SAAS,WAAW,GAAG;IAC1B,OAAOC,MAAI,CAAC,OAAO,CAAC,CAAC;CACxB;;ACrLc,SAAS,aAAa,EAAE,CAAC,EAAE;IACtC,IAAI,QAAQ,CAAC;IACb,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;;IAEb,IAAI,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAE;QACzC,QAAQ;YACJ,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,KAAK;YAClD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI;YAC5E,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;YACpI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,MAAM;YACnD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,MAAM;YACnD,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,WAAW;YACxD,CAAC,CAAC,CAAC;;QAEP,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,kBAAkB,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,QAAQ,GAAG,IAAI,CAAC,EAAE;YAC/E,QAAQ,GAAG,IAAI,CAAC;SACnB;QACD,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,cAAc,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;YACtD,QAAQ,GAAG,IAAI,CAAC;SACnB;QACD,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,gBAAgB,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;YACxD,QAAQ,GAAG,OAAO,CAAC;SACtB;;QAED,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1C;;IAED,OAAO,CAAC,CAAC;CACZ;;AC3BD;;AAEA,IAAI,gBAAgB,GAAG,kJAAkJ,CAAC;AAC1K,IAAI,aAAa,GAAG,6IAA6I,CAAC;;AAElK,IAAI,OAAO,GAAG,uBAAuB,CAAC;;AAEtC,IAAI,QAAQ,GAAG;IACX,CAAC,cAAc,EAAE,qBAAqB,CAAC;IACvC,CAAC,YAAY,EAAE,iBAAiB,CAAC;IACjC,CAAC,cAAc,EAAE,gBAAgB,CAAC;IAClC,CAAC,YAAY,EAAE,aAAa,EAAE,KAAK,CAAC;IACpC,CAAC,UAAU,EAAE,aAAa,CAAC;IAC3B,CAAC,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC;IAChC,CAAC,YAAY,EAAE,YAAY,CAAC;IAC5B,CAAC,UAAU,EAAE,OAAO,CAAC;;IAErB,CAAC,YAAY,EAAE,aAAa,CAAC;IAC7B,CAAC,WAAW,EAAE,aAAa,EAAE,KAAK,CAAC;IACnC,CAAC,SAAS,EAAE,OAAO,CAAC;CACvB,CAAC;;;AAGF,IAAI,QAAQ,GAAG;IACX,CAAC,eAAe,EAAE,qBAAqB,CAAC;IACxC,CAAC,eAAe,EAAE,oBAAoB,CAAC;IACvC,CAAC,UAAU,EAAE,gBAAgB,CAAC;IAC9B,CAAC,OAAO,EAAE,WAAW,CAAC;IACtB,CAAC,aAAa,EAAE,mBAAmB,CAAC;IACpC,CAAC,aAAa,EAAE,kBAAkB,CAAC;IACnC,CAAC,QAAQ,EAAE,cAAc,CAAC;IAC1B,CAAC,MAAM,EAAE,UAAU,CAAC;IACpB,CAAC,IAAI,EAAE,MAAM,CAAC;CACjB,CAAC;;AAEF,IAAI,eAAe,GAAG,qBAAqB,CAAC;;;AAG5C,AAAO,SAAS,aAAa,CAAC,MAAM,EAAE;IAClC,IAAI,CAAC,EAAE,CAAC;QACJ,MAAM,GAAG,MAAM,CAAC,EAAE;QAClB,KAAK,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;QACnE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC;;IAEhD,IAAI,KAAK,EAAE;QACP,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;;QAEnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC/B,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5B,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC;gBACrC,MAAM;aACT;SACJ;QACD,IAAI,UAAU,IAAI,IAAI,EAAE;YACpB,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;YACxB,OAAO;SACV;QACD,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACV,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACzC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;;oBAE/B,UAAU,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChD,MAAM;iBACT;aACJ;YACD,IAAI,UAAU,IAAI,IAAI,EAAE;gBACpB,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACxB,OAAO;aACV;SACJ;QACD,IAAI,CAAC,SAAS,IAAI,UAAU,IAAI,IAAI,EAAE;YAClC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;YACxB,OAAO;SACV;QACD,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACV,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxB,QAAQ,GAAG,GAAG,CAAC;aAClB,MAAM;gBACH,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACxB,OAAO;aACV;SACJ;QACD,MAAM,CAAC,EAAE,GAAG,UAAU,GAAG,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;QAC/D,yBAAyB,CAAC,MAAM,CAAC,CAAC;KACrC,MAAM;QACH,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;KAC3B;CACJ;;;AAGD,AAAO,SAAS,gBAAgB,CAAC,MAAM,EAAE;IACrC,IAAI,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;IAE9C,IAAI,OAAO,KAAK,IAAI,EAAE;QAClB,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,OAAO;KACV;;IAED,aAAa,CAAC,MAAM,CAAC,CAAC;IACtB,IAAI,MAAM,CAAC,QAAQ,KAAK,KAAK,EAAE;QAC3B,OAAO,MAAM,CAAC,QAAQ,CAAC;QACvB,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;KACzC;CACJ;;AAED,KAAK,CAAC,uBAAuB,GAAG,SAAS;IACrC,iGAAiG;IACjG,mFAAmF;IACnF,gFAAgF;IAChF,+DAA+D;IAC/D,UAAU,MAAM,EAAE;QACd,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;KACpE;CACJ,CAAC;;ACvHF;AACA,AAAe,SAAS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IACtC,IAAI,CAAC,IAAI,IAAI,EAAE;QACX,OAAO,CAAC,CAAC;KACZ;IACD,IAAI,CAAC,IAAI,IAAI,EAAE;QACX,OAAO,CAAC,CAAC;KACZ;IACD,OAAO,CAAC,CAAC;CACZ;;ACAD,SAAS,gBAAgB,CAAC,MAAM,EAAE;;IAE9B,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACrC,IAAI,MAAM,CAAC,OAAO,EAAE;QAChB,OAAO,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAE,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;KACrF;IACD,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;CAC5E;;;;;;AAMD,AAAO,SAAS,eAAe,EAAE,MAAM,EAAE;IACrC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,GAAG,EAAE,EAAE,WAAW,EAAE,SAAS,CAAC;;IAEhD,IAAI,MAAM,CAAC,EAAE,EAAE;QACX,OAAO;KACV;;IAED,WAAW,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;;;IAGvC,IAAI,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;QAClE,qBAAqB,CAAC,MAAM,CAAC,CAAC;KACjC;;;IAGD,IAAI,MAAM,CAAC,UAAU,EAAE;QACnB,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;;QAEzD,IAAI,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,EAAE;YAC3C,eAAe,CAAC,MAAM,CAAC,CAAC,kBAAkB,GAAG,IAAI,CAAC;SACrD;;QAED,IAAI,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACtD,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACtC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;KACvC;;;;;;;IAOD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,EAAE;QAC5C,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;KAC5C;;;IAGD,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACf,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACvF;;;IAGD,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE;YAClB,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;YACvB,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;YACvB,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;QAClC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACvB;;IAED,MAAM,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,aAAa,GAAG,UAAU,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;;IAG7E,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,EAAE;QACrB,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;KACpE;;IAED,IAAI,MAAM,CAAC,QAAQ,EAAE;QACjB,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;KACxB;CACJ;;AAED,SAAS,qBAAqB,CAAC,MAAM,EAAE;IACnC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,eAAe,CAAC;;IAEhE,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;IACd,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QAC5C,GAAG,GAAG,CAAC,CAAC;QACR,GAAG,GAAG,CAAC,CAAC;;;;;;QAMR,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACjF,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxB,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE;YAC5B,eAAe,GAAG,IAAI,CAAC;SAC1B;KACJ,MAAM;QACH,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;QAC/B,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;;QAE/B,IAAI,OAAO,GAAG,UAAU,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;;QAElD,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;;;QAGzD,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;;QAEnC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;;YAEb,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;YACd,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE;gBAC5B,eAAe,GAAG,IAAI,CAAC;aAC1B;SACJ,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;;YAEpB,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YACpB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;gBACpB,eAAe,GAAG,IAAI,CAAC;aAC1B;SACJ,MAAM;;YAEH,OAAO,GAAG,GAAG,CAAC;SACjB;KACJ;IACD,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,WAAW,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;QACpD,eAAe,CAAC,MAAM,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC;KACjD,MAAM,IAAI,eAAe,IAAI,IAAI,EAAE;QAChC,eAAe,CAAC,MAAM,CAAC,CAAC,gBAAgB,GAAG,IAAI,CAAC;KACnD,MAAM;QACH,IAAI,GAAG,kBAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;KACtC;CACJ;;ACjID;AACA,KAAK,CAAC,QAAQ,GAAG,YAAY,EAAE,CAAC;;;AAGhC,AAAO,SAAS,yBAAyB,CAAC,MAAM,EAAE;;IAE9C,IAAI,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,QAAQ,EAAE;QAC9B,aAAa,CAAC,MAAM,CAAC,CAAC;QACtB,OAAO;KACV;;IAED,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,eAAe,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;;;IAGrC,IAAI,MAAM,GAAG,EAAE,GAAG,MAAM,CAAC,EAAE;QACvB,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO;QACtC,YAAY,GAAG,MAAM,CAAC,MAAM;QAC5B,sBAAsB,GAAG,CAAC,CAAC;;IAE/B,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;;IAE/E,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAChC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAClB,WAAW,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;;QAG5E,IAAI,WAAW,EAAE;YACb,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YACxD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,eAAe,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACrD;YACD,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;YACxE,sBAAsB,IAAI,WAAW,CAAC,MAAM,CAAC;SAChD;;QAED,IAAI,oBAAoB,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,WAAW,EAAE;gBACb,eAAe,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;aACzC;iBACI;gBACD,eAAe,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpD;YACD,uBAAuB,CAAC,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;SACvD;aACI,IAAI,MAAM,CAAC,OAAO,IAAI,CAAC,WAAW,EAAE;YACrC,eAAe,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpD;KACJ;;;IAGD,eAAe,CAAC,MAAM,CAAC,CAAC,aAAa,GAAG,YAAY,GAAG,sBAAsB,CAAC;IAC9E,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,eAAe,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACpD;;;IAGD,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE;QACrB,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,KAAK,IAAI;QACxC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACrB,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,SAAS,CAAC;KAC/C;;IAED,eAAe,CAAC,MAAM,CAAC,CAAC,eAAe,GAAG,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7D,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;;IAEpD,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;;IAErF,eAAe,CAAC,MAAM,CAAC,CAAC;IACxB,aAAa,CAAC,MAAM,CAAC,CAAC;CACzB;;;AAGD,SAAS,eAAe,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;IAC9C,IAAI,IAAI,CAAC;;IAET,IAAI,QAAQ,IAAI,IAAI,EAAE;;QAElB,OAAO,IAAI,CAAC;KACf;IACD,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI,EAAE;QAC7B,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC9C,MAAM,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,EAAE;;QAE5B,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,IAAI,IAAI,IAAI,IAAI,GAAG,EAAE,EAAE;YACnB,IAAI,IAAI,EAAE,CAAC;SACd;QACD,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE;YACtB,IAAI,GAAG,CAAC,CAAC;SACZ;QACD,OAAO,IAAI,CAAC;KACf,MAAM;;QAEH,OAAO,IAAI,CAAC;KACf;CACJ;;ACpGD;AACA,AAAO,SAAS,wBAAwB,CAAC,MAAM,EAAE;IAC7C,IAAI,UAAU;QACV,UAAU;;QAEV,WAAW;QACX,CAAC;QACD,YAAY,CAAC;;IAEjB,IAAI,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QACxB,eAAe,CAAC,MAAM,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC;QAC7C,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,OAAO;KACV;;IAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,YAAY,GAAG,CAAC,CAAC;QACjB,UAAU,GAAG,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACpC,IAAI,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;YACxB,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;SACvC;QACD,UAAU,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7B,yBAAyB,CAAC,UAAU,CAAC,CAAC;;QAEtC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACtB,SAAS;SACZ;;;QAGD,YAAY,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC;;;QAG1D,YAAY,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,EAAE,CAAC;;QAErE,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;;QAEjD,IAAI,WAAW,IAAI,IAAI,IAAI,YAAY,GAAG,WAAW,EAAE;YACnD,WAAW,GAAG,YAAY,CAAC;YAC3B,UAAU,GAAG,UAAU,CAAC;SAC3B;KACJ;;IAED,MAAM,CAAC,MAAM,EAAE,UAAU,IAAI,UAAU,CAAC,CAAC;CAC5C;;AC7CM,SAAS,gBAAgB,CAAC,MAAM,EAAE;IACrC,IAAI,MAAM,CAAC,EAAE,EAAE;QACX,OAAO;KACV;;IAED,IAAI,CAAC,GAAG,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACxC,MAAM,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,WAAW,CAAC,EAAE,UAAU,GAAG,EAAE;QAC1G,OAAO,GAAG,IAAI,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;KACnC,CAAC,CAAC;;IAEH,eAAe,CAAC,MAAM,CAAC,CAAC;CAC3B;;ACID,SAAS,gBAAgB,EAAE,MAAM,EAAE;IAC/B,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,GAAG,CAAC,QAAQ,EAAE;;QAEd,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAChB,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC;KAC5B;;IAED,OAAO,GAAG,CAAC;CACd;;AAED,AAAO,SAAS,aAAa,EAAE,MAAM,EAAE;IACnC,IAAI,KAAK,GAAG,MAAM,CAAC,EAAE;QACjB,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC;;IAEvB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;IAExD,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,EAAE,CAAC,EAAE;QAC1D,OAAO,aAAa,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;KAC3C;;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,CAAC,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACtD;;IAED,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;KAC3C,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACtB,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC;KACrB,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;QACxB,wBAAwB,CAAC,MAAM,CAAC,CAAC;KACpC,MAAM,IAAI,MAAM,EAAE;QACf,yBAAyB,CAAC,MAAM,CAAC,CAAC;KACrC,OAAO;QACJ,eAAe,CAAC,MAAM,CAAC,CAAC;KAC3B;;IAED,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAClB,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC;KACpB;;IAED,OAAO,MAAM,CAAC;CACjB;;AAED,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,IAAI,KAAK,GAAG,MAAM,CAAC,EAAE,CAAC;IACtB,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;KACrC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACtB,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KACzC,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAClC,gBAAgB,CAAC,MAAM,CAAC,CAAC;KAC5B,MAAM,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;QACvB,MAAM,CAAC,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,UAAU,GAAG,EAAE;YAC3C,OAAO,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;SAC5B,CAAC,CAAC;QACH,eAAe,CAAC,MAAM,CAAC,CAAC;KAC3B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;QACnC,gBAAgB,CAAC,MAAM,CAAC,CAAC;KAC5B,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;;QAExB,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;KAC/B,MAAM;QACH,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;KACzC;CACJ;;AAED,AAAO,SAAS,gBAAgB,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE;IACpE,IAAI,CAAC,GAAG,EAAE,CAAC;;IAEX,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,EAAE;QACrC,MAAM,GAAG,MAAM,CAAC;QAChB,MAAM,GAAG,SAAS,CAAC;KACtB;;IAED,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;QAC5C,KAAK,GAAG,SAAS,CAAC;KACrB;;;IAGD,CAAC,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IAC7B,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC;IACd,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC;IACb,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC;IACd,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC;;IAEnB,OAAO,gBAAgB,CAAC,CAAC,CAAC,CAAC;CAC9B;;AC1GM,SAAS,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;IACxD,OAAO,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;CACjE;;ACCM,IAAI,YAAY,GAAG,SAAS;IAC/B,oGAAoG;IACpG,YAAY;QACR,IAAI,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;YACnC,OAAO,KAAK,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;SACtC,MAAM;YACH,OAAO,aAAa,EAAE,CAAC;SAC1B;KACJ;CACJ,CAAC;;AAEF,AAAO,IAAI,YAAY,GAAG,SAAS;IAC/B,oGAAoG;IACpG,YAAY;QACR,IAAI,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;YACnC,OAAO,KAAK,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;SACtC,MAAM;YACH,OAAO,aAAa,EAAE,CAAC;SAC1B;KACJ;CACJ,CAAC;;;;;;;AAOF,SAAS,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE;IACzB,IAAI,GAAG,EAAE,CAAC,CAAC;IACX,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7C,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACjB,OAAO,WAAW,EAAE,CAAC;KACxB;IACD,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACjB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACjC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE;YAC9C,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;SACpB;KACJ;IACD,OAAO,GAAG,CAAC;CACd;;;AAGD,AAAO,SAAS,GAAG,IAAI;IACnB,IAAI,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;;IAEvC,OAAO,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;CACnC;;AAED,AAAO,SAAS,GAAG,IAAI;IACnB,IAAI,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;;IAEvC,OAAO,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;CAClC;;AC9DM,IAAI,GAAG,GAAG,YAAY;IACzB,OAAO,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;CAChD,CAAC;;ACCK,SAAS,QAAQ,EAAE,QAAQ,EAAE;IAChC,IAAI,eAAe,GAAG,oBAAoB,CAAC,QAAQ,CAAC;QAChD,KAAK,GAAG,eAAe,CAAC,IAAI,IAAI,CAAC;QACjC,QAAQ,GAAG,eAAe,CAAC,OAAO,IAAI,CAAC;QACvC,MAAM,GAAG,eAAe,CAAC,KAAK,IAAI,CAAC;QACnC,KAAK,GAAG,eAAe,CAAC,IAAI,IAAI,CAAC;QACjC,IAAI,GAAG,eAAe,CAAC,GAAG,IAAI,CAAC;QAC/B,KAAK,GAAG,eAAe,CAAC,IAAI,IAAI,CAAC;QACjC,OAAO,GAAG,eAAe,CAAC,MAAM,IAAI,CAAC;QACrC,OAAO,GAAG,eAAe,CAAC,MAAM,IAAI,CAAC;QACrC,YAAY,GAAG,eAAe,CAAC,WAAW,IAAI,CAAC,CAAC;;;IAGpD,IAAI,CAAC,aAAa,GAAG,CAAC,YAAY;QAC9B,OAAO,GAAG,GAAG;QACb,OAAO,GAAG,GAAG;QACb,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;;;IAG3B,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI;QACd,KAAK,GAAG,CAAC,CAAC;;;;IAId,IAAI,CAAC,OAAO,GAAG,CAAC,MAAM;QAClB,QAAQ,GAAG,CAAC;QACZ,KAAK,GAAG,EAAE,CAAC;;IAEf,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IAEhB,IAAI,CAAC,OAAO,GAAG,SAAS,EAAE,CAAC;;IAE3B,IAAI,CAAC,OAAO,EAAE,CAAC;CAClB;;AAED,AAAO,SAAS,UAAU,EAAE,GAAG,EAAE;IAC7B,OAAO,GAAG,YAAY,QAAQ,CAAC;CAClC;;ACxCc,SAAS,QAAQ,EAAE,MAAM,EAAE;IACtC,IAAI,MAAM,GAAG,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;KACvC,MAAM;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAC7B;CACJ;;ACUD;;AAEA,SAAS,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE;IAC/B,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;QACpC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,IAAI,IAAI,GAAG,GAAG,CAAC;QACf,IAAI,MAAM,GAAG,CAAC,EAAE;YACZ,MAAM,GAAG,CAAC,MAAM,CAAC;YACjB,IAAI,GAAG,GAAG,CAAC;SACd;QACD,OAAO,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;KACzF,CAAC,CAAC;CACN;;AAED,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACjB,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;;;AAIjB,aAAa,CAAC,GAAG,GAAG,gBAAgB,CAAC,CAAC;AACtC,aAAa,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACtC,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACvD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,MAAM,CAAC,IAAI,GAAG,gBAAgB,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;CAC3D,CAAC,CAAC;;;;;;;AAOH,IAAI,WAAW,GAAG,iBAAiB,CAAC;;AAEpC,SAAS,gBAAgB,CAAC,OAAO,EAAE,MAAM,EAAE;IACvC,IAAI,OAAO,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;;IAE5C,IAAI,OAAO,KAAK,IAAI,EAAE;QAClB,OAAO,IAAI,CAAC;KACf;;IAED,IAAI,KAAK,KAAK,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAChD,IAAI,KAAK,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,IAAI,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEjD,OAAO,OAAO,KAAK,CAAC;MAClB,CAAC;MACD,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC;CAC3C;;;AAGD,AAAO,SAAS,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE;IAC1C,IAAI,GAAG,EAAE,IAAI,CAAC;IACd,IAAI,KAAK,CAAC,MAAM,EAAE;QACd,GAAG,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;QACpB,IAAI,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;;QAE3G,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACxC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC/B,OAAO,GAAG,CAAC;KACd,MAAM;QACH,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;KACrC;CACJ;;AAED,SAAS,aAAa,EAAE,CAAC,EAAE;;;IAGvB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;CAC1D;;;;;;AAMD,KAAK,CAAC,YAAY,GAAG,YAAY,EAAE,CAAC;;;;;;;;;;;;;;AAcpC,AAAO,SAAS,YAAY,EAAE,KAAK,EAAE,aAAa,EAAE;IAChD,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,IAAI,CAAC;QAC1B,WAAW,CAAC;IAChB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;KACrC;IACD,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,KAAK,GAAG,gBAAgB,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;YAClD,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,OAAO,IAAI,CAAC;aACf;SACJ,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE;YAC7B,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;SACtB;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,aAAa,EAAE;YAC/B,WAAW,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,WAAW,IAAI,IAAI,EAAE;YACrB,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;SAC9B;QACD,IAAI,MAAM,KAAK,KAAK,EAAE;YAClB,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1C,WAAW,CAAC,IAAI,EAAE,cAAc,CAAC,KAAK,GAAG,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;aACpE,MAAM,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBAChC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;aACjC;SACJ;QACD,OAAO,IAAI,CAAC;KACf,MAAM;QACH,OAAO,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;KACrD;CACJ;;AAED,AAAO,SAAS,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE;IAC9C,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,KAAK,GAAG,CAAC,KAAK,CAAC;SAClB;;QAED,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;;QAErC,OAAO,IAAI,CAAC;KACf,MAAM;QACH,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;KAC5B;CACJ;;AAED,AAAO,SAAS,cAAc,EAAE,aAAa,EAAE;IAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;CAC3C;;AAED,AAAO,SAAS,gBAAgB,EAAE,aAAa,EAAE;IAC7C,IAAI,IAAI,CAAC,MAAM,EAAE;QACb,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;QAEpB,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;SAC3C;KACJ;IACD,OAAO,IAAI,CAAC;CACf;;AAED,AAAO,SAAS,uBAAuB,IAAI;IACvC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;QACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7B,MAAM,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,QAAQ,EAAE;QACpC,IAAI,KAAK,GAAG,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACzB;aACI;YACD,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SAC3B;KACJ;IACD,OAAO,IAAI,CAAC;CACf;;AAED,AAAO,SAAS,oBAAoB,EAAE,KAAK,EAAE;IACzC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,KAAK,CAAC;KAChB;IACD,KAAK,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;;IAEnD,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;CAChD;;AAED,AAAO,SAAS,oBAAoB,IAAI;IACpC,OAAO;QACH,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE;QACpD,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE;KACvD,CAAC;CACL;;AAED,AAAO,SAAS,2BAA2B,IAAI;IAC3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;QAClC,OAAO,IAAI,CAAC,aAAa,CAAC;KAC7B;;IAED,IAAI,CAAC,GAAG,EAAE,CAAC;;IAEX,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACpB,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;;IAErB,IAAI,CAAC,CAAC,EAAE,EAAE;QACN,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,EAAE;YAC/B,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;KAChD,MAAM;QACH,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;KAC9B;;IAED,OAAO,IAAI,CAAC,aAAa,CAAC;CAC7B;;AAED,AAAO,SAAS,OAAO,IAAI;IACvB,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;CAChD;;AAED,AAAO,SAAS,WAAW,IAAI;IAC3B,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;CAC/C;;AAED,AAAO,SAAS,KAAK,IAAI;IACrB,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,GAAG,KAAK,CAAC;CACrE;;ACjOD;AACA,IAAI,WAAW,GAAG,uDAAuD,CAAC;;;;;AAK1E,IAAI,QAAQ,GAAG,6IAA6I,CAAC;;AAE7J,AAAO,SAAS,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;IACxC,IAAI,QAAQ,GAAG,KAAK;;QAEhB,KAAK,GAAG,IAAI;QACZ,IAAI;QACJ,GAAG;QACH,OAAO,CAAC;;IAEZ,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;QACnB,QAAQ,GAAG;YACP,EAAE,GAAG,KAAK,CAAC,aAAa;YACxB,CAAC,IAAI,KAAK,CAAC,KAAK;YAChB,CAAC,IAAI,KAAK,CAAC,OAAO;SACrB,CAAC;KACL,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACxB,QAAQ,GAAG,EAAE,CAAC;QACd,IAAI,GAAG,EAAE;YACL,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACzB,MAAM;YACH,QAAQ,CAAC,YAAY,GAAG,KAAK,CAAC;SACjC;KACJ,MAAM,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC5C,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QACnC,QAAQ,GAAG;YACP,CAAC,IAAI,CAAC;YACN,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,2BAA2B,IAAI;YACtD,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,2BAA2B,IAAI;YACtD,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,yBAAyB,IAAI;YACtD,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,yBAAyB,IAAI;YACtD,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI;SACzD,CAAC;KACL,MAAM,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACzC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QACnC,QAAQ,GAAG;YACP,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;YAC5B,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;YAC5B,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;YAC5B,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;YAC5B,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;YAC5B,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;YAC5B,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;SAC/B,CAAC;KACL,MAAM,IAAI,QAAQ,IAAI,IAAI,EAAE;QACzB,QAAQ,GAAG,EAAE,CAAC;KACjB,MAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,EAAE;QACjF,OAAO,GAAG,iBAAiB,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;QAElF,QAAQ,GAAG,EAAE,CAAC;QACd,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC;QACnC,QAAQ,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;KAC/B;;IAED,GAAG,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;;IAE7B,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;QACnD,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;KAC/B;;IAED,OAAO,GAAG,CAAC;CACd;;AAED,cAAc,CAAC,EAAE,GAAG,QAAQ,CAAC,SAAS,CAAC;;AAEvC,SAAS,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE;;;;IAI1B,IAAI,GAAG,GAAG,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;IAEnD,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;CACxC;;AAED,SAAS,yBAAyB,CAAC,IAAI,EAAE,KAAK,EAAE;IAC5C,IAAI,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;;IAEvC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE;QACrC,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;IACtC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAClD,EAAE,GAAG,CAAC,MAAM,CAAC;KAChB;;IAED,GAAG,CAAC,YAAY,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;;IAEjE,OAAO,GAAG,CAAC;CACd;;AAED,SAAS,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;IACpC,IAAI,GAAG,CAAC;IACR,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE;QACtC,OAAO,CAAC,YAAY,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;KACvC;;IAED,KAAK,GAAG,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACrC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACtB,GAAG,GAAG,yBAAyB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;KAChD,MAAM;QACH,GAAG,GAAG,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7C,GAAG,CAAC,YAAY,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;QACrC,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC;KAC5B;;IAED,OAAO,GAAG,CAAC;CACd;;AC/GD;AACA,SAAS,WAAW,CAAC,SAAS,EAAE,IAAI,EAAE;IAClC,OAAO,UAAU,GAAG,EAAE,MAAM,EAAE;QAC1B,IAAI,GAAG,EAAE,GAAG,CAAC;;QAEb,IAAI,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,EAAE;YACpC,eAAe,CAAC,IAAI,EAAE,WAAW,GAAG,IAAI,IAAI,sDAAsD,GAAG,IAAI,GAAG,oBAAoB;YAChI,8EAA8E,CAAC,CAAC;YAChF,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC;SACzC;;QAED,GAAG,GAAG,OAAO,GAAG,KAAK,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;QAC3C,GAAG,GAAG,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAClC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC;KACf,CAAC;CACL;;AAED,AAAO,SAAS,WAAW,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE;IAChE,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa;QACrC,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC/B,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;;IAExC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE;;QAEhB,OAAO;KACV;;IAED,YAAY,GAAG,YAAY,IAAI,IAAI,GAAG,IAAI,GAAG,YAAY,CAAC;;IAE1D,IAAI,YAAY,EAAE;QACd,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,YAAY,GAAG,QAAQ,CAAC,CAAC;KAC9D;IACD,IAAI,IAAI,EAAE;QACNH,KAAG,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC,CAAC;KACxD;IACD,IAAI,MAAM,EAAE;QACR,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,MAAM,GAAG,QAAQ,CAAC,CAAC;KACxD;IACD,IAAI,YAAY,EAAE;QACd,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,IAAI,MAAM,CAAC,CAAC;KAC3C;CACJ;;AAED,AAAO,IAAI,GAAG,QAAQ,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAC5C,AAAO,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;;AChD3C,SAAS,iBAAiB,CAAC,QAAQ,EAAE,GAAG,EAAE;IAC7C,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IAC5C,OAAO,IAAI,GAAG,CAAC,CAAC,GAAG,UAAU;YACrB,IAAI,GAAG,CAAC,CAAC,GAAG,UAAU;YACtB,IAAI,GAAG,CAAC,GAAG,SAAS;YACpB,IAAI,GAAG,CAAC,GAAG,SAAS;YACpB,IAAI,GAAG,CAAC,GAAG,SAAS;YACpB,IAAI,GAAG,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC;CAC9C;;AAED,AAAO,SAASI,UAAQ,EAAE,IAAI,EAAE,OAAO,EAAE;;;IAGrC,IAAI,GAAG,GAAG,IAAI,IAAI,WAAW,EAAE;QAC3B,GAAG,GAAG,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/C,MAAM,GAAG,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,UAAU,CAAC;;IAE3D,IAAI,MAAM,GAAG,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;IAE1G,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;CAC5F;;ACvBM,SAAS,KAAK,IAAI;IACrB,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;CAC3B;;ACCM,SAAS,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;IACnC,IAAI,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9D,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE;QAC3C,OAAO,KAAK,CAAC;KAChB;IACD,KAAK,GAAG,cAAc,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,aAAa,CAAC,CAAC;IACpE,IAAI,KAAK,KAAK,aAAa,EAAE;QACzB,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;KAChD,MAAM;QACH,OAAO,UAAU,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;KACvE;CACJ;;AAED,AAAO,SAAS,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;IACpC,IAAI,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9D,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE;QAC3C,OAAO,KAAK,CAAC;KAChB;IACD,KAAK,GAAG,cAAc,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,aAAa,CAAC,CAAC;IACpE,IAAI,KAAK,KAAK,aAAa,EAAE;QACzB,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;KAChD,MAAM;QACH,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;KACrE;CACJ;;AAED,AAAO,SAAS,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE;IACrD,WAAW,GAAG,WAAW,IAAI,IAAI,CAAC;IAClC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrF,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;CACtF;;AAED,AAAO,SAAS,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;IAClC,IAAI,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;QACzD,OAAO,CAAC;IACZ,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE;QAC3C,OAAO,KAAK,CAAC;KAChB;IACD,KAAK,GAAG,cAAc,CAAC,KAAK,IAAI,aAAa,CAAC,CAAC;IAC/C,IAAI,KAAK,KAAK,aAAa,EAAE;QACzB,OAAO,IAAI,CAAC,OAAO,EAAE,KAAK,UAAU,CAAC,OAAO,EAAE,CAAC;KAClD,MAAM;QACH,OAAO,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,IAAI,OAAO,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;KAC7G;CACJ;;AAED,AAAO,SAAS,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE;IACzC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CACjE;;AAED,AAAO,SAAS,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE;IAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CAClE;;ACtDM,SAAS,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE;IACzC,IAAI,IAAI;QACJ,SAAS;QACT,KAAK,EAAE,MAAM,CAAC;;IAElB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,GAAG,CAAC;KACd;;IAED,IAAI,GAAG,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;;IAEpC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,GAAG,CAAC;KACd;;IAED,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,GAAG,CAAC;;IAExD,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;;IAE9B,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,SAAS,EAAE;QAC9D,MAAM,GAAG,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/B,IAAI,KAAK,KAAK,SAAS,EAAE;YACrB,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;SACvB,MAAM,IAAI,KAAK,KAAK,MAAM,EAAE;YACzB,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;SACxB;KACJ,MAAM;QACH,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC;QACpB,MAAM,GAAG,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAG,GAAG;YACrC,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAG,GAAG;YAChC,KAAK,KAAK,MAAM,GAAG,KAAK,GAAG,IAAI;YAC/B,KAAK,KAAK,KAAK,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,GAAG,KAAK;YAC7C,KAAK,KAAK,MAAM,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,GAAG,MAAM;YAC/C,KAAK,CAAC;KACb;IACD,OAAO,OAAO,GAAG,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;CAC9C;;AAED,SAAS,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;;IAEtB,IAAI,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;QAEvE,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC;QAChD,OAAO,EAAE,MAAM,CAAC;;IAEpB,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE;QAChB,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,cAAc,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;;QAEtD,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC;KAC9C,MAAM;QACH,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,cAAc,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;;QAEtD,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC;KAC9C;;;IAGD,OAAO,CAAC,CAAC,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;CAC1C;;ACzDD,KAAK,CAAC,aAAa,GAAG,sBAAsB,CAAC;AAC7C,KAAK,CAAC,gBAAgB,GAAG,wBAAwB,CAAC;;AAElD,AAAO,SAAS,QAAQ,IAAI;IACxB,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC;CAC/E;;AAED,AAAO,SAAS,WAAW,IAAI;IAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAC3B,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,EAAE;QAClC,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;;YAExC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC;SACtC,MAAM;YACH,OAAO,YAAY,CAAC,CAAC,EAAE,8BAA8B,CAAC,CAAC;SAC1D;KACJ,MAAM;QACH,OAAO,YAAY,CAAC,CAAC,EAAE,gCAAgC,CAAC,CAAC;KAC5D;CACJ;;;;;;;;AAQD,AAAO,SAAS,OAAO,IAAI;IACvB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,OAAO,oBAAoB,GAAG,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC;KAClD;IACD,IAAI,IAAI,GAAG,QAAQ,CAAC;IACpB,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;QACjB,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,GAAG,YAAY,GAAG,kBAAkB,CAAC;QAClE,IAAI,GAAG,GAAG,CAAC;KACd;IACD,IAAI,MAAM,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,CAAC;IAChC,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,MAAM,GAAG,QAAQ,CAAC;IACxE,IAAI,QAAQ,GAAG,uBAAuB,CAAC;IACvC,IAAI,MAAM,GAAG,IAAI,GAAG,MAAM,CAAC;;IAE3B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,QAAQ,GAAG,MAAM,CAAC,CAAC;CACzD;;AAED,AAAO,SAAS,MAAM,EAAE,WAAW,EAAE;IACjC,IAAI,CAAC,WAAW,EAAE;QACd,WAAW,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAC;KAC7E;IACD,IAAI,MAAM,GAAG,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAC7C,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;CAC/C;;ACnDM,SAAS,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE;IACvC,IAAI,IAAI,CAAC,OAAO,EAAE;YACV,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;aAClC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE;QACnC,OAAO,cAAc,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;KAChG,MAAM;QACH,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC;KAC1C;CACJ;;AAED,AAAO,SAAS,OAAO,EAAE,aAAa,EAAE;IACpC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,CAAC;CAClD;;ACZM,SAAS,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE;IACrC,IAAI,IAAI,CAAC,OAAO,EAAE;YACV,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;aAClC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE;QACnC,OAAO,cAAc,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;KAChG,MAAM;QACH,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC;KAC1C;CACJ;;AAED,AAAO,SAAS,KAAK,EAAE,aAAa,EAAE;IAClC,OAAO,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,CAAC;CAChD;;ACbD;;;AAGA,AAAO,SAAS,MAAM,EAAE,GAAG,EAAE;IACzB,IAAI,aAAa,CAAC;;IAElB,IAAI,GAAG,KAAK,SAAS,EAAE;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;KAC7B,MAAM;QACH,aAAa,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,aAAa,IAAI,IAAI,EAAE;YACvB,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;SAChC;QACD,OAAO,IAAI,CAAC;KACf;CACJ;;AAED,AAAO,IAAI,IAAI,GAAG,SAAS;IACvB,iJAAiJ;IACjJ,UAAU,GAAG,EAAE;QACX,IAAI,GAAG,KAAK,SAAS,EAAE;YACnB,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;SAC5B,MAAM;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3B;KACJ;CACJ,CAAC;;AAEF,AAAO,SAAS,UAAU,IAAI;IAC1B,OAAO,IAAI,CAAC,OAAO,CAAC;CACvB;;AC/BM,SAAS,OAAO,EAAE,KAAK,EAAE;IAC5B,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;;;IAG9B,QAAQ,KAAK;QACT,KAAK,MAAM;YACP,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;QAElB,KAAK,SAAS,CAAC;QACf,KAAK,OAAO;YACR,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;QAEjB,KAAK,MAAM,CAAC;QACZ,KAAK,SAAS,CAAC;QACf,KAAK,KAAK,CAAC;QACX,KAAK,MAAM;YACP,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;QAElB,KAAK,MAAM;YACP,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;QAEpB,KAAK,QAAQ;YACT,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;QAEpB,KAAK,QAAQ;YACT,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;KAC5B;;;IAGD,IAAI,KAAK,KAAK,MAAM,EAAE;QAClB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KACnB;IACD,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KACtB;;;IAGD,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAChD;;IAED,OAAO,IAAI,CAAC;CACf;;AAED,AAAO,SAAS,KAAK,EAAE,KAAK,EAAE;IAC1B,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAC9B,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,aAAa,EAAE;QAChD,OAAO,IAAI,CAAC;KACf;;;IAGD,IAAI,KAAK,KAAK,MAAM,EAAE;QAClB,KAAK,GAAG,KAAK,CAAC;KACjB;;IAED,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK,SAAS,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CAC/F;;AC1DM,SAAS,OAAO,IAAI;IACvB,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;CAC5D;;AAED,AAAO,SAAS,IAAI,IAAI;IACpB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;CAC5C;;AAED,AAAO,SAAS,MAAM,IAAI;IACtB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;CACnC;;AAED,AAAO,SAAS,OAAO,IAAI;IACvB,IAAI,CAAC,GAAG,IAAI,CAAC;IACb,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;CAC7F;;AAED,AAAO,SAAS,QAAQ,IAAI;IACxB,IAAI,CAAC,GAAG,IAAI,CAAC;IACb,OAAO;QACH,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE;QACf,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE;QACjB,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;QACd,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE;QAChB,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE;QACpB,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE;QACpB,YAAY,EAAE,CAAC,CAAC,YAAY,EAAE;KACjC,CAAC;CACL;;AAED,AAAO,SAAS,MAAM,IAAI;;IAEtB,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;CACrD;;AC7BM,SAASC,SAAO,IAAI;IACvB,OAAOC,OAAQ,CAAC,IAAI,CAAC,CAAC;CACzB;;AAED,AAAO,SAAS,YAAY,IAAI;IAC5B,OAAO,MAAM,CAAC,EAAE,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;CAC5C;;AAED,AAAO,SAAS,SAAS,IAAI;IACzB,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;CACzC;;ACdM,SAAS,YAAY,GAAG;IAC3B,OAAO;QACH,KAAK,EAAE,IAAI,CAAC,EAAE;QACd,MAAM,EAAE,IAAI,CAAC,EAAE;QACf,MAAM,EAAE,IAAI,CAAC,OAAO;QACpB,KAAK,EAAE,IAAI,CAAC,MAAM;QAClB,MAAM,EAAE,IAAI,CAAC,OAAO;KACvB,CAAC;CACL;;ACGD;;AAEA,cAAc,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IACxC,OAAO,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;CAChC,CAAC,CAAC;;AAEH,cAAc,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IACxC,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC;CACnC,CAAC,CAAC;;AAEH,SAAS,sBAAsB,EAAE,KAAK,EAAE,MAAM,EAAE;IAC5C,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;CACvD;;AAED,sBAAsB,CAAC,MAAM,MAAM,UAAU,CAAC,CAAC;AAC/C,sBAAsB,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC;AAC/C,sBAAsB,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC;AAC/C,sBAAsB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;;;;AAI/C,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAC/B,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;;;;AAIlC,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;AAC/B,eAAe,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;;;;AAKlC,aAAa,CAAC,GAAG,OAAO,WAAW,CAAC,CAAC;AACrC,aAAa,CAAC,GAAG,OAAO,WAAW,CAAC,CAAC;AACrC,aAAa,CAAC,IAAI,MAAM,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,IAAI,MAAM,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,MAAM,IAAI,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,MAAM,IAAI,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,OAAO,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3C,aAAa,CAAC,OAAO,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;;AAE3C,iBAAiB,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE;IACxF,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;CAC3C,CAAC,CAAC;;AAEH,iBAAiB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE;IAClE,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;CAChD,CAAC,CAAC;;;;AAIH,AAAO,SAAS,cAAc,EAAE,KAAK,EAAE;IACnC,OAAO,oBAAoB,CAAC,IAAI,CAAC,IAAI;YAC7B,KAAK;YACL,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,GAAG;YAC3B,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;CACxC;;AAED,AAAO,SAAS,iBAAiB,EAAE,KAAK,EAAE;IACtC,OAAO,oBAAoB,CAAC,IAAI,CAAC,IAAI;YAC7B,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3D;;AAED,AAAO,SAAS,iBAAiB,IAAI;IACjC,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CACzC;;AAED,AAAO,SAAS,cAAc,IAAI;IAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC;IACvC,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;CAC/D;;AAED,SAAS,oBAAoB,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1D,IAAI,WAAW,CAAC;IAChB,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,OAAO,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC;KAC1C,MAAM;QACH,WAAW,GAAG,WAAW,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,IAAI,GAAG,WAAW,EAAE;YACpB,IAAI,GAAG,WAAW,CAAC;SACtB;QACD,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;KAChE;CACJ;;AAED,SAAS,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE;IACnD,IAAI,aAAa,GAAG,kBAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;QACrE,IAAI,GAAG,aAAa,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;;IAEzE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IACjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAC7B,OAAO,IAAI,CAAC;CACf;;AClGD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;;;;AAIxC,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;;;;AAI7B,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;;;;AAI9B,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAC3B,aAAa,CAAC,GAAG,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;IACvC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;CACzC,CAAC,CAAC;;;;AAIH,AAAO,SAAS,aAAa,EAAE,KAAK,EAAE;IAClC,OAAO,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;CAC7G;;ACtBD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;;;;AAI7C,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;;AAG1B,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;;;;AAI3B,aAAa,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC/B,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvC,aAAa,CAAC,IAAI,EAAE,UAAU,QAAQ,EAAE,MAAM,EAAE;IAC5C,OAAO,QAAQ,GAAG,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,oBAAoB,CAAC;CACxE,CAAC,CAAC;;AAEH,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AACjC,aAAa,CAAC,IAAI,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;IACxC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;CACtD,CAAC,CAAC;;;;AAIH,AAAO,IAAI,gBAAgB,GAAG,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;;AC1BvD;;AAEA,cAAc,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;;;;AAIxD,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;;;AAGjC,eAAe,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;;;;AAIhC,aAAa,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;AACjC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC9B,aAAa,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IAC3D,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;CACpC,CAAC,CAAC;;;;;;AAMH,AAAO,SAAS,eAAe,EAAE,KAAK,EAAE;IACpC,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;IACrG,OAAO,KAAK,IAAI,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;CACzE;;AC3BD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;;;;AAI5C,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;;;;AAI5B,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;;;;AAI9B,aAAa,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC/B,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvC,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;;;;AAInC,AAAO,IAAI,YAAY,GAAG,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;;ACpBvD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;;;;AAI5C,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;;;;AAI5B,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;;;;AAI9B,aAAa,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC/B,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvC,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;;;;AAInC,AAAO,IAAI,YAAY,GAAG,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;;ACnBvD;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY;IAClC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,CAAC;CACvC,CAAC,CAAC;;AAEH,cAAc,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IACxC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;CACtC,CAAC,CAAC;;AAEH,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;AAChD,cAAc,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IAC1C,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;CAClC,CAAC,CAAC;AACH,cAAc,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IAC3C,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC;CACnC,CAAC,CAAC;AACH,cAAc,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IAC5C,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;CACpC,CAAC,CAAC;AACH,cAAc,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IAC7C,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC;CACrC,CAAC,CAAC;AACH,cAAc,CAAC,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IAC9C,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC;CACtC,CAAC,CAAC;AACH,cAAc,CAAC,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;IAC/C,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,OAAO,CAAC;CACvC,CAAC,CAAC;;;;;AAKH,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;;;;AAIlC,eAAe,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;;;;AAInC,aAAa,CAAC,GAAG,KAAK,SAAS,EAAE,MAAM,CAAC,CAAC;AACzC,aAAa,CAAC,IAAI,IAAI,SAAS,EAAE,MAAM,CAAC,CAAC;AACzC,aAAa,CAAC,KAAK,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;;AAEzC,IAAI,KAAK,CAAC;AACV,KAAK,KAAK,GAAG,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,KAAK,IAAI,GAAG,EAAE;IAClD,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;CACvC;;AAED,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE;IAC3B,KAAK,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;CACrD;;AAED,KAAK,KAAK,GAAG,GAAG,EAAE,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,KAAK,IAAI,GAAG,EAAE;IAC/C,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;CACjC;;;AAGD,AAAO,IAAI,iBAAiB,GAAG,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;;AClEjE;;AAEA,cAAc,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AACvC,cAAc,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;;;;AAIvC,AAAO,SAAS,WAAW,IAAI;IAC3B,OAAO,IAAI,CAAC,MAAM,GAAG,KAAK,GAAG,EAAE,CAAC;CACnC;;AAED,AAAO,SAAS,WAAW,IAAI;IAC3B,OAAO,IAAI,CAAC,MAAM,GAAG,4BAA4B,GAAG,EAAE,CAAC;CAC1D;;ACbD,IAAI,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC;;AAE7B,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAEA,KAAK,CAAC,GAAG,iBAAiB,GAAG,CAAC;AAC9B,KAAK,CAAC,QAAQ,YAAYF,UAAQ,CAAC;AACnC,KAAK,CAAC,KAAK,eAAe,KAAK,CAAC;AAChC,KAAK,CAAC,IAAI,gBAAgB,IAAI,CAAC;AAC/B,KAAK,CAAC,KAAK,eAAe,KAAK,CAAC;AAChC,KAAK,CAAC,MAAM,cAAc,MAAM,CAAC;AACjC,KAAK,CAAC,IAAI,gBAAgB,IAAI,CAAC;AAC/B,KAAK,CAAC,OAAO,aAAa,OAAO,CAAC;AAClC,KAAK,CAAC,EAAE,kBAAkB,EAAE,CAAC;AAC7B,KAAK,CAAC,KAAK,eAAe,KAAK,CAAC;AAChC,KAAK,CAAC,GAAG,iBAAiB,SAAS,CAAC;AACpC,KAAK,CAAC,SAAS,WAAW,SAAS,CAAC;AACpC,KAAK,CAAC,OAAO,aAAa,OAAO,CAAC;AAClC,KAAK,CAAC,QAAQ,YAAY,QAAQ,CAAC;AACnC,KAAK,CAAC,SAAS,WAAW,SAAS,CAAC;AACpC,KAAK,CAAC,MAAM,cAAc,MAAM,CAAC;AACjC,KAAK,CAAC,aAAa,OAAO,aAAa,CAAC;AACxC,KAAK,CAAC,cAAc,MAAM,cAAc,CAAC;AACzC,KAAK,CAAC,OAAO,aAAaC,SAAO,CAAC;AAClC,KAAK,CAAC,IAAI,gBAAgB,IAAI,CAAC;AAC/B,KAAK,CAAC,MAAM,cAAc,MAAM,CAAC;AACjC,KAAK,CAAC,UAAU,UAAU,UAAU,CAAC;AACrC,KAAK,CAAC,GAAG,iBAAiB,YAAY,CAAC;AACvC,KAAK,CAAC,GAAG,iBAAiB,YAAY,CAAC;AACvC,KAAK,CAAC,YAAY,QAAQ,YAAY,CAAC;AACvC,KAAK,CAAC,GAAG,iBAAiB,SAAS,CAAC;AACpC,KAAK,CAAC,OAAO,aAAa,OAAO,CAAC;AAClC,KAAK,CAAC,QAAQ,YAAY,QAAQ,CAAC;AACnC,KAAK,CAAC,OAAO,aAAa,OAAO,CAAC;AAClC,KAAK,CAAC,QAAQ,YAAY,QAAQ,CAAC;AACnC,KAAK,CAAC,MAAM,cAAc,MAAM,CAAC;AACjC,KAAK,CAAC,WAAW,SAAS,WAAW,CAAC;AACtC,KAAK,CAAC,OAAO,aAAa,OAAO,CAAC;AAClC,KAAK,CAAC,MAAM,cAAc,MAAM,CAAC;AACjC,KAAK,CAAC,QAAQ,YAAY,QAAQ,CAAC;AACnC,KAAK,CAAC,IAAI,gBAAgB,IAAI,CAAC;AAC/B,KAAK,CAAC,OAAO,aAAa,OAAO,CAAC;AAClC,KAAK,CAAC,YAAY,QAAQ,YAAY,CAAC;;;AAGvC,AACA,KAAK,CAAC,IAAI,SAAS,UAAU,CAAC;AAC9B,KAAK,CAAC,UAAU,GAAG,aAAa,CAAC;;;AAGjC,AACA,KAAK,CAAC,QAAQ,MAAM,cAAc,CAAC;AACnC,KAAK,CAAC,WAAW,GAAG,iBAAiB,CAAC;;;AAGtC,AACA,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,GAAG,aAAa,CAAC;;;AAG/C,AACA,KAAK,CAAC,KAAK,SAAS,WAAW,CAAC;AAChC,KAAK,CAAC,WAAW,GAAG,cAAc,CAAC;;;AAGnC,AACA,KAAK,CAAC,IAAI,aAAa,KAAK,CAAC,KAAK,UAAU,UAAU,CAAC;AACvD,KAAK,CAAC,OAAO,UAAU,KAAK,CAAC,QAAQ,OAAO,aAAa,CAAC;AAC1D,KAAK,CAAC,WAAW,MAAM,cAAc,CAAC;AACtC,KAAK,CAAC,cAAc,GAAG,iBAAiB,CAAC;;;AAGzC,AACA,AACA,AACA,KAAK,CAAC,IAAI,SAAS,gBAAgB,CAAC;AACpC,KAAK,CAAC,GAAG,UAAU,KAAK,CAAC,IAAI,eAAe,eAAe,CAAC;AAC5D,KAAK,CAAC,OAAO,MAAM,qBAAqB,CAAC;AACzC,KAAK,CAAC,UAAU,GAAG,kBAAkB,CAAC;AACtC,KAAK,CAAC,SAAS,IAAI,eAAe,CAAC;;;AAGnC,AACA,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC;;;AAGtC,AACA,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,YAAY,CAAC;;;AAG5C,AACA,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,YAAY,CAAC;;;AAG5C,AACA,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,YAAY,GAAG,iBAAiB,CAAC;;;AAG3D,AAaA,KAAK,CAAC,SAAS,cAAc,YAAY,CAAC;AAC1C,KAAK,CAAC,GAAG,oBAAoB,cAAc,CAAC;AAC5C,KAAK,CAAC,KAAK,kBAAkB,gBAAgB,CAAC;AAC9C,KAAK,CAAC,SAAS,cAAc,uBAAuB,CAAC;AACrD,KAAK,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;AAClD,KAAK,CAAC,KAAK,kBAAkB,oBAAoB,CAAC;AAClD,KAAK,CAAC,OAAO,gBAAgB,OAAO,CAAC;AACrC,KAAK,CAAC,WAAW,YAAY,WAAW,CAAC;AACzC,KAAK,CAAC,KAAK,kBAAkB,KAAK,CAAC;AACnC,KAAK,CAAC,KAAK,kBAAkB,KAAK,CAAC;;;AAGnC,AACA,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;AAC7B,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;;;AAG7B,AACA,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC,iDAAiD,EAAE,gBAAgB,CAAC,CAAC;AAC9F,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,kDAAkD,EAAE,WAAW,CAAC,CAAC;AAC1F,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC,gDAAgD,EAAE,UAAU,CAAC,CAAC;AACvF,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,0GAA0G,EAAE,UAAU,CAAC,CAAC;AACjJ,KAAK,CAAC,YAAY,GAAG,SAAS,CAAC,yGAAyG,EAAE,2BAA2B,CAAC,CAAC,AAEvK,AAAqB;;AC7IrB,SAAS,UAAU,EAAE,KAAK,EAAE;IACxB,OAAO,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;CACpC;;AAED,SAAS,YAAY,IAAI;IACrB,OAAO,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC;CACzD,AAED,AAWE;;AC3BK,SAAS,kBAAkB,EAAE,MAAM,EAAE;IACxC,OAAO,MAAM,CAAC;CACjB;;ACAD,IAAIE,OAAK,GAAG,MAAM,CAAC,SAAS,CAAC;;AAE7B,AACA,AACA,AACA,AACA,AACA,AACA,AAEAA,OAAK,CAAC,QAAQ,UAAU,QAAQ,CAAC;AACjCA,OAAK,CAAC,cAAc,IAAI,cAAc,CAAC;AACvCA,OAAK,CAAC,WAAW,OAAO,WAAW,CAAC;AACpCA,OAAK,CAAC,OAAO,WAAW,OAAO,CAAC;AAChCA,OAAK,CAAC,QAAQ,UAAU,kBAAkB,CAAC;AAC3CA,OAAK,CAAC,UAAU,QAAQ,kBAAkB,CAAC;AAC3CA,OAAK,CAAC,YAAY,MAAM,YAAY,CAAC;AACrCA,OAAK,CAAC,UAAU,QAAQ,UAAU,CAAC;AACnCA,OAAK,CAAC,GAAG,eAAe,GAAG,CAAC;;;AAG5B,AAQAA,OAAK,CAAC,MAAM,qBAAqB,YAAY,CAAC;AAC9CA,OAAK,CAAC,WAAW,gBAAgB,iBAAiB,CAAC;AACnDA,OAAK,CAAC,WAAW,gBAAgB,iBAAiB,CAAC;AACnDA,OAAK,CAAC,WAAW,SAAS,WAAW,CAAC;AACtCA,OAAK,CAAC,gBAAgB,IAAI,gBAAgB,CAAC;;;AAG3C,AACAA,OAAK,CAAC,IAAI,GAAG,UAAU,CAAC;AACxBA,OAAK,CAAC,cAAc,GAAG,oBAAoB,CAAC;AAC5CA,OAAK,CAAC,cAAc,GAAG,oBAAoB,CAAC;;;AAG5C,AAWAA,OAAK,CAAC,QAAQ,gBAAgB,cAAc,CAAC;AAC7CA,OAAK,CAAC,WAAW,aAAa,iBAAiB,CAAC;AAChDA,OAAK,CAAC,aAAa,WAAW,mBAAmB,CAAC;AAClDA,OAAK,CAAC,aAAa,WAAW,mBAAmB,CAAC;;AAElDA,OAAK,CAAC,aAAa,gBAAgB,aAAa,CAAC;AACjDA,OAAK,CAAC,kBAAkB,WAAW,kBAAkB,CAAC;AACtDA,OAAK,CAAC,gBAAgB,aAAa,gBAAgB,CAAC;;;AAGpD,AAEAA,OAAK,CAAC,IAAI,GAAG,UAAU,CAAC;AACxBA,OAAK,CAAC,QAAQ,GAAG,cAAc,CAAC;;AChEhC,SAASC,KAAG,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IACxC,IAAI,MAAM,GAAG,SAAS,EAAE,CAAC;IACzB,IAAI,GAAG,GAAG,SAAS,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;CACrC;;AAED,SAAS,cAAc,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;IAC3C,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;QAClB,KAAK,GAAG,MAAM,CAAC;QACf,MAAM,GAAG,SAAS,CAAC;KACtB;;IAED,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;;IAEtB,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,OAAOA,KAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;KAC7C;;IAED,IAAI,CAAC,CAAC;IACN,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QACrB,GAAG,CAAC,CAAC,CAAC,GAAGA,KAAG,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;KAC3C;IACD,OAAO,GAAG,CAAC;CACd;;;;;;;;;;AAUD,SAAS,gBAAgB,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;IAC3D,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE;QACnC,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;YAClB,KAAK,GAAG,MAAM,CAAC;YACf,MAAM,GAAG,SAAS,CAAC;SACtB;;QAED,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;KACzB,MAAM;QACH,MAAM,GAAG,YAAY,CAAC;QACtB,KAAK,GAAG,MAAM,CAAC;QACf,YAAY,GAAG,KAAK,CAAC;;QAErB,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;YAClB,KAAK,GAAG,MAAM,CAAC;YACf,MAAM,GAAG,SAAS,CAAC;SACtB;;QAED,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;KACzB;;IAED,IAAI,MAAM,GAAG,SAAS,EAAE;QACpB,KAAK,GAAG,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;;IAEhD,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,OAAOA,KAAG,CAAC,MAAM,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KACzD;;IAED,IAAI,CAAC,CAAC;IACN,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACpB,GAAG,CAAC,CAAC,CAAC,GAAGA,KAAG,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KACvD;IACD,OAAO,GAAG,CAAC;CACd;;AAED,AAAO,SAAS,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE;IACvC,OAAO,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;CAClD;;AAED,AAAO,SAAS,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE;IAC5C,OAAO,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;CACvD;;AAED,AAAO,SAAS,YAAY,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE;IACvD,OAAO,gBAAgB,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;CACpE;;AAED,AAAO,SAAS,iBAAiB,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE;IAC5D,OAAO,gBAAgB,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;CACzE;;AAED,AAAO,SAAS,eAAe,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE;IAC1D,OAAO,gBAAgB,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;CACvE;;ACxFD,kBAAkB,CAAC,IAAI,EAAE;IACrB,YAAY,EAAE,sBAAsB;IACpC,OAAO,GAAG,UAAU,MAAM,EAAE;QACxB,IAAI,CAAC,GAAG,MAAM,GAAG,EAAE;YACf,MAAM,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI;YAChD,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI;YAChB,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI;YAChB,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QAC5B,OAAO,MAAM,GAAG,MAAM,CAAC;KAC1B;CACJ,CAAC,CAAC;;ACdH;AACA,AAEA,AAQA,AAQA,AAaA,AACA,AAEA,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC,uDAAuD,EAAE,kBAAkB,CAAC,CAAC;AACpG,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC,+DAA+D,EAAE,SAAS,CAAC,CAAC,AAEvG,AAAc;;ACtCd,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;;AAEvB,AAAO,SAAS,GAAG,IAAI;IACnB,IAAI,IAAI,aAAa,IAAI,CAAC,KAAK,CAAC;;IAEhC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACjD,IAAI,CAAC,KAAK,WAAW,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,CAAC,OAAO,SAAS,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;IAE3C,IAAI,CAAC,YAAY,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAChD,IAAI,CAAC,OAAO,SAAS,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,IAAI,CAAC,OAAO,SAAS,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,IAAI,CAAC,KAAK,WAAW,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,CAAC,MAAM,UAAU,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1C,IAAI,CAAC,KAAK,WAAW,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;IAEzC,OAAO,IAAI,CAAC;CACf;;ACfD,SAASC,aAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE;IACrD,IAAI,KAAK,GAAG,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;IAEzC,QAAQ,CAAC,aAAa,IAAI,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC;IAC1D,QAAQ,CAAC,KAAK,YAAY,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;IAClD,QAAQ,CAAC,OAAO,UAAU,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC;;IAEpD,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;CAC7B;;;AAGD,AAAO,SAASC,KAAG,EAAE,KAAK,EAAE,KAAK,EAAE;IAC/B,OAAOD,aAAW,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;CAC7C;;;AAGD,AAAO,SAASE,UAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;IACpC,OAAOF,aAAW,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;CAC9C;;ACpBc,SAAS,OAAO,EAAE,MAAM,EAAE;IACrC,IAAI,MAAM,GAAG,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAC7B,MAAM;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC5B;CACJ;;ACFM,SAAS,MAAM,IAAI;IACtB,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;IACtC,IAAI,IAAI,WAAW,IAAI,CAAC,KAAK,CAAC;IAC9B,IAAI,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC;IAChC,IAAI,IAAI,WAAW,IAAI,CAAC,KAAK,CAAC;IAC9B,IAAI,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,CAAC;;;;IAInD,IAAI,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC;YAC7C,CAAC,YAAY,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE;QACtD,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC;QAC7D,IAAI,GAAG,CAAC,CAAC;QACT,MAAM,GAAG,CAAC,CAAC;KACd;;;;IAID,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,IAAI,CAAC;;IAExC,OAAO,aAAa,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;IAClD,IAAI,CAAC,OAAO,QAAQ,OAAO,GAAG,EAAE,CAAC;;IAEjC,OAAO,aAAa,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;IAC3C,IAAI,CAAC,OAAO,QAAQ,OAAO,GAAG,EAAE,CAAC;;IAEjC,KAAK,eAAe,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;IAC3C,IAAI,CAAC,KAAK,UAAU,KAAK,GAAG,EAAE,CAAC;;IAE/B,IAAI,IAAI,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;;;IAG7B,cAAc,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,MAAM,IAAI,cAAc,CAAC;IACzB,IAAI,IAAI,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC;;;IAG9C,KAAK,GAAG,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;IAC9B,MAAM,IAAI,EAAE,CAAC;;IAEb,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;IACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrB,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC;;IAEpB,OAAO,IAAI,CAAC;CACf;;AAED,AAAO,SAAS,YAAY,EAAE,IAAI,EAAE;;;IAGhC,OAAO,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC;CAC/B;;AAED,AAAO,SAAS,YAAY,EAAE,MAAM,EAAE;;IAElC,OAAO,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC;CACjC;;ACxDM,SAAS,EAAE,EAAE,KAAK,EAAE;IACvB,IAAI,IAAI,CAAC;IACT,IAAI,MAAM,CAAC;IACX,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;;IAEtC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;;IAE9B,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,MAAM,EAAE;QACvC,IAAI,KAAK,IAAI,CAAC,KAAK,KAAK,YAAY,GAAG,KAAK,CAAC;QAC7C,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;KACnD,MAAM;;QAEH,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QAC3D,QAAQ,KAAK;YACT,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG,CAAC,OAAO,YAAY,GAAG,MAAM,CAAC;YAC5D,KAAK,KAAK,MAAM,OAAO,IAAI,WAAW,YAAY,GAAG,KAAK,CAAC;YAC3D,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG,EAAE,MAAM,YAAY,GAAG,IAAI,CAAC;YAC1D,KAAK,QAAQ,GAAG,OAAO,IAAI,GAAG,IAAI,IAAI,YAAY,GAAG,GAAG,CAAC;YACzD,KAAK,QAAQ,GAAG,OAAO,IAAI,GAAG,KAAK,GAAG,YAAY,GAAG,IAAI,CAAC;;YAE1D,KAAK,aAAa,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,YAAY,CAAC;YACnE,SAAS,MAAM,IAAI,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;SACrD;KACJ;CACJ;;;AAGD,AAAO,SAASG,SAAO,IAAI;IACvB,OAAO;QACH,IAAI,CAAC,aAAa;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK;QAClB,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,GAAG,MAAM;QAC5B,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,GAAG,OAAO;KACrC,CAAC;CACL;;AAED,SAAS,MAAM,EAAE,KAAK,EAAE;IACpB,OAAO,YAAY;QACf,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;KACzB,CAAC;CACL;;AAED,AAAO,IAAI,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACzC,AAAO,IAAI,SAAS,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,AAAO,IAAI,SAAS,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,AAAO,IAAI,OAAO,UAAU,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,AAAO,IAAI,MAAM,WAAW,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,AAAO,IAAI,OAAO,UAAU,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,AAAO,IAAI,QAAQ,SAAS,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,AAAO,IAAI,OAAO,UAAU,MAAM,CAAC,GAAG,CAAC,CAAC;;ACnDjC,SAASJ,KAAG,EAAE,KAAK,EAAE;IACxB,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAC9B,OAAO,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAE,CAAC;CAC9B;;AAED,SAAS,UAAU,CAAC,IAAI,EAAE;IACtB,OAAO,YAAY;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC3B,CAAC;CACL;;AAED,AAAO,IAAI,YAAY,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC;AACrD,AAAO,IAAI,OAAO,QAAQ,UAAU,CAAC,SAAS,CAAC,CAAC;AAChD,AAAO,IAAI,OAAO,QAAQ,UAAU,CAAC,SAAS,CAAC,CAAC;AAChD,AAAO,IAAI,KAAK,UAAU,UAAU,CAAC,OAAO,CAAC,CAAC;AAC9C,AAAO,IAAI,IAAI,WAAW,UAAU,CAAC,MAAM,CAAC,CAAC;AAC7C,AAAO,IAAI,MAAM,SAAS,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC/C,AAAO,IAAI,KAAK,UAAU,UAAU,CAAC,OAAO,CAAC,CAAC;;AAE9C,AAAO,SAAS,KAAK,IAAI;IACrB,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;CACpC;;ACtBD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,IAAI,UAAU,GAAG;IACb,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;CACR,CAAC;;;AAGF,SAAS,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAE;IACxE,OAAO,MAAM,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;CAC9E;;AAED,SAASK,cAAY,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,EAAE;IAC1D,IAAI,QAAQ,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC,GAAG,EAAE,CAAC;IACpD,IAAI,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,KAAK,MAAM,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,MAAM,KAAK,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,KAAK,MAAM,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEvC,IAAI,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC;YACxC,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;YAC/B,OAAO,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;YACzC,KAAK,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC;YAC/B,KAAK,KAAK,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;YACvC,IAAI,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC;YAC/B,IAAI,MAAM,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;YACtC,MAAM,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC;YAC/B,MAAM,IAAI,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;YACxC,KAAK,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;IAEnE,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;IACrB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;IACd,OAAO,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;CAC3C;;;AAGD,AAAO,SAAS,0BAA0B,EAAE,gBAAgB,EAAE;IAC1D,IAAI,gBAAgB,KAAK,SAAS,EAAE;QAChC,OAAO,KAAK,CAAC;KAChB;IACD,IAAI,MAAM,CAAC,gBAAgB,CAAC,KAAK,UAAU,EAAE;QACzC,KAAK,GAAG,gBAAgB,CAAC;QACzB,OAAO,IAAI,CAAC;KACf;IACD,OAAO,KAAK,CAAC;CAChB;;;AAGD,AAAO,SAAS,2BAA2B,EAAE,SAAS,EAAE,KAAK,EAAE;IAC3D,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;QACrC,OAAO,KAAK,CAAC;KAChB;IACD,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC;KAChC;IACD,UAAU,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;IAC9B,OAAO,IAAI,CAAC;CACf;;AAED,AAAO,SAAS,QAAQ,EAAE,UAAU,EAAE;IAClC,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAC/B,IAAI,MAAM,GAAGA,cAAY,CAAC,IAAI,EAAE,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;;IAErD,IAAI,UAAU,EAAE;QACZ,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC7C;;IAED,OAAO,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;CACpC;;AC1ED,IAAIC,KAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;AAEnB,AAAO,SAASC,aAAW,GAAG;;;;;;;;IAQ1B,IAAI,OAAO,GAAGD,KAAG,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;IAC7C,IAAI,IAAI,WAAWA,KAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,IAAI,MAAM,SAASA,KAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,IAAI,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC;;;IAG1B,OAAO,aAAa,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;IAC3C,KAAK,eAAe,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;IAC3C,OAAO,IAAI,EAAE,CAAC;IACd,OAAO,IAAI,EAAE,CAAC;;;IAGd,KAAK,IAAI,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;IAC/B,MAAM,IAAI,EAAE,CAAC;;;;IAIb,IAAI,CAAC,GAAG,KAAK,CAAC;IACd,IAAI,CAAC,GAAG,MAAM,CAAC;IACf,IAAI,CAAC,GAAG,IAAI,CAAC;IACb,IAAI,CAAC,GAAG,KAAK,CAAC;IACd,IAAI,CAAC,GAAG,OAAO,CAAC;IAChB,IAAI,CAAC,GAAG,OAAO,CAAC;IAChB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;;IAE7B,IAAI,CAAC,KAAK,EAAE;;;QAGR,OAAO,KAAK,CAAC;KAChB;;IAED,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;QACzB,GAAG;QACH,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;QAClB,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;QAClB,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;QAC1B,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;QAClB,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;QAClB,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;CAC1B;;ACjDD,IAAIP,OAAK,GAAG,QAAQ,CAAC,SAAS,CAAC;;AAE/B,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAEAA,OAAK,CAAC,GAAG,cAAc,GAAG,CAAC;AAC3BA,OAAK,CAAC,GAAG,cAAcG,KAAG,CAAC;AAC3BH,OAAK,CAAC,QAAQ,SAASI,UAAQ,CAAC;AAChCJ,OAAK,CAAC,EAAE,eAAe,EAAE,CAAC;AAC1BA,OAAK,CAAC,cAAc,GAAG,cAAc,CAAC;AACtCA,OAAK,CAAC,SAAS,QAAQ,SAAS,CAAC;AACjCA,OAAK,CAAC,SAAS,QAAQ,SAAS,CAAC;AACjCA,OAAK,CAAC,OAAO,UAAU,OAAO,CAAC;AAC/BA,OAAK,CAAC,MAAM,WAAW,MAAM,CAAC;AAC9BA,OAAK,CAAC,OAAO,UAAU,OAAO,CAAC;AAC/BA,OAAK,CAAC,QAAQ,SAAS,QAAQ,CAAC;AAChCA,OAAK,CAAC,OAAO,UAAU,OAAO,CAAC;AAC/BA,OAAK,CAAC,OAAO,UAAUK,SAAO,CAAC;AAC/BL,OAAK,CAAC,OAAO,UAAU,MAAM,CAAC;AAC9BA,OAAK,CAAC,GAAG,cAAcC,KAAG,CAAC;AAC3BD,OAAK,CAAC,YAAY,KAAK,YAAY,CAAC;AACpCA,OAAK,CAAC,OAAO,UAAU,OAAO,CAAC;AAC/BA,OAAK,CAAC,OAAO,UAAU,OAAO,CAAC;AAC/BA,OAAK,CAAC,KAAK,YAAY,KAAK,CAAC;AAC7BA,OAAK,CAAC,IAAI,aAAa,IAAI,CAAC;AAC5BA,OAAK,CAAC,KAAK,YAAY,KAAK,CAAC;AAC7BA,OAAK,CAAC,MAAM,WAAW,MAAM,CAAC;AAC9BA,OAAK,CAAC,KAAK,YAAY,KAAK,CAAC;AAC7BA,OAAK,CAAC,QAAQ,SAAS,QAAQ,CAAC;AAChCA,OAAK,CAAC,WAAW,MAAMQ,aAAW,CAAC;AACnCR,OAAK,CAAC,QAAQ,SAASQ,aAAW,CAAC;AACnCR,OAAK,CAAC,MAAM,WAAWQ,aAAW,CAAC;AACnCR,OAAK,CAAC,MAAM,WAAW,MAAM,CAAC;AAC9BA,OAAK,CAAC,UAAU,OAAO,UAAU,CAAC;;;AAGlC,AAEAA,OAAK,CAAC,WAAW,GAAG,SAAS,CAAC,qFAAqF,EAAEQ,aAAW,CAAC,CAAC;AAClIR,OAAK,CAAC,IAAI,GAAG,IAAI,CAAC;;AC/ClB,sBAAsB,AACtB,AAEA,AACA,AACA,AAKA,AAKE;;ACVF;;AAEA,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;AAClC,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;;;;AAIrC,aAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;AAChC,aAAa,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AACnC,aAAa,CAAC,GAAG,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IAC/C,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;CACtD,CAAC,CAAC;AACH,aAAa,CAAC,GAAG,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;IAC/C,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;CACtC,CAAC,CAAC;;ACnBH,sBAAsB,AACtB,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAEA,AAEA,AAA0B;;ACnB1B;;;;;;AAMA,AAEAS,KAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;AAE1B,AAaA,AAIA,AAaA,AAOA,AAEA,AAEA,eAAe,CAACC,WAAK,CAAC,CAAC;;AAEvBD,KAAM,CAAC,EAAE,sBAAsBE,KAAE,CAAC;AAClCF,KAAM,CAAC,GAAG,qBAAqB,GAAG,CAAC;AACnCA,KAAM,CAAC,GAAG,qBAAqB,GAAG,CAAC;AACnCA,KAAM,CAAC,GAAG,qBAAqB,GAAG,CAAC;AACnCA,KAAM,CAAC,GAAG,qBAAqBG,SAAG,CAAC;AACnCH,KAAM,CAAC,IAAI,oBAAoBI,UAAI,CAAC;AACpCJ,KAAM,CAAC,MAAM,kBAAkBK,UAAM,CAAC;AACtCL,KAAM,CAAC,MAAM,kBAAkB,MAAM,CAAC;AACtCA,KAAM,CAAC,MAAM,kBAAkBM,kBAAM,CAAC;AACtCN,KAAM,CAAC,OAAO,iBAAiBO,aAAO,CAAC;AACvCP,KAAM,CAAC,QAAQ,gBAAgBQ,cAAQ,CAAC;AACxCR,KAAM,CAAC,QAAQ,gBAAgB,QAAQ,CAAC;AACxCA,KAAM,CAAC,QAAQ,gBAAgBS,YAAQ,CAAC;AACxCT,KAAM,CAAC,SAAS,eAAeU,YAAS,CAAC;AACzCV,KAAM,CAAC,UAAU,cAAcW,SAAU,CAAC;AAC1CX,KAAM,CAAC,UAAU,cAAc,UAAU,CAAC;AAC1CA,KAAM,CAAC,WAAW,aAAaY,eAAW,CAAC;AAC3CZ,KAAM,CAAC,WAAW,aAAaa,eAAW,CAAC;AAC3Cb,KAAM,CAAC,YAAY,YAAY,YAAY,CAAC;AAC5CA,KAAM,CAAC,YAAY,YAAY,YAAY,CAAC;AAC5CA,KAAM,CAAC,OAAO,iBAAiBc,WAAO,CAAC;AACvCd,KAAM,CAAC,aAAa,WAAWe,iBAAa,CAAC;AAC7Cf,KAAM,CAAC,cAAc,UAAU,cAAc,CAAC;AAC9CA,KAAM,CAAC,oBAAoB,GAAGgB,0BAAoB,CAAC;AACnDhB,KAAM,CAAC,qBAAqB,GAAGiB,2BAAqB,CAAC;AACrDjB,KAAM,CAAC,cAAc,UAAU,iBAAiB,CAAC;AACjDA,KAAM,CAAC,SAAS,eAAeE,KAAE,CAAC;;AAElC,AAAsB;;;;;;;;;;;;;;;;AC3EtB,CAAC,UAAU,IAAI,EAAE,OAAO,EAAE;CACzB,YAAY,CAAC;;;CAGb,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;EAC/C,MAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;EAC5B,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,OAAO,EAAE;EACxD,cAAc,GAAG,OAAO,CAAC,UAAiB,CAAC,CAAC;EAC5C,MAAM;EACN,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACrB;CACD,CAACgB,cAAI,EAAE,UAAU,MAAM,EAAE;CACzB,YAAY,CAAC;;;CAGb,IAAI,MAAM,CAAC,EAAE,KAAK,SAAS,EAAE;EAC5B,QAAQ,CAAC,kBAAkB,GAAG,MAAM,CAAC,EAAE,CAAC,OAAO,GAAG,sBAAsB,IAAI,MAAM,CAAC,EAAE,CAAC,WAAW,GAAG,iBAAiB,GAAG,kBAAkB,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;EACrK,OAAO,MAAM,CAAC;EACd;;CAED,IAAI,OAAO,GAAG,QAAQ;EACrB,KAAK,GAAG,EAAE;EACV,KAAK,GAAG,EAAE;EACV,KAAK,GAAG,EAAE;EACV,OAAO,GAAG,EAAE;EACZ,WAAW;;EAEX,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;EACzC,KAAK,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;EACzB,KAAK,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;;CAG3B,IAAI,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;EAC5C,QAAQ,CAAC,uEAAuE,GAAG,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC,CAAC;EAC1H;;;;;;CAMD,SAAS,aAAa,CAAC,QAAQ,EAAE;EAChC,IAAI,QAAQ,GAAG,EAAE,EAAE;GAClB,OAAO,QAAQ,GAAG,EAAE,CAAC;GACrB,MAAM,IAAI,QAAQ,GAAG,EAAE,EAAE;GACzB,OAAO,QAAQ,GAAG,EAAE,CAAC;GACrB;EACD,OAAO,QAAQ,GAAG,EAAE,CAAC;EACrB;;CAED,SAAS,YAAY,CAAC,MAAM,EAAE;EAC7B,IAAI,CAAC,GAAG,CAAC;GACR,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;GACzB,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;GAChB,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;GAC3B,UAAU,GAAG,CAAC;GACd,GAAG;GACH,GAAG,GAAG,CAAC;GACP,IAAI,GAAG,CAAC,CAAC;;;EAGV,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;GAChC,CAAC,GAAG,CAAC,CAAC;GACN,IAAI,GAAG,CAAC,CAAC,CAAC;GACV;;;EAGD,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GAC9B,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;GACzC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;GACrB;;;EAGD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACvC,UAAU,GAAG,UAAU,GAAG,EAAE,CAAC;GAC7B,GAAG,GAAG,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;GAC9C,GAAG,IAAI,GAAG,GAAG,UAAU,CAAC;GACxB;;EAED,OAAO,GAAG,GAAG,IAAI,CAAC;EAClB;;CAED,SAAS,UAAU,EAAE,KAAK,EAAE;EAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACtC,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GAClC;EACD;;CAED,SAAS,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE;EACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;GAChC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;GAChE;;EAED,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;EAC7B;;CAED,SAAS,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE;EACrC,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;;EAEhB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACpC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;GAC5B;;EAED,OAAO,GAAG,CAAC;EACX;;CAED,SAAS,MAAM,EAAE,MAAM,EAAE;EACxB,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;GAC3B,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;GAC5B,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;GAC3B,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;EAE9B,UAAU,CAAC,OAAO,CAAC,CAAC;EACpB,UAAU,CAAC,OAAO,CAAC,CAAC;EACpB,UAAU,CAAC,MAAM,CAAC,CAAC;;EAEnB,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;;EAEnC,OAAO;GACN,IAAI,SAAS,IAAI,CAAC,CAAC,CAAC;GACpB,KAAK,QAAQ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC;GACpD,OAAO,MAAM,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC;GACzC,MAAM,OAAO,MAAM;GACnB,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;GACxB,CAAC;EACF;;;;;;CAMD,SAAS,IAAI,EAAE,YAAY,EAAE;EAC5B,IAAI,YAAY,EAAE;GACjB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;GAChC;EACD;;CAED,IAAI,CAAC,SAAS,GAAG;EAChB,IAAI,GAAG,UAAU,QAAQ,EAAE;GAC1B,IAAI,CAAC,IAAI,SAAS,QAAQ,CAAC,IAAI,CAAC;GAChC,IAAI,CAAC,KAAK,QAAQ,QAAQ,CAAC,KAAK,CAAC;GACjC,IAAI,CAAC,MAAM,OAAO,QAAQ,CAAC,MAAM,CAAC;GAClC,IAAI,CAAC,OAAO,MAAM,QAAQ,CAAC,OAAO,CAAC;GACnC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;GACtC;;EAED,MAAM,GAAG,UAAU,SAAS,EAAE;GAC7B,IAAI,MAAM,GAAG,CAAC,SAAS;IACtB,MAAM,GAAG,IAAI,CAAC,MAAM;IACpB,CAAC,CAAC;;GAEH,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;KACvB,OAAO,CAAC,CAAC;KACT;IACD;GACD;;EAED,KAAK,GAAG,UAAU,SAAS,EAAE;GAC5B,IAAI,MAAM,IAAI,CAAC,SAAS;IACvB,OAAO,GAAG,IAAI,CAAC,OAAO;IACtB,MAAM,IAAI,IAAI,CAAC,MAAM;IACrB,GAAG,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC;IAC3B,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;;GAEnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;IACzB,MAAM,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;IACxB,UAAU,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,UAAU,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEpC,IAAI,MAAM,GAAG,UAAU,IAAI,EAAE,CAAC,oBAAoB,EAAE;KACnD,MAAM,GAAG,UAAU,CAAC;KACpB,MAAM,IAAI,MAAM,GAAG,UAAU,IAAI,EAAE,CAAC,kBAAkB,EAAE;KACxD,MAAM,GAAG,UAAU,CAAC;KACpB;;IAED,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,GAAG,KAAK,CAAC,EAAE;KAC1C,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;KAClB;IACD;;GAED,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;GACpB;;EAED,IAAI,GAAG,UAAU,GAAG,EAAE;GACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;GACpC;;EAED,MAAM,GAAG,UAAU,GAAG,EAAE;GACvB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;GACtC;EACD,CAAC;;;;;;CAMF,SAAS,QAAQ,CAAC,EAAE,EAAE;EACrB,IAAI,UAAU,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;EACnC,IAAI,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;EAC5C,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;;;GAGpB,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;GAC/B,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;GACxC,MAAM;;;GAGN,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;GACvC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;GAClC;;EAED,IAAI,IAAI,KAAK,KAAK,EAAE;GACnB,IAAI,GAAG,SAAS,CAAC;GACjB;;EAED,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;EACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,iBAAiB,EAAE,CAAC;EACrC;;CAED,SAAS,SAAS,CAAC,IAAI,EAAE;EACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACjB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;EACrB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;EACnB;;CAED,SAAS,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,QAAQ,EAAE;EACvD,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;EAC9E,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,KAAK,QAAQ,CAAC,IAAI,EAAE;GACzE,IAAI,CAAC,SAAS,EAAE,CAAC;GACjB;EACD,CAAC;;CAEF,SAAS,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE;EAC9B,IAAI,GAAG,EAAE,IAAI,CAAC;;EAEd,QAAQ,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,IAAI,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG;GACtD,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;GAC5C,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,EAAE;IAC9B,GAAG,GAAG,GAAG,CAAC;IACV,MAAM;IACN,IAAI,GAAG,GAAG,CAAC;IACX;GACD;;EAED,OAAO,GAAG,CAAC;EACX;;CAED,SAAS,WAAW,GAAG;EACtB,IAAI,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,CAAC;GAC3C,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;GAC9C,OAAO,GAAG,CAAC,IAAI,CAAC;GAChB,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;;EAEjB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;GACxB,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;GAC/C,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;IAChC,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAChC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,OAAO,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACtD;GACD,IAAI,GAAG,IAAI,CAAC;GACZ;;EAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;GACvB,OAAO,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;GAC1D,OAAO,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;GAC1D;;EAED,OAAO,OAAO,CAAC;EACf;;CAED,SAAS,cAAc,EAAE,CAAC,EAAE,CAAC,EAAE;EAC9B,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,EAAE;GACpC,OAAO,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;GACrC;EACD,IAAI,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,SAAS,EAAE;GAChC,OAAO,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;GACjC;EACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;EAC7C;;CAED,SAAS,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE;EACrC,IAAI,CAAC,EAAE,MAAM,CAAC;EACd,UAAU,CAAC,OAAO,CAAC,CAAC;EACpB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACpC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;GACpB,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;GACxC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;GAC7B;EACD;;CAED,SAAS,qBAAqB,EAAE,OAAO,EAAE;EACxC,IAAI,aAAa,GAAG,OAAO,CAAC,MAAM;GACjC,eAAe,GAAG,EAAE;GACpB,GAAG,GAAG,EAAE;GACR,CAAC,EAAE,CAAC,EAAE,aAAa,CAAC;;EAErB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;GACnC,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;GACjD,KAAK,CAAC,IAAI,aAAa,EAAE;IACxB,IAAI,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;KACpC,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KAC1B;IACD;GACD;;EAED,KAAK,CAAC,IAAI,eAAe,EAAE;GAC1B,IAAI,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;IACtC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB;GACD;;EAED,OAAO,GAAG,CAAC;EACX;;CAED,SAAS,YAAY,IAAI;;;EAGxB,IAAI;GACH,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;GAChE,IAAI,QAAQ,CAAC;IACZ,IAAI,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,IAAI,IAAI,EAAE;KACT,OAAO,IAAI,CAAC;KACZ;IACD,QAAQ,CAAC,wBAAwB,GAAG,QAAQ,GAAG,wDAAwD,CAAC,CAAC;IACzG;GACD,CAAC,OAAO,CAAC,EAAE;;GAEX;;EAED,IAAI,OAAO,GAAG,WAAW,EAAE;GAC1B,aAAa,GAAG,OAAO,CAAC,MAAM;GAC9B,OAAO,GAAG,qBAAqB,CAAC,OAAO,CAAC;GACxC,UAAU,GAAG,EAAE;GACf,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;;EAEjB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACpC,SAAS,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;GAC9D,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;IACnC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC;GACD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;GAC3B;;EAED,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;;EAEhC,OAAO,UAAU,CAAC,MAAM,GAAG,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;EACnE;;CAED,SAAS,KAAK,EAAE,WAAW,EAAE;EAC5B,IAAI,CAAC,WAAW,IAAI,WAAW,EAAE;GAChC,WAAW,GAAG,YAAY,EAAE,CAAC;GAC7B;EACD,OAAO,WAAW,CAAC;EACnB;;;;;;CAMD,SAAS,aAAa,EAAE,IAAI,EAAE;EAC7B,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EACtD;;CAED,SAAS,OAAO,EAAE,MAAM,EAAE;EACzB,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC;;EAE/B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;GAC/B,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;GAClB;;EAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACnC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;GAC7B,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;GAChB,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;GACjC,KAAK,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;GAC9B,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;GACzB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;IACb,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C;GACD;EACD;;CAED,SAAS,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE;EAC/B,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;;EAE3B,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;EACvB,IAAI,IAAI,CAAC;;EAET,IAAI,IAAI,YAAY,IAAI,EAAE;GACzB,OAAO,IAAI,CAAC;GACZ;;EAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;GAC7B,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;GACtB,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;GACnB,OAAO,IAAI,CAAC;GACZ;;;EAGD,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,MAAM,KAAK,OAAO,KAAK,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE;GAChF,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;GAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAChB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;GACxB,OAAO,IAAI,CAAC;GACZ;;EAED,OAAO,IAAI,CAAC;EACZ;;CAED,SAAS,QAAQ,IAAI;EACpB,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC;;EAEhB,KAAK,CAAC,IAAI,KAAK,EAAE;GAChB,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;IACzE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB;GACD;;EAED,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;EAClB;;CAED,SAAS,OAAO,EAAE,OAAO,EAAE;EAC1B,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC;;EAE/B,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;GAChC,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;GACpB;;EAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACpC,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;GAE9B,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GAClC,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;GAElC,KAAK,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;GACzB,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;GAE1B,KAAK,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;GACzB,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;GAC1B;EACD;;CAED,SAAS,QAAQ,EAAE,IAAI,EAAE;EACxB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACpB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACpB,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;EAC9B;;CAED,SAAS,UAAU,EAAE,IAAI,EAAE;EAC1B,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;GAC7B,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;IAC9B,QAAQ,CAAC,wBAAwB,GAAG,IAAI,GAAG,sDAAsD,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;GAClH;EACD,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;EACvB;;CAED,SAAS,WAAW,EAAE,CAAC,EAAE;EACxB,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;EAC1C;;CAED,SAAS,QAAQ,EAAE,OAAO,EAAE;EAC3B,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,EAAE;GAC1E,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;GACvB;EACD;;;;;;CAMD,SAAS,EAAE,EAAE,KAAK,EAAE;EACnB,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;GACtD,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;GACtC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;GACpB,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;EAErC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;GACxD,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;GACpC;;EAED,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;;EAEb,OAAO,GAAG,CAAC;EACX;;CAED,EAAE,CAAC,OAAO,QAAQ,OAAO,CAAC;CAC1B,EAAE,CAAC,WAAW,IAAI,EAAE,CAAC;CACrB,EAAE,CAAC,MAAM,SAAS,KAAK,CAAC;CACxB,EAAE,CAAC,MAAM,SAAS,KAAK,CAAC;CACxB,EAAE,CAAC,MAAM,SAAS,KAAK,CAAC;CACxB,EAAE,CAAC,GAAG,YAAY,OAAO,CAAC;CAC1B,EAAE,CAAC,IAAI,WAAW,OAAO,CAAC;CAC1B,EAAE,CAAC,IAAI,WAAW,QAAQ,CAAC;CAC3B,EAAE,CAAC,IAAI,WAAW,OAAO,CAAC;CAC1B,EAAE,CAAC,UAAU,KAAK,UAAU,CAAC;CAC7B,EAAE,CAAC,KAAK,UAAU,KAAK,CAAC;CACxB,EAAE,CAAC,KAAK,UAAU,QAAQ,CAAC;CAC3B,EAAE,CAAC,IAAI,WAAW,IAAI,CAAC;CACvB,EAAE,CAAC,MAAM,SAAS,MAAM,CAAC;CACzB,EAAE,CAAC,YAAY,GAAG,YAAY,CAAC;CAC/B,EAAE,CAAC,WAAW,IAAI,WAAW,CAAC;CAC9B,EAAE,CAAC,kBAAkB,KAAK,IAAI,CAAC;CAC/B,EAAE,CAAC,oBAAoB,GAAG,KAAK,CAAC;;;;;;CAMhC,IAAI,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;;CAEnB,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC;;CAEf,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;;CAE1B,MAAM,CAAC,YAAY,GAAG,UAAU,GAAG,EAAE,QAAQ,EAAE;EAC9C,IAAI,IAAI,GAAG,MAAM,CAAC,WAAW;GAC5B,MAAM,CAAC;;EAER,IAAI,GAAG,CAAC,EAAE,KAAK,SAAS,EAAE;GACzB,IAAI,IAAI,IAAI,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;IAC5C,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAC/B,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IAC1C;GACD,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC;GACd;EACD,IAAI,GAAG,CAAC,EAAE,EAAE;GACX,MAAM,GAAG,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;GAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE;IAC1B,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;IACrB;GACD,IAAI,GAAG,CAAC,SAAS,KAAK,SAAS,EAAE;IAChC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACjC,MAAM;IACN,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC3B;GACD;EACD,CAAC;;CAEF,EAAE,CAAC,EAAE,GAAG,UAAU,IAAI,EAAE;EACvB,IAAI,IAAI,EAAE;GACT,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;GACxB,IAAI,IAAI,CAAC,EAAE,EAAE;IACZ,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC1B,MAAM;IACN,QAAQ,CAAC,kCAAkC,GAAG,IAAI,GAAG,0DAA0D,CAAC,CAAC;IACjH;GACD,OAAO,IAAI,CAAC;GACZ;EACD,IAAI,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;EACrC,CAAC;;CAEF,SAAS,QAAQ,EAAE,GAAG,EAAE;EACvB,OAAO,YAAY;GAClB,IAAI,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;GAC3C,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACtB,CAAC;EACF;;CAED,SAAS,aAAa,EAAE,GAAG,EAAE;EAC5B,OAAO,YAAY;GAClB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;GACf,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GAClC,CAAC;EACF;;CAED,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;CACpC,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;CACpC,EAAE,CAAC,GAAG,QAAQ,aAAa,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;;CAEpC,MAAM,CAAC,EAAE,CAAC,UAAU,GAAG,SAAS,IAAI,EAAE;EACrC,IAAI,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;GAC5C,QAAQ,CAAC,oFAAoF,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;GACtH;EACD,MAAM,CAAC,WAAW,GAAG,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;EACjD,OAAO,MAAM,CAAC;EACd,CAAC;;;CAGF,IAAI,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;CAC/C,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,gBAAgB,EAAE;;EAE1E,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC5B,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC5B,MAAM,IAAI,gBAAgB,EAAE;;EAE5B,gBAAgB,CAAC,EAAE,GAAG,IAAI,CAAC;EAC3B;;;;CAID,OAAO,MAAM,CAAC;CACd,CAAC,EAAE;;;;;;;;;;;;;;;;;;;;;;ACxlBJ,IAAI,MAAM,GAAG,cAAc,GAAGC,cAA4B,CAAC;AAC3D,MAAM,CAAC,EAAE,CAAC,IAAI,CAACC,YAAoC,CAAC,CAAC;;;ACCrD,oBAAe;YACH,IADG;QAEP,mBAFO;SAGN,uBAHM;YAIH,YAJG;YAKH,KALG;eAMA,KANA;;kBAQG,KARH;;gBAUC,iBAVD;gBAWC;cACF,KADE;mBAEG,IAFH;WAGL;cACG;yBACW,KADX;sBAEQ;;;GAjBP;wBAqBS;WACb;;aAEE,QAFF;;;YAKC;KANY;cAQV;UACJ,0BADI;gBAEEpB,MAAOqB,EAAP,CAAUC,KAAV;;GA/BD;UAkCL,YAlCK,EAAf;;ACFA;;;;;;;;AAQA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,EAAnC,EAAoD;MAAbC,OAAa,uEAAH,CAAG;;MAC5CC,gBAAgB,CAAtB;MACI,CAACF,EAAD,IAAO,CAACA,GAAGG,SAAX,IAAwBF,WAAWC,aAAvC,EAAsD;WAC7C,KAAP;;;SAGKF,GAAGG,SAAH,CAAaC,QAAb,CAAsBL,SAAtB,IACH,IADG,GAEHD,eAAeC,SAAf,EAA0BC,GAAGK,UAA7B,EAAyCJ,UAAU,CAAnD,CAFJ;;;;;;;AASF,SAASK,eAAT,CAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,KAAvC,EAA8C;MACxC,EAAED,QAAQC,KAAV,CAAJ,EAAsB;;;;SAIfC,gBAAP,CAAwB,OAAxB,EAAiC,aAAK;QAChC,CAACZ,eAAe,UAAf,EAA2Ba,EAAEC,MAA7B,CAAL,EAA2C;;;;aAIlCC,UAAT,GAAsB;UACdC,YAAYC,SAASC,aAAT,CAAuB,kCAAvB,CAAlB;UACMC,aAAaF,SAASC,aAAT,CAAuB,mCAAvB,CAAnB;;UAEIF,aAAaG,UAAjB,EAA6B;kBACjBC,KAAV,GAAkBV,IAAlB;mBACWU,KAAX,GAAmBT,KAAnB;;;;eAIOI,UAAX,EAAuB,GAAvB;GAfF;;;AAmBF,YAAe;;CAAf;;AC/CA;AACA,AACA,AACA,AAEA;;;AAGA,SAASM,SAAT,GAAgC;MAAbC,MAAa,uEAAJ,EAAI;;;GAE7B,QAAD,EAAW,QAAX,EAAqBC,OAArB,CAA6B;WAAOC,OAAOC,OAAOC,GAAP,CAAP,kBAAkCA,GAAlC,iBAAP;GAA7B;;MAGEC,YAL4B,GAW1BL,MAX0B,CAK5BK,YAL4B;MAM5BC,aAN4B,GAW1BN,MAX0B,CAM5BM,aAN4B;MAO5BC,QAP4B,GAW1BP,MAX0B,CAO5BO,QAP4B;MAQ5BC,QAR4B,GAW1BR,MAX0B,CAQ5BQ,QAR4B;MAS5BC,aAT4B,GAW1BT,MAX0B,CAS5BS,aAT4B;MAU5BC,SAV4B,GAW1BV,MAX0B,CAU5BU,SAV4B;;;SAc5BH,YACAA,SAASA,QAAT,KAAsBI,SADtB,IAEAJ,SAASK,UAAT,KAAwBD,SAH1B,EAIE,yBAJF;;;MAQME,YAAYV,OAAO,oBAAP,CAAlB;YACUW,gBAAV,CAA2BL,aAA3B;YACUM,WAAV,CAAsBL,SAAtB;YACUM,eAAV,CAA0BT,QAA1B;;MAEMU,gBAAgBC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,aAAlB,EAAiCpB,MAAjC,CAAtB;MACIqB,cAAJ,GAAqBC,IAArB,CAA0BL,aAA1B;;QAEM/B,eAAN,CAAsBsB,QAAtB,EAAgCH,YAAhC,EAA8CC,aAA9C;CAGF;;;;","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}