{"version":3,"file":"scheduler.js","sources":["src/scheduler.js"],"sourcesContent":["/* global moment */\n/**\n *\n * This file replaces the original scheduler object used by Timekit.io\n * A compilation step substitutes the original reference to a reference\n * to this object.\n *\n */\nfunction request(method, url, data) {\n  const config = { method };\n\n  if (method.toUpperCase() === 'POST') {\n    config.body = JSON.stringify(data);\n  }\n\n  return fetch(url, config)\n    .then((res) => res.json())\n    .then((json) => json);\n}\n\nfunction getUserTimezone() {\n  return Promise.resolve({\n    data: {\n      timezone: moment.tz.guess(),\n      utc_offset: moment().utcOffset(),\n    },\n  });\n}\n\nlet findTime = () => {};\nlet createBooking = () => {};\n\nconst scheduler = {\n  configure() { return this; },\n  setUser() { return this; },\n  include() { return this; },\n  headers() { return this; },\n  getUserTimezone,\n  findTime: data => Promise.resolve(findTime(data)), // to be overridden by controller\n  createBooking: data => createBooking(data), // to be overridden by controller\n  setFindTime(f) { findTime = f; },\n  setCreateBooking(f) { createBooking = f; },\n};\n\nmodule.exports = scheduler;\n"],"names":["getUserTimezone","Promise","resolve","moment","tz","guess","utcOffset","findTime","createBooking","scheduler","data","f"],"mappings":";;;;;;AAAA;;;;;;;;AAQA,AAYA,SAASA,eAAT,GAA2B;SAClBC,QAAQC,OAAR,CAAgB;UACf;gBACMC,OAAOC,EAAP,CAAUC,KAAV,EADN;kBAEQF,SAASG,SAAT;;GAHT,CAAP;;;AAQF,IAAIC,YAAW,oBAAM,EAArB;AACA,IAAIC,iBAAgB,yBAAM,EAA1B;;AAEA,IAAMC,YAAY;WAAA,uBACJ;WAAS,IAAP;GADE;SAAA,qBAEN;WAAS,IAAP;GAFI;SAAA,qBAGN;WAAS,IAAP;GAHI;SAAA,qBAIN;WAAS,IAAP;GAJI;;kCAAA;YAMN;WAAQR,QAAQC,OAAR,CAAgBK,UAASG,IAAT,CAAhB,CAAR;GANM;iBAOD;WAAQF,eAAcE,IAAd,CAAR;GAPC;aAAA,uBAQJC,CARI,EAQD;gBAAaA,CAAX;GARD;kBAAA,4BASCA,CATD,EASI;qBAAkBA,CAAhB;;CATxB;;AAYA,kBAAiBF,SAAjB;;;;"}